
youlostit-ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000462c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080047bc  080047bc  000057bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048b0  080048b0  000061c0  2**0
                  CONTENTS
  4 .ARM          00000008  080048b0  080048b0  000058b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048b8  080048b8  000061c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048b8  080048b8  000058b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048bc  080048bc  000058bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c0  20000000  080048c0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  200001c0  08004a80  000061c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  08004a80  000064cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000061c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a3cb  00000000  00000000  000061f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb0  00000000  00000000  000105bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  00012470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000725  00000000  00000000  00012e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002751d  00000000  00000000  00013535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a95a  00000000  00000000  0003aa52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0e09  00000000  00000000  000453ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001361b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002db8  00000000  00000000  001361f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  00138fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001c0 	.word	0x200001c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080047a4 	.word	0x080047a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001c4 	.word	0x200001c4
 80001cc:	080047a4 	.word	0x080047a4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ble_init>:
 int16_t connectionHandler[2] = {-1, -1}; // Little Endian Format for connection handler
 
 /**
  * Initializes the BLE module with appropriate settings
  */
 void ble_init(){
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af02      	add	r7, sp, #8
	 //fetching the reset event
	 rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 8000286:	2006      	movs	r0, #6
 8000288:	f003 fa6c 	bl	8003764 <malloc>
 800028c:	4603      	mov	r3, r0
 800028e:	461a      	mov	r2, r3
 8000290:	4b70      	ldr	r3, [pc, #448]	@ (8000454 <ble_init+0x1d4>)
 8000292:	601a      	str	r2, [r3, #0]
	 int res;
 
	 while(!dataAvailable);
 8000294:	bf00      	nop
 8000296:	4b70      	ldr	r3, [pc, #448]	@ (8000458 <ble_init+0x1d8>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d0fb      	beq.n	8000296 <ble_init+0x16>
	 res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 800029e:	4b6d      	ldr	r3, [pc, #436]	@ (8000454 <ble_init+0x1d4>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2106      	movs	r1, #6
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 f905 	bl	80004b4 <fetchBleEvent>
 80002aa:	6078      	str	r0, [r7, #4]
 
	 if(res==BLE_OK){
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d111      	bne.n	80002d6 <ble_init+0x56>
	 res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 80002b2:	4b68      	ldr	r3, [pc, #416]	@ (8000454 <ble_init+0x1d4>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2206      	movs	r2, #6
 80002b8:	4968      	ldr	r1, [pc, #416]	@ (800045c <ble_init+0x1dc>)
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 f984 	bl	80005c8 <checkEventResp>
 80002c0:	6078      	str	r0, [r7, #4]
	 if(res==BLE_OK){
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d106      	bne.n	80002d6 <ble_init+0x56>
		stackInitCompleteFlag|=0x01;
 80002c8:	4b65      	ldr	r3, [pc, #404]	@ (8000460 <ble_init+0x1e0>)
 80002ca:	881b      	ldrh	r3, [r3, #0]
 80002cc:	f043 0301 	orr.w	r3, r3, #1
 80002d0:	b29a      	uxth	r2, r3
 80002d2:	4b63      	ldr	r3, [pc, #396]	@ (8000460 <ble_init+0x1e0>)
 80002d4:	801a      	strh	r2, [r3, #0]
	 }
	 }
	 HAL_Delay(10);
 80002d6:	200a      	movs	r0, #10
 80002d8:	f001 fb46 	bl	8001968 <HAL_Delay>
	 free(rxEvent);
 80002dc:	4b5d      	ldr	r3, [pc, #372]	@ (8000454 <ble_init+0x1d4>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4618      	mov	r0, r3
 80002e2:	f003 fa47 	bl	8003774 <free>
 
	 //INIT GATT
	 if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 80002e6:	2300      	movs	r3, #0
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	2307      	movs	r3, #7
 80002ec:	4a5d      	ldr	r2, [pc, #372]	@ (8000464 <ble_init+0x1e4>)
 80002ee:	2104      	movs	r1, #4
 80002f0:	485d      	ldr	r0, [pc, #372]	@ (8000468 <ble_init+0x1e8>)
 80002f2:	f000 fa9f 	bl	8000834 <BLE_command>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d106      	bne.n	800030a <ble_init+0x8a>
		stackInitCompleteFlag|=0x02;
 80002fc:	4b58      	ldr	r3, [pc, #352]	@ (8000460 <ble_init+0x1e0>)
 80002fe:	881b      	ldrh	r3, [r3, #0]
 8000300:	f043 0302 	orr.w	r3, r3, #2
 8000304:	b29a      	uxth	r2, r3
 8000306:	4b56      	ldr	r3, [pc, #344]	@ (8000460 <ble_init+0x1e0>)
 8000308:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 800030a:	4b52      	ldr	r3, [pc, #328]	@ (8000454 <ble_init+0x1d4>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4618      	mov	r0, r3
 8000310:	f003 fa30 	bl	8003774 <free>
 
	 //INIT GAP, actually the handle that i get is a GATT handle of a service, will change the name later
	 if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 8000314:	2303      	movs	r3, #3
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	2307      	movs	r3, #7
 800031a:	4a54      	ldr	r2, [pc, #336]	@ (800046c <ble_init+0x1ec>)
 800031c:	2107      	movs	r1, #7
 800031e:	4854      	ldr	r0, [pc, #336]	@ (8000470 <ble_init+0x1f0>)
 8000320:	f000 fa88 	bl	8000834 <BLE_command>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d11b      	bne.n	8000362 <ble_init+0xe2>
		stackInitCompleteFlag|=0x04;
 800032a:	4b4d      	ldr	r3, [pc, #308]	@ (8000460 <ble_init+0x1e0>)
 800032c:	881b      	ldrh	r3, [r3, #0]
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	b29a      	uxth	r2, r3
 8000334:	4b4a      	ldr	r3, [pc, #296]	@ (8000460 <ble_init+0x1e0>)
 8000336:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 8000338:	4b46      	ldr	r3, [pc, #280]	@ (8000454 <ble_init+0x1d4>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	3307      	adds	r3, #7
 800033e:	881b      	ldrh	r3, [r3, #0]
 8000340:	b29a      	uxth	r2, r3
 8000342:	4b4c      	ldr	r3, [pc, #304]	@ (8000474 <ble_init+0x1f4>)
 8000344:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 8000346:	4b43      	ldr	r3, [pc, #268]	@ (8000454 <ble_init+0x1d4>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	3309      	adds	r3, #9
 800034c:	881b      	ldrh	r3, [r3, #0]
 800034e:	b29a      	uxth	r2, r3
 8000350:	4b49      	ldr	r3, [pc, #292]	@ (8000478 <ble_init+0x1f8>)
 8000352:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 8000354:	4b3f      	ldr	r3, [pc, #252]	@ (8000454 <ble_init+0x1d4>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	330b      	adds	r3, #11
 800035a:	881b      	ldrh	r3, [r3, #0]
 800035c:	b29a      	uxth	r2, r3
 800035e:	4b47      	ldr	r3, [pc, #284]	@ (800047c <ble_init+0x1fc>)
 8000360:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 8000362:	4b3c      	ldr	r3, [pc, #240]	@ (8000454 <ble_init+0x1d4>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4618      	mov	r0, r3
 8000368:	f003 fa04 	bl	8003774 <free>
 
	 //SET THE NAME OF THE BOARD IN THE SERVICE CREATED AUTOMATICALLY
	 updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 800036c:	4b44      	ldr	r3, [pc, #272]	@ (8000480 <ble_init+0x200>)
 800036e:	9300      	str	r3, [sp, #0]
 8000370:	2307      	movs	r3, #7
 8000372:	2200      	movs	r2, #0
 8000374:	4940      	ldr	r1, [pc, #256]	@ (8000478 <ble_init+0x1f8>)
 8000376:	483f      	ldr	r0, [pc, #252]	@ (8000474 <ble_init+0x1f4>)
 8000378:	f000 fb22 	bl	80009c0 <updateCharValue>
	 stackInitCompleteFlag|=0x08;
 800037c:	4b38      	ldr	r3, [pc, #224]	@ (8000460 <ble_init+0x1e0>)
 800037e:	881b      	ldrh	r3, [r3, #0]
 8000380:	f043 0308 	orr.w	r3, r3, #8
 8000384:	b29a      	uxth	r2, r3
 8000386:	4b36      	ldr	r3, [pc, #216]	@ (8000460 <ble_init+0x1e0>)
 8000388:	801a      	strh	r2, [r3, #0]
	 free(rxEvent);
 800038a:	4b32      	ldr	r3, [pc, #200]	@ (8000454 <ble_init+0x1d4>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4618      	mov	r0, r3
 8000390:	f003 f9f0 	bl	8003774 <free>
 
	 //INIT AUTH
	 if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 8000394:	2300      	movs	r3, #0
 8000396:	9300      	str	r3, [sp, #0]
 8000398:	2307      	movs	r3, #7
 800039a:	4a3a      	ldr	r2, [pc, #232]	@ (8000484 <ble_init+0x204>)
 800039c:	2110      	movs	r1, #16
 800039e:	483a      	ldr	r0, [pc, #232]	@ (8000488 <ble_init+0x208>)
 80003a0:	f000 fa48 	bl	8000834 <BLE_command>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d106      	bne.n	80003b8 <ble_init+0x138>
		stackInitCompleteFlag|=0x10;
 80003aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000460 <ble_init+0x1e0>)
 80003ac:	881b      	ldrh	r3, [r3, #0]
 80003ae:	f043 0310 	orr.w	r3, r3, #16
 80003b2:	b29a      	uxth	r2, r3
 80003b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000460 <ble_init+0x1e0>)
 80003b6:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 80003b8:	4b26      	ldr	r3, [pc, #152]	@ (8000454 <ble_init+0x1d4>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f003 f9d9 	bl	8003774 <free>
 
	 //SET_TX_LEVEL
	 if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 80003c2:	2300      	movs	r3, #0
 80003c4:	9300      	str	r3, [sp, #0]
 80003c6:	2307      	movs	r3, #7
 80003c8:	4a30      	ldr	r2, [pc, #192]	@ (800048c <ble_init+0x20c>)
 80003ca:	2106      	movs	r1, #6
 80003cc:	4830      	ldr	r0, [pc, #192]	@ (8000490 <ble_init+0x210>)
 80003ce:	f000 fa31 	bl	8000834 <BLE_command>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d106      	bne.n	80003e6 <ble_init+0x166>
		stackInitCompleteFlag|=0x20;
 80003d8:	4b21      	ldr	r3, [pc, #132]	@ (8000460 <ble_init+0x1e0>)
 80003da:	881b      	ldrh	r3, [r3, #0]
 80003dc:	f043 0320 	orr.w	r3, r3, #32
 80003e0:	b29a      	uxth	r2, r3
 80003e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000460 <ble_init+0x1e0>)
 80003e4:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 80003e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000454 <ble_init+0x1d4>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4618      	mov	r0, r3
 80003ec:	f003 f9c2 	bl	8003774 <free>
 
	 //SET SCAN RESPONSE DATA
	 if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 80003f0:	2300      	movs	r3, #0
 80003f2:	9300      	str	r3, [sp, #0]
 80003f4:	2307      	movs	r3, #7
 80003f6:	4a27      	ldr	r2, [pc, #156]	@ (8000494 <ble_init+0x214>)
 80003f8:	2124      	movs	r1, #36	@ 0x24
 80003fa:	4827      	ldr	r0, [pc, #156]	@ (8000498 <ble_init+0x218>)
 80003fc:	f000 fa1a 	bl	8000834 <BLE_command>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d106      	bne.n	8000414 <ble_init+0x194>
		stackInitCompleteFlag|=0x40;
 8000406:	4b16      	ldr	r3, [pc, #88]	@ (8000460 <ble_init+0x1e0>)
 8000408:	881b      	ldrh	r3, [r3, #0]
 800040a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800040e:	b29a      	uxth	r2, r3
 8000410:	4b13      	ldr	r3, [pc, #76]	@ (8000460 <ble_init+0x1e0>)
 8000412:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 8000414:	4b0f      	ldr	r3, [pc, #60]	@ (8000454 <ble_init+0x1d4>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4618      	mov	r0, r3
 800041a:	f003 f9ab 	bl	8003774 <free>
 
	 //This will start the advertisment,
	 setConnectable();
 800041e:	f000 f989 	bl	8000734 <setConnectable>
 
	 //add the nordic UART service
	 addService(UUID_NORDIC_UART_SERVICE,NORDIC_UART_SERVICE_HANDLE,SET_ATTRIBUTES(7)); //SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 8000422:	2207      	movs	r2, #7
 8000424:	491d      	ldr	r1, [pc, #116]	@ (800049c <ble_init+0x21c>)
 8000426:	481e      	ldr	r0, [pc, #120]	@ (80004a0 <ble_init+0x220>)
 8000428:	f000 fa50 	bl	80008cc <addService>
 
	 //add the nordic UART charachteristics
	 addCharacteristic(UUID_CHAR_READ,READ_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),NOTIFIBLE);
 800042c:	2310      	movs	r3, #16
 800042e:	9300      	str	r3, [sp, #0]
 8000430:	2314      	movs	r3, #20
 8000432:	4a1a      	ldr	r2, [pc, #104]	@ (800049c <ble_init+0x21c>)
 8000434:	491b      	ldr	r1, [pc, #108]	@ (80004a4 <ble_init+0x224>)
 8000436:	481c      	ldr	r0, [pc, #112]	@ (80004a8 <ble_init+0x228>)
 8000438:	f000 fa80 	bl	800093c <addCharacteristic>
	 addCharacteristic(UUID_CHAR_WRITE,WRITE_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),WRITABLE);
 800043c:	2304      	movs	r3, #4
 800043e:	9300      	str	r3, [sp, #0]
 8000440:	2314      	movs	r3, #20
 8000442:	4a16      	ldr	r2, [pc, #88]	@ (800049c <ble_init+0x21c>)
 8000444:	4919      	ldr	r1, [pc, #100]	@ (80004ac <ble_init+0x22c>)
 8000446:	481a      	ldr	r0, [pc, #104]	@ (80004b0 <ble_init+0x230>)
 8000448:	f000 fa78 	bl	800093c <addCharacteristic>
 
	 if(stackInitCompleteFlag==255){
	   //turn on led blue if everything was fine
	 //  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	 }
	 return;
 800044c:	bf00      	nop
 }
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	200002f4 	.word	0x200002f4
 8000458:	200002f8 	.word	0x200002f8
 800045c:	20000000 	.word	0x20000000
 8000460:	200002f2 	.word	0x200002f2
 8000464:	2000000c 	.word	0x2000000c
 8000468:	20000008 	.word	0x20000008
 800046c:	2000001c 	.word	0x2000001c
 8000470:	20000014 	.word	0x20000014
 8000474:	200001dc 	.word	0x200001dc
 8000478:	200001e0 	.word	0x200001e0
 800047c:	200001e4 	.word	0x200001e4
 8000480:	20000118 	.word	0x20000118
 8000484:	20000034 	.word	0x20000034
 8000488:	20000024 	.word	0x20000024
 800048c:	20000044 	.word	0x20000044
 8000490:	2000003c 	.word	0x2000003c
 8000494:	20000070 	.word	0x20000070
 8000498:	2000004c 	.word	0x2000004c
 800049c:	200002e8 	.word	0x200002e8
 80004a0:	20000120 	.word	0x20000120
 80004a4:	200002f0 	.word	0x200002f0
 80004a8:	20000140 	.word	0x20000140
 80004ac:	200002ec 	.word	0x200002ec
 80004b0:	20000130 	.word	0x20000130

080004b4 <fetchBleEvent>:
	  if(BLE_command(ACI_HAL_SET_STANDBY,sizeof(ACI_HAL_SET_STANDBY),ACI_HAL_SET_STANDBY_COMPLETE,sizeof(ACI_HAL_SET_STANDBY_COMPLETE),0)==BLE_OK){
	  }
	  free(rxEvent);
 }
 
 int fetchBleEvent(uint8_t *container, int size){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08c      	sub	sp, #48	@ 0x30
 80004b8:	af02      	add	r7, sp, #8
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	6039      	str	r1, [r7, #0]
 
   uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 80004be:	4a3d      	ldr	r2, [pc, #244]	@ (80005b4 <fetchBleEvent+0x100>)
 80004c0:	f107 0318 	add.w	r3, r7, #24
 80004c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004c8:	6018      	str	r0, [r3, #0]
 80004ca:	3304      	adds	r3, #4
 80004cc:	7019      	strb	r1, [r3, #0]
   uint8_t slave_header[5];
 
   //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
   if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80004ce:	2140      	movs	r1, #64	@ 0x40
 80004d0:	4839      	ldr	r0, [pc, #228]	@ (80005b8 <fetchBleEvent+0x104>)
 80004d2:	f001 fd29 	bl	8001f28 <HAL_GPIO_ReadPin>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d065      	beq.n	80005a8 <fetchBleEvent+0xf4>
 
   HAL_Delay(5);
 80004dc:	2005      	movs	r0, #5
 80004de:	f001 fa43 	bl	8001968 <HAL_Delay>
   //PIN_CS of SPI2 LOW
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004e8:	4834      	ldr	r0, [pc, #208]	@ (80005bc <fetchBleEvent+0x108>)
 80004ea:	f001 fd35 	bl	8001f58 <HAL_GPIO_WritePin>
 
   //SPI2 in this case, it could change according to the board
   //we send a byte containing a request of reading followed by 4 dummy bytes
   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 80004ee:	f107 0210 	add.w	r2, r7, #16
 80004f2:	f107 0118 	add.w	r1, r7, #24
 80004f6:	2301      	movs	r3, #1
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	2305      	movs	r3, #5
 80004fc:	4830      	ldr	r0, [pc, #192]	@ (80005c0 <fetchBleEvent+0x10c>)
 80004fe:	f002 fdab 	bl	8003058 <HAL_SPI_TransmitReceive>
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000502:	2201      	movs	r2, #1
 8000504:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000508:	482c      	ldr	r0, [pc, #176]	@ (80005bc <fetchBleEvent+0x108>)
 800050a:	f001 fd25 	bl	8001f58 <HAL_GPIO_WritePin>
   HAL_Delay(1);
 800050e:	2001      	movs	r0, #1
 8000510:	f001 fa2a 	bl	8001968 <HAL_Delay>
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800051a:	4828      	ldr	r0, [pc, #160]	@ (80005bc <fetchBleEvent+0x108>)
 800051c:	f001 fd1c 	bl	8001f58 <HAL_GPIO_WritePin>
 
   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000520:	f107 0210 	add.w	r2, r7, #16
 8000524:	f107 0118 	add.w	r1, r7, #24
 8000528:	2301      	movs	r3, #1
 800052a:	9300      	str	r3, [sp, #0]
 800052c:	2305      	movs	r3, #5
 800052e:	4824      	ldr	r0, [pc, #144]	@ (80005c0 <fetchBleEvent+0x10c>)
 8000530:	f002 fd92 	bl	8003058 <HAL_SPI_TransmitReceive>
 
   //let's get the size of data available
   int dataSize;
   dataSize=(slave_header[3]|slave_header[4]<<8);
 8000534:	7cfb      	ldrb	r3, [r7, #19]
 8000536:	461a      	mov	r2, r3
 8000538:	7d3b      	ldrb	r3, [r7, #20]
 800053a:	021b      	lsls	r3, r3, #8
 800053c:	4313      	orrs	r3, r2
 800053e:	627b      	str	r3, [r7, #36]	@ 0x24
   int i;
   char dummy=0xff;
 8000540:	23ff      	movs	r3, #255	@ 0xff
 8000542:	73fb      	strb	r3, [r7, #15]
 
   if(dataSize>size){
 8000544:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	429a      	cmp	r2, r3
 800054a:	dd01      	ble.n	8000550 <fetchBleEvent+0x9c>
	   dataSize=size;
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	627b      	str	r3, [r7, #36]	@ 0x24
   }
 
   if(dataSize>0){
 8000550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000552:	2b00      	cmp	r3, #0
 8000554:	dd1f      	ble.n	8000596 <fetchBleEvent+0xe2>
		 //let's fill the get the bytes availables and insert them into the container variable
		   for(i=0;i<dataSize;i++){
 8000556:	2300      	movs	r3, #0
 8000558:	623b      	str	r3, [r7, #32]
 800055a:	e00d      	b.n	8000578 <fetchBleEvent+0xc4>
		   HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 800055c:	6a3b      	ldr	r3, [r7, #32]
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	441a      	add	r2, r3
 8000562:	f107 010f 	add.w	r1, r7, #15
 8000566:	2301      	movs	r3, #1
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	2301      	movs	r3, #1
 800056c:	4814      	ldr	r0, [pc, #80]	@ (80005c0 <fetchBleEvent+0x10c>)
 800056e:	f002 fd73 	bl	8003058 <HAL_SPI_TransmitReceive>
		   for(i=0;i<dataSize;i++){
 8000572:	6a3b      	ldr	r3, [r7, #32]
 8000574:	3301      	adds	r3, #1
 8000576:	623b      	str	r3, [r7, #32]
 8000578:	6a3a      	ldr	r2, [r7, #32]
 800057a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800057c:	429a      	cmp	r2, r3
 800057e:	dbed      	blt.n	800055c <fetchBleEvent+0xa8>
 
		   }
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000580:	2201      	movs	r2, #1
 8000582:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000586:	480d      	ldr	r0, [pc, #52]	@ (80005bc <fetchBleEvent+0x108>)
 8000588:	f001 fce6 	bl	8001f58 <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
		 return -1;
	   }
 
   //let's stop the SPI2
   dataAvailable=0;
 800058c:	4b0d      	ldr	r3, [pc, #52]	@ (80005c4 <fetchBleEvent+0x110>)
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
   return BLE_OK;
 8000592:	2300      	movs	r3, #0
 8000594:	e00a      	b.n	80005ac <fetchBleEvent+0xf8>
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000596:	2201      	movs	r2, #1
 8000598:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800059c:	4807      	ldr	r0, [pc, #28]	@ (80005bc <fetchBleEvent+0x108>)
 800059e:	f001 fcdb 	bl	8001f58 <HAL_GPIO_WritePin>
		 return -1;
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005a6:	e001      	b.n	80005ac <fetchBleEvent+0xf8>
   }else{
   return -2;
 80005a8:	f06f 0301 	mvn.w	r3, #1
   }
 }
 80005ac:	4618      	mov	r0, r3
 80005ae:	3728      	adds	r7, #40	@ 0x28
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	080047bc 	.word	0x080047bc
 80005b8:	48001000 	.word	0x48001000
 80005bc:	48000c00 	.word	0x48000c00
 80005c0:	200002fc 	.word	0x200002fc
 80005c4:	200002f8 	.word	0x200002f8

080005c8 <checkEventResp>:
 
 
 int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 80005c8:	b480      	push	{r7}
 80005ca:	b087      	sub	sp, #28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
	 int j=0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
 
	 for(j=0;j<size;j++){
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	e00f      	b.n	80005fe <checkEventResp+0x36>
 
		 if(event[j]!=reference[j]){
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	68fa      	ldr	r2, [r7, #12]
 80005e2:	4413      	add	r3, r2
 80005e4:	781a      	ldrb	r2, [r3, #0]
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	68b9      	ldr	r1, [r7, #8]
 80005ea:	440b      	add	r3, r1
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d002      	beq.n	80005f8 <checkEventResp+0x30>
			 return -1;
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005f6:	e007      	b.n	8000608 <checkEventResp+0x40>
	 for(j=0;j<size;j++){
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	3301      	adds	r3, #1
 80005fc:	617b      	str	r3, [r7, #20]
 80005fe:	697a      	ldr	r2, [r7, #20]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	429a      	cmp	r2, r3
 8000604:	dbeb      	blt.n	80005de <checkEventResp+0x16>
		 }
	 }
 
 return BLE_OK;
 8000606:	2300      	movs	r3, #0
 }
 8000608:	4618      	mov	r0, r3
 800060a:	371c      	adds	r7, #28
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <sendCommand>:
 
 void sendCommand(uint8_t *command,int size){
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	@ 0x28
 8000618:	af02      	add	r7, sp, #8
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]
 
	   uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 800061e:	4a1f      	ldr	r2, [pc, #124]	@ (800069c <sendCommand+0x88>)
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000628:	6018      	str	r0, [r3, #0]
 800062a:	3304      	adds	r3, #4
 800062c:	7019      	strb	r1, [r3, #0]
	   uint8_t slave_header[5];
 
	   int result;
 
	 do{
	   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 800062e:	2200      	movs	r2, #0
 8000630:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000634:	481a      	ldr	r0, [pc, #104]	@ (80006a0 <sendCommand+0x8c>)
 8000636:	f001 fc8f 	bl	8001f58 <HAL_GPIO_WritePin>
 
	   //wait until it is possible to write
	   //while(!dataAvailable);
	   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 800063a:	f107 0208 	add.w	r2, r7, #8
 800063e:	f107 0110 	add.w	r1, r7, #16
 8000642:	2301      	movs	r3, #1
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2305      	movs	r3, #5
 8000648:	4816      	ldr	r0, [pc, #88]	@ (80006a4 <sendCommand+0x90>)
 800064a:	f002 fd05 	bl	8003058 <HAL_SPI_TransmitReceive>
	   int bufferSize=(slave_header[2]<<8|slave_header[1]);
 800064e:	7abb      	ldrb	r3, [r7, #10]
 8000650:	021b      	lsls	r3, r3, #8
 8000652:	7a7a      	ldrb	r2, [r7, #9]
 8000654:	4313      	orrs	r3, r2
 8000656:	61bb      	str	r3, [r7, #24]
	   if(bufferSize>=size){
 8000658:	69ba      	ldr	r2, [r7, #24]
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	429a      	cmp	r2, r3
 800065e:	db09      	blt.n	8000674 <sendCommand+0x60>
		 HAL_SPI_Transmit(&hspi3,command,size,1);
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	b29a      	uxth	r2, r3
 8000664:	2301      	movs	r3, #1
 8000666:	6879      	ldr	r1, [r7, #4]
 8000668:	480e      	ldr	r0, [pc, #56]	@ (80006a4 <sendCommand+0x90>)
 800066a:	f002 fb80 	bl	8002d6e <HAL_SPI_Transmit>
		 result=0;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]
 8000672:	e002      	b.n	800067a <sendCommand+0x66>
	   }else{
		 result=-1;
 8000674:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000678:	61fb      	str	r3, [r7, #28]
	   }
	   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 800067a:	2201      	movs	r2, #1
 800067c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000680:	4807      	ldr	r0, [pc, #28]	@ (80006a0 <sendCommand+0x8c>)
 8000682:	f001 fc69 	bl	8001f58 <HAL_GPIO_WritePin>
	   dataAvailable=0;
 8000686:	4b08      	ldr	r3, [pc, #32]	@ (80006a8 <sendCommand+0x94>)
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
	 }while(result!=0);
 800068c:	69fb      	ldr	r3, [r7, #28]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1cd      	bne.n	800062e <sendCommand+0x1a>
 
 }
 8000692:	bf00      	nop
 8000694:	bf00      	nop
 8000696:	3720      	adds	r7, #32
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	080047c4 	.word	0x080047c4
 80006a0:	48000c00 	.word	0x48000c00
 80006a4:	200002fc 	.word	0x200002fc
 80006a8:	200002f8 	.word	0x200002f8

080006ac <catchBLE>:
 
 void catchBLE(uint8_t * byte1, uint8_t * byte2){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
	 int result=fetchBleEvent(buffer,127);
 80006b6:	217f      	movs	r1, #127	@ 0x7f
 80006b8:	4819      	ldr	r0, [pc, #100]	@ (8000720 <catchBLE+0x74>)
 80006ba:	f7ff fefb 	bl	80004b4 <fetchBleEvent>
 80006be:	60f8      	str	r0, [r7, #12]
	 if(result==BLE_OK){
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d128      	bne.n	8000718 <catchBLE+0x6c>
		 if(checkEventResp(buffer,EVENT_DISCONNECTED,3)==BLE_OK){
 80006c6:	2203      	movs	r2, #3
 80006c8:	4916      	ldr	r1, [pc, #88]	@ (8000724 <catchBLE+0x78>)
 80006ca:	4815      	ldr	r0, [pc, #84]	@ (8000720 <catchBLE+0x74>)
 80006cc:	f7ff ff7c 	bl	80005c8 <checkEventResp>
			 //setConnectable();
		 }
		 if(checkEventResp(buffer, EVENT_CONNECTED, 5)==BLE_OK){
 80006d0:	2205      	movs	r2, #5
 80006d2:	4915      	ldr	r1, [pc, #84]	@ (8000728 <catchBLE+0x7c>)
 80006d4:	4812      	ldr	r0, [pc, #72]	@ (8000720 <catchBLE+0x74>)
 80006d6:	f7ff ff77 	bl	80005c8 <checkEventResp>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d109      	bne.n	80006f4 <catchBLE+0x48>
			 // Little Endian Format
			 *(connectionHandler) = buffer[5];
 80006e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <catchBLE+0x74>)
 80006e2:	795b      	ldrb	r3, [r3, #5]
 80006e4:	b21a      	sxth	r2, r3
 80006e6:	4b11      	ldr	r3, [pc, #68]	@ (800072c <catchBLE+0x80>)
 80006e8:	801a      	strh	r2, [r3, #0]
			 *(connectionHandler + 1) = buffer[6];
 80006ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000720 <catchBLE+0x74>)
 80006ec:	799b      	ldrb	r3, [r3, #6]
 80006ee:	b21a      	sxth	r2, r3
 80006f0:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <catchBLE+0x80>)
 80006f2:	805a      	strh	r2, [r3, #2]
		 }
		 if (checkEventResp(buffer, EVENT_GATT_CHANGED, 5) == BLE_OK){
 80006f4:	2205      	movs	r2, #5
 80006f6:	490e      	ldr	r1, [pc, #56]	@ (8000730 <catchBLE+0x84>)
 80006f8:	4809      	ldr	r0, [pc, #36]	@ (8000720 <catchBLE+0x74>)
 80006fa:	f7ff ff65 	bl	80005c8 <checkEventResp>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d109      	bne.n	8000718 <catchBLE+0x6c>
			 *(connectionHandler) = buffer[5];
 8000704:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <catchBLE+0x74>)
 8000706:	795b      	ldrb	r3, [r3, #5]
 8000708:	b21a      	sxth	r2, r3
 800070a:	4b08      	ldr	r3, [pc, #32]	@ (800072c <catchBLE+0x80>)
 800070c:	801a      	strh	r2, [r3, #0]
			 *(connectionHandler + 1) = buffer[6];
 800070e:	4b04      	ldr	r3, [pc, #16]	@ (8000720 <catchBLE+0x74>)
 8000710:	799b      	ldrb	r3, [r3, #6]
 8000712:	b21a      	sxth	r2, r3
 8000714:	4b05      	ldr	r3, [pc, #20]	@ (800072c <catchBLE+0x80>)
 8000716:	805a      	strh	r2, [r3, #2]
		 }
	 }else{
		 //something bad is happening if I am here
	 }
 }
 8000718:	bf00      	nop
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	200001e8 	.word	0x200001e8
 8000724:	200000f0 	.word	0x200000f0
 8000728:	200000fc 	.word	0x200000fc
 800072c:	20000150 	.word	0x20000150
 8000730:	20000104 	.word	0x20000104

08000734 <setConnectable>:
 
 void setConnectable(){
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 		uint8_t* rxEvent;
 		//Start advertising
 		uint8_t *localname;
 		int res;
 		localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 800073a:	200c      	movs	r0, #12
 800073c:	f003 f812 	bl	8003764 <malloc>
 8000740:	4603      	mov	r3, r0
 8000742:	60fb      	str	r3, [r7, #12]
 		memcpy(localname,deviceName,sizeof(deviceName));
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	4a37      	ldr	r2, [pc, #220]	@ (8000824 <setConnectable+0xf0>)
 8000748:	6810      	ldr	r0, [r2, #0]
 800074a:	6018      	str	r0, [r3, #0]
 800074c:	8891      	ldrh	r1, [r2, #4]
 800074e:	7992      	ldrb	r2, [r2, #6]
 8000750:	8099      	strh	r1, [r3, #4]
 8000752:	719a      	strb	r2, [r3, #6]
 		localname[sizeof(deviceName)+1]=0x00;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	3308      	adds	r3, #8
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
 		localname[sizeof(deviceName)+2]=0x00;
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	3309      	adds	r3, #9
 8000760:	2200      	movs	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
 		localname[sizeof(deviceName)+3]=0x00;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	330a      	adds	r3, #10
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]
 		localname[sizeof(deviceName)+4]=0x00;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	330b      	adds	r3, #11
 8000770:	2200      	movs	r2, #0
 8000772:	701a      	strb	r2, [r3, #0]
 		localname[sizeof(deviceName)]=0x00;
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	3307      	adds	r3, #7
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]


 		ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 800077c:	4b2a      	ldr	r3, [pc, #168]	@ (8000828 <setConnectable+0xf4>)
 800077e:	2208      	movs	r2, #8
 8000780:	72da      	strb	r2, [r3, #11]
 		ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 8000782:	4b29      	ldr	r3, [pc, #164]	@ (8000828 <setConnectable+0xf4>)
 8000784:	2215      	movs	r2, #21
 8000786:	70da      	strb	r2, [r3, #3]

 		uint8_t *discoverableCommand;
 		discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 8000788:	2019      	movs	r0, #25
 800078a:	f002 ffeb 	bl	8003764 <malloc>
 800078e:	4603      	mov	r3, r0
 8000790:	60bb      	str	r3, [r7, #8]
 		memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	4a24      	ldr	r2, [pc, #144]	@ (8000828 <setConnectable+0xf4>)
 8000796:	461c      	mov	r4, r3
 8000798:	4613      	mov	r3, r2
 800079a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800079c:	6020      	str	r0, [r4, #0]
 800079e:	6061      	str	r1, [r4, #4]
 80007a0:	60a2      	str	r2, [r4, #8]
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	7323      	strb	r3, [r4, #12]
 		memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	330d      	adds	r3, #13
 80007aa:	220c      	movs	r2, #12
 80007ac:	68f9      	ldr	r1, [r7, #12]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f003 fa1b 	bl	8003bea <memcpy>

 		// remove existing buffer content
 		rxEvent=(uint8_t*)malloc(7);
 80007b4:	2007      	movs	r0, #7
 80007b6:	f002 ffd5 	bl	8003764 <malloc>
 80007ba:	4603      	mov	r3, r0
 80007bc:	607b      	str	r3, [r7, #4]
 		res=fetchBleEvent(rxEvent,7);
 80007be:	2107      	movs	r1, #7
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff fe77 	bl	80004b4 <fetchBleEvent>
 80007c6:	6038      	str	r0, [r7, #0]

 		// send the command to make the peripheral discoverable
 		sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 80007c8:	2119      	movs	r1, #25
 80007ca:	68b8      	ldr	r0, [r7, #8]
 80007cc:	f7ff ff22 	bl	8000614 <sendCommand>
 		HAL_Delay(100);
 80007d0:	2064      	movs	r0, #100	@ 0x64
 80007d2:	f001 f8c9 	bl	8001968 <HAL_Delay>
 		res=fetchBleEvent(rxEvent,7);
 80007d6:	2107      	movs	r1, #7
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff fe6b 	bl	80004b4 <fetchBleEvent>
 80007de:	6038      	str	r0, [r7, #0]
 		if(res==BLE_OK){
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d10e      	bne.n	8000804 <setConnectable+0xd0>
 		   if(checkEventResp(rxEvent, ACI_GAP_SET_DISCOVERABLE_COMPLETE, 7)==BLE_OK){
 80007e6:	2207      	movs	r2, #7
 80007e8:	4910      	ldr	r1, [pc, #64]	@ (800082c <setConnectable+0xf8>)
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f7ff feec 	bl	80005c8 <checkEventResp>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d106      	bne.n	8000804 <setConnectable+0xd0>
 			  stackInitCompleteFlag|=0x80;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <setConnectable+0xfc>)
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007fe:	b29a      	uxth	r2, r3
 8000800:	4b0b      	ldr	r3, [pc, #44]	@ (8000830 <setConnectable+0xfc>)
 8000802:	801a      	strh	r2, [r3, #0]
 		   }
 		}
 		free(rxEvent);
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f002 ffb5 	bl	8003774 <free>
 		free(discoverableCommand);
 800080a:	68b8      	ldr	r0, [r7, #8]
 800080c:	f002 ffb2 	bl	8003774 <free>
 		free(localname);
 8000810:	68f8      	ldr	r0, [r7, #12]
 8000812:	f002 ffaf 	bl	8003774 <free>
 		HAL_Delay(10);
 8000816:	200a      	movs	r0, #10
 8000818:	f001 f8a6 	bl	8001968 <HAL_Delay>
  }
 800081c:	bf00      	nop
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	bd90      	pop	{r4, r7, pc}
 8000824:	20000118 	.word	0x20000118
 8000828:	20000078 	.word	0x20000078
 800082c:	20000088 	.word	0x20000088
 8000830:	200002f2 	.word	0x200002f2

08000834 <BLE_command>:
  * @param sizeRes Expected size of the response result.
  * @param returnHandles Number of handles expected in the response (each handle occupies 2 bytes).
  * @return int Returns BLE_OK if the command was successfully executed and the event response is valid,
  *             or an error code if something went wrong.
  */
 int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	607a      	str	r2, [r7, #4]
 8000840:	603b      	str	r3, [r7, #0]
		int response;
 
		sendCommand(command,size);
 8000842:	68b9      	ldr	r1, [r7, #8]
 8000844:	68f8      	ldr	r0, [r7, #12]
 8000846:	f7ff fee5 	bl	8000614 <sendCommand>
		rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 800084a:	6a3b      	ldr	r3, [r7, #32]
 800084c:	005a      	lsls	r2, r3, #1
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	4413      	add	r3, r2
 8000852:	4618      	mov	r0, r3
 8000854:	f002 ff86 	bl	8003764 <malloc>
 8000858:	4603      	mov	r3, r0
 800085a:	461a      	mov	r2, r3
 800085c:	4b19      	ldr	r3, [pc, #100]	@ (80008c4 <BLE_command+0x90>)
 800085e:	601a      	str	r2, [r3, #0]
 
		long contatore=0;
 8000860:	2300      	movs	r3, #0
 8000862:	613b      	str	r3, [r7, #16]
		while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000864:	e007      	b.n	8000876 <BLE_command+0x42>
			contatore++;
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	3301      	adds	r3, #1
 800086a:	613b      	str	r3, [r7, #16]
			if(contatore>30000){
 800086c:	693b      	ldr	r3, [r7, #16]
 800086e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000872:	4293      	cmp	r3, r2
 8000874:	dc07      	bgt.n	8000886 <BLE_command+0x52>
		while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000876:	2140      	movs	r1, #64	@ 0x40
 8000878:	4813      	ldr	r0, [pc, #76]	@ (80008c8 <BLE_command+0x94>)
 800087a:	f001 fb55 	bl	8001f28 <HAL_GPIO_ReadPin>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d0f0      	beq.n	8000866 <BLE_command+0x32>
 8000884:	e000      	b.n	8000888 <BLE_command+0x54>
				break;
 8000886:	bf00      	nop
			}
		}
 
 
		response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 8000888:	4b0e      	ldr	r3, [pc, #56]	@ (80008c4 <BLE_command+0x90>)
 800088a:	6818      	ldr	r0, [r3, #0]
 800088c:	6a3b      	ldr	r3, [r7, #32]
 800088e:	005a      	lsls	r2, r3, #1
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	4413      	add	r3, r2
 8000894:	4619      	mov	r1, r3
 8000896:	f7ff fe0d 	bl	80004b4 <fetchBleEvent>
 800089a:	6178      	str	r0, [r7, #20]
		if(response==BLE_OK){
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d107      	bne.n	80008b2 <BLE_command+0x7e>
			response=checkEventResp(rxEvent,result,sizeRes);
 80008a2:	4b08      	ldr	r3, [pc, #32]	@ (80008c4 <BLE_command+0x90>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	683a      	ldr	r2, [r7, #0]
 80008a8:	6879      	ldr	r1, [r7, #4]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff fe8c 	bl	80005c8 <checkEventResp>
 80008b0:	6178      	str	r0, [r7, #20]
		}
		HAL_Delay(10);
 80008b2:	200a      	movs	r0, #10
 80008b4:	f001 f858 	bl	8001968 <HAL_Delay>
 
 
	 return response;
 80008b8:	697b      	ldr	r3, [r7, #20]
 }
 80008ba:	4618      	mov	r0, r3
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200002f4 	.word	0x200002f4
 80008c8:	48001000 	.word	0x48001000

080008cc <addService>:
 
 void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af02      	add	r7, sp, #8
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
 
 
	 //memcpy
	 memcpy(ADD_PRIMARY_SERVICE+5,UUID,16);
 80008d8:	4b14      	ldr	r3, [pc, #80]	@ (800092c <addService+0x60>)
 80008da:	2210      	movs	r2, #16
 80008dc:	68f9      	ldr	r1, [r7, #12]
 80008de:	4618      	mov	r0, r3
 80008e0:	f003 f983 	bl	8003bea <memcpy>
	 ADD_PRIMARY_SERVICE[22]=attributes;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <addService+0x64>)
 80008ea:	759a      	strb	r2, [r3, #22]
		if(BLE_command(ADD_PRIMARY_SERVICE,sizeof(ADD_PRIMARY_SERVICE),ADD_PRIMARY_SERVICE_COMPLETE,sizeof(ADD_PRIMARY_SERVICE_COMPLETE),1)==BLE_OK){
 80008ec:	2301      	movs	r3, #1
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	2307      	movs	r3, #7
 80008f2:	4a10      	ldr	r2, [pc, #64]	@ (8000934 <addService+0x68>)
 80008f4:	2117      	movs	r1, #23
 80008f6:	480e      	ldr	r0, [pc, #56]	@ (8000930 <addService+0x64>)
 80008f8:	f7ff ff9c 	bl	8000834 <BLE_command>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d10a      	bne.n	8000918 <addService+0x4c>
			handle[0]=rxEvent[7];
 8000902:	4b0d      	ldr	r3, [pc, #52]	@ (8000938 <addService+0x6c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	79da      	ldrb	r2, [r3, #7]
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	701a      	strb	r2, [r3, #0]
			handle[1]=rxEvent[8];
 800090c:	4b0a      	ldr	r3, [pc, #40]	@ (8000938 <addService+0x6c>)
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	3301      	adds	r3, #1
 8000914:	7a12      	ldrb	r2, [r2, #8]
 8000916:	701a      	strb	r2, [r3, #0]
		 }
		free(rxEvent);
 8000918:	4b07      	ldr	r3, [pc, #28]	@ (8000938 <addService+0x6c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4618      	mov	r0, r3
 800091e:	f002 ff29 	bl	8003774 <free>
 }
 8000922:	bf00      	nop
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000095 	.word	0x20000095
 8000930:	20000090 	.word	0x20000090
 8000934:	200000a8 	.word	0x200000a8
 8000938:	200002f4 	.word	0x200002f4

0800093c <addCharacteristic>:
 
 void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af02      	add	r7, sp, #8
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
 8000948:	70fb      	strb	r3, [r7, #3]
	 memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 800094a:	4b19      	ldr	r3, [pc, #100]	@ (80009b0 <addCharacteristic+0x74>)
 800094c:	2210      	movs	r2, #16
 800094e:	68f9      	ldr	r1, [r7, #12]
 8000950:	4618      	mov	r0, r3
 8000952:	f003 f94a 	bl	8003bea <memcpy>
 
	 ADD_CUSTOM_CHAR[4]= handleService[0];
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	781a      	ldrb	r2, [r3, #0]
 800095a:	4b16      	ldr	r3, [pc, #88]	@ (80009b4 <addCharacteristic+0x78>)
 800095c:	711a      	strb	r2, [r3, #4]
	 ADD_CUSTOM_CHAR[5]= handleService[1];
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	785a      	ldrb	r2, [r3, #1]
 8000962:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <addCharacteristic+0x78>)
 8000964:	715a      	strb	r2, [r3, #5]
	 ADD_CUSTOM_CHAR[23]= maxsize;
 8000966:	4a13      	ldr	r2, [pc, #76]	@ (80009b4 <addCharacteristic+0x78>)
 8000968:	78fb      	ldrb	r3, [r7, #3]
 800096a:	75d3      	strb	r3, [r2, #23]
	 ADD_CUSTOM_CHAR[25]= proprieties;
 800096c:	4a11      	ldr	r2, [pc, #68]	@ (80009b4 <addCharacteristic+0x78>)
 800096e:	7e3b      	ldrb	r3, [r7, #24]
 8000970:	7653      	strb	r3, [r2, #25]
	 if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 8000972:	2301      	movs	r3, #1
 8000974:	9300      	str	r3, [sp, #0]
 8000976:	2307      	movs	r3, #7
 8000978:	4a0f      	ldr	r2, [pc, #60]	@ (80009b8 <addCharacteristic+0x7c>)
 800097a:	211e      	movs	r1, #30
 800097c:	480d      	ldr	r0, [pc, #52]	@ (80009b4 <addCharacteristic+0x78>)
 800097e:	f7ff ff59 	bl	8000834 <BLE_command>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d10a      	bne.n	800099e <addCharacteristic+0x62>
		 handleChar[0]=rxEvent[7];
 8000988:	4b0c      	ldr	r3, [pc, #48]	@ (80009bc <addCharacteristic+0x80>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	79da      	ldrb	r2, [r3, #7]
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	701a      	strb	r2, [r3, #0]
		 handleChar[1]=rxEvent[8];
 8000992:	4b0a      	ldr	r3, [pc, #40]	@ (80009bc <addCharacteristic+0x80>)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	3301      	adds	r3, #1
 800099a:	7a12      	ldrb	r2, [r2, #8]
 800099c:	701a      	strb	r2, [r3, #0]
	 }
	 free(rxEvent);
 800099e:	4b07      	ldr	r3, [pc, #28]	@ (80009bc <addCharacteristic+0x80>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f002 fee6 	bl	8003774 <free>
 }
 80009a8:	bf00      	nop
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	200000b7 	.word	0x200000b7
 80009b4:	200000b0 	.word	0x200000b0
 80009b8:	200000d0 	.word	0x200000d0
 80009bc:	200002f4 	.word	0x200002f4

080009c0 <updateCharValue>:
 
 void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af02      	add	r7, sp, #8
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
 80009cc:	603b      	str	r3, [r7, #0]
	 UPDATE_CHAR[3]=size+6;
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	3306      	adds	r3, #6
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4b21      	ldr	r3, [pc, #132]	@ (8000a5c <updateCharValue+0x9c>)
 80009d8:	70da      	strb	r2, [r3, #3]
	 UPDATE_CHAR[4]=handleService[0];
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	781a      	ldrb	r2, [r3, #0]
 80009de:	4b1f      	ldr	r3, [pc, #124]	@ (8000a5c <updateCharValue+0x9c>)
 80009e0:	711a      	strb	r2, [r3, #4]
	 UPDATE_CHAR[5]=handleService[1];
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	785a      	ldrb	r2, [r3, #1]
 80009e6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a5c <updateCharValue+0x9c>)
 80009e8:	715a      	strb	r2, [r3, #5]
	 UPDATE_CHAR[6]=handleChar[0];
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	781a      	ldrb	r2, [r3, #0]
 80009ee:	4b1b      	ldr	r3, [pc, #108]	@ (8000a5c <updateCharValue+0x9c>)
 80009f0:	719a      	strb	r2, [r3, #6]
	 UPDATE_CHAR[7]=handleChar[1];
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	785a      	ldrb	r2, [r3, #1]
 80009f6:	4b19      	ldr	r3, [pc, #100]	@ (8000a5c <updateCharValue+0x9c>)
 80009f8:	71da      	strb	r2, [r3, #7]
	 UPDATE_CHAR[8]=offset;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	b2da      	uxtb	r2, r3
 80009fe:	4b17      	ldr	r3, [pc, #92]	@ (8000a5c <updateCharValue+0x9c>)
 8000a00:	721a      	strb	r2, [r3, #8]
	 UPDATE_CHAR[9]=size;
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	4b15      	ldr	r3, [pc, #84]	@ (8000a5c <updateCharValue+0x9c>)
 8000a08:	725a      	strb	r2, [r3, #9]
 
	 uint8_t* commandComplete;
	 commandComplete=(uint8_t*)malloc(10+size);
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	330a      	adds	r3, #10
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f002 fea8 	bl	8003764 <malloc>
 8000a14:	4603      	mov	r3, r0
 8000a16:	617b      	str	r3, [r7, #20]
	 memcpy(commandComplete,UPDATE_CHAR,10);
 8000a18:	220a      	movs	r2, #10
 8000a1a:	4910      	ldr	r1, [pc, #64]	@ (8000a5c <updateCharValue+0x9c>)
 8000a1c:	6978      	ldr	r0, [r7, #20]
 8000a1e:	f003 f8e4 	bl	8003bea <memcpy>
	 memcpy(commandComplete+10,data,size);
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	330a      	adds	r3, #10
 8000a26:	683a      	ldr	r2, [r7, #0]
 8000a28:	6a39      	ldr	r1, [r7, #32]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f003 f8dd 	bl	8003bea <memcpy>
 
	 BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	f103 010a 	add.w	r1, r3, #10
 8000a36:	2300      	movs	r3, #0
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	2307      	movs	r3, #7
 8000a3c:	4a08      	ldr	r2, [pc, #32]	@ (8000a60 <updateCharValue+0xa0>)
 8000a3e:	6978      	ldr	r0, [r7, #20]
 8000a40:	f7ff fef8 	bl	8000834 <BLE_command>
 
	 free(commandComplete);
 8000a44:	6978      	ldr	r0, [r7, #20]
 8000a46:	f002 fe95 	bl	8003774 <free>
	 free(rxEvent);
 8000a4a:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <updateCharValue+0xa4>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f002 fe90 	bl	8003774 <free>
 }
 8000a54:	bf00      	nop
 8000a56:	3718      	adds	r7, #24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	200000d8 	.word	0x200000d8
 8000a60:	200000d0 	.word	0x200000d0
 8000a64:	200002f4 	.word	0x200002f4

08000a68 <disconnectBLE>:
 
 /** 
  * @brief Disconnects the peripheral from the central
 */
 void disconnectBLE(){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af02      	add	r7, sp, #8
	 if (connectionHandler[0] == -1 && connectionHandler[1] == -1){
 8000a6e:	4b24      	ldr	r3, [pc, #144]	@ (8000b00 <disconnectBLE+0x98>)
 8000a70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000a78:	d105      	bne.n	8000a86 <disconnectBLE+0x1e>
 8000a7a:	4b21      	ldr	r3, [pc, #132]	@ (8000b00 <disconnectBLE+0x98>)
 8000a7c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000a84:	d037      	beq.n	8000af6 <disconnectBLE+0x8e>
		// should not be -1
		return;
	 }
	 uint8_t command[7];
	 memcpy(command, DISCONNECT, 4);
 8000a86:	4b1f      	ldr	r3, [pc, #124]	@ (8000b04 <disconnectBLE+0x9c>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	607b      	str	r3, [r7, #4]
	 command[4] = connectionHandler[0];
 8000a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000b00 <disconnectBLE+0x98>)
 8000a8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	723b      	strb	r3, [r7, #8]
	 command[5] = connectionHandler[1];
 8000a96:	4b1a      	ldr	r3, [pc, #104]	@ (8000b00 <disconnectBLE+0x98>)
 8000a98:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	727b      	strb	r3, [r7, #9]
	 command[6] = 0x13;
 8000aa0:	2313      	movs	r3, #19
 8000aa2:	72bb      	strb	r3, [r7, #10]
	 if(BLE_command(command,sizeof(command),EVENT_DISCONNECT_PENDING,7,0)==BLE_OK){
 8000aa4:	1d38      	adds	r0, r7, #4
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	9300      	str	r3, [sp, #0]
 8000aaa:	2307      	movs	r3, #7
 8000aac:	4a16      	ldr	r2, [pc, #88]	@ (8000b08 <disconnectBLE+0xa0>)
 8000aae:	2107      	movs	r1, #7
 8000ab0:	f7ff fec0 	bl	8000834 <BLE_command>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d11e      	bne.n	8000af8 <disconnectBLE+0x90>
		 int result=fetchBleEvent(buffer,127);
 8000aba:	217f      	movs	r1, #127	@ 0x7f
 8000abc:	4813      	ldr	r0, [pc, #76]	@ (8000b0c <disconnectBLE+0xa4>)
 8000abe:	f7ff fcf9 	bl	80004b4 <fetchBleEvent>
 8000ac2:	60f8      	str	r0, [r7, #12]
		 if(result==BLE_OK){
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d10f      	bne.n	8000aea <disconnectBLE+0x82>
			  if(checkEventResp(buffer,EVENT_DISCONNECTED,4)==BLE_OK){
 8000aca:	2204      	movs	r2, #4
 8000acc:	4910      	ldr	r1, [pc, #64]	@ (8000b10 <disconnectBLE+0xa8>)
 8000ace:	480f      	ldr	r0, [pc, #60]	@ (8000b0c <disconnectBLE+0xa4>)
 8000ad0:	f7ff fd7a 	bl	80005c8 <checkEventResp>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d107      	bne.n	8000aea <disconnectBLE+0x82>
				  //setConnectable();
				  connectionHandler[0] = -1;
 8000ada:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <disconnectBLE+0x98>)
 8000adc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ae0:	801a      	strh	r2, [r3, #0]
				  connectionHandler[1] = -1;
 8000ae2:	4b07      	ldr	r3, [pc, #28]	@ (8000b00 <disconnectBLE+0x98>)
 8000ae4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ae8:	805a      	strh	r2, [r3, #2]
			  }
		 }
	 free(rxEvent);
 8000aea:	4b0a      	ldr	r3, [pc, #40]	@ (8000b14 <disconnectBLE+0xac>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f002 fe40 	bl	8003774 <free>
 8000af4:	e000      	b.n	8000af8 <disconnectBLE+0x90>
		return;
 8000af6:	bf00      	nop
	 }
 }
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000150 	.word	0x20000150
 8000b04:	200000e8 	.word	0x200000e8
 8000b08:	200000f4 	.word	0x200000f4
 8000b0c:	200001e8 	.word	0x200001e8
 8000b10:	200000f0 	.word	0x200000f0
 8000b14:	200002f4 	.word	0x200002f4

08000b18 <setDiscoverability>:
 /**
  * DO NOT CHANGE FUNCTION definition
  * @brief Sets the discoverability of the peripheral
  * @param mode 0 => Non Discoverable, 1 => Discoverable
  * */
 void setDiscoverability(uint8_t mode){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af02      	add	r7, sp, #8
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
	 if (mode == 1){
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d102      	bne.n	8000b2e <setDiscoverability+0x16>
		 setConnectable();
 8000b28:	f7ff fe04 	bl	8000734 <setConnectable>
		 free(rxEvent);
	 }
	 else{
		 // Do nothing
	 }
 }
 8000b2c:	e00f      	b.n	8000b4e <setDiscoverability+0x36>
	 else if (mode == 0){
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d10c      	bne.n	8000b4e <setDiscoverability+0x36>
		 if(BLE_command(ACI_GAP_SET_NON_DISCOVERABLE,sizeof(ACI_GAP_SET_NON_DISCOVERABLE),ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE,sizeof(ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE),0)==BLE_OK){
 8000b34:	2300      	movs	r3, #0
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	2307      	movs	r3, #7
 8000b3a:	4a07      	ldr	r2, [pc, #28]	@ (8000b58 <setDiscoverability+0x40>)
 8000b3c:	2104      	movs	r1, #4
 8000b3e:	4807      	ldr	r0, [pc, #28]	@ (8000b5c <setDiscoverability+0x44>)
 8000b40:	f7ff fe78 	bl	8000834 <BLE_command>
		 free(rxEvent);
 8000b44:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <setDiscoverability+0x48>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f002 fe13 	bl	8003774 <free>
 }
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000110 	.word	0x20000110
 8000b5c:	2000010c 	.word	0x2000010c
 8000b60:	200002f4 	.word	0x200002f4

08000b64 <i2c_init>:
 *      Author: Dionisio
 */

#include <i2c.h>

void i2c_init(){
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
	// Enable I2C Clock
	RCC->APB1ENR1 |= RCC_APB1ENR1_I2C2EN;
 8000b68:	4b39      	ldr	r3, [pc, #228]	@ (8000c50 <i2c_init+0xec>)
 8000b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b6c:	4a38      	ldr	r2, [pc, #224]	@ (8000c50 <i2c_init+0xec>)
 8000b6e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b72:	6593      	str	r3, [r2, #88]	@ 0x58
	//Enable Clock for GPIO B
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000b74:	4b36      	ldr	r3, [pc, #216]	@ (8000c50 <i2c_init+0xec>)
 8000b76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b78:	4a35      	ldr	r2, [pc, #212]	@ (8000c50 <i2c_init+0xec>)
 8000b7a:	f043 0302 	orr.w	r3, r3, #2
 8000b7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
	/* Configure PB10 and PB11 as an output by clearing all bits and setting the mode */
	GPIOB->MODER &= ~GPIO_MODER_MODE10;
 8000b80:	4b34      	ldr	r3, [pc, #208]	@ (8000c54 <i2c_init+0xf0>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a33      	ldr	r2, [pc, #204]	@ (8000c54 <i2c_init+0xf0>)
 8000b86:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000b8a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODE10_1;
 8000b8c:	4b31      	ldr	r3, [pc, #196]	@ (8000c54 <i2c_init+0xf0>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a30      	ldr	r2, [pc, #192]	@ (8000c54 <i2c_init+0xf0>)
 8000b92:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b96:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~GPIO_MODER_MODE11;
 8000b98:	4b2e      	ldr	r3, [pc, #184]	@ (8000c54 <i2c_init+0xf0>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a2d      	ldr	r2, [pc, #180]	@ (8000c54 <i2c_init+0xf0>)
 8000b9e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000ba2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODE11_1;
 8000ba4:	4b2b      	ldr	r3, [pc, #172]	@ (8000c54 <i2c_init+0xf0>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a2a      	ldr	r2, [pc, #168]	@ (8000c54 <i2c_init+0xf0>)
 8000baa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000bae:	6013      	str	r3, [r2, #0]

	/* Configure the GPIO with open drain mode */
	GPIOB->OTYPER |= GPIO_OTYPER_OT10;
 8000bb0:	4b28      	ldr	r3, [pc, #160]	@ (8000c54 <i2c_init+0xf0>)
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	4a27      	ldr	r2, [pc, #156]	@ (8000c54 <i2c_init+0xf0>)
 8000bb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bba:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= GPIO_OTYPER_OT11;
 8000bbc:	4b25      	ldr	r3, [pc, #148]	@ (8000c54 <i2c_init+0xf0>)
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	4a24      	ldr	r2, [pc, #144]	@ (8000c54 <i2c_init+0xf0>)
 8000bc2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000bc6:	6053      	str	r3, [r2, #4]
	/*Configure the GPIO with high speed mode */
	GPIOB->OSPEEDR |= GPIO_OSPEEDR_OSPEED10_Msk;
 8000bc8:	4b22      	ldr	r3, [pc, #136]	@ (8000c54 <i2c_init+0xf0>)
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	4a21      	ldr	r2, [pc, #132]	@ (8000c54 <i2c_init+0xf0>)
 8000bce:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8000bd2:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= GPIO_OSPEEDR_OSPEED11_Msk;
 8000bd4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c54 <i2c_init+0xf0>)
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	4a1e      	ldr	r2, [pc, #120]	@ (8000c54 <i2c_init+0xf0>)
 8000bda:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 8000bde:	6093      	str	r3, [r2, #8]
	/*Enable Pull up resistors*/
	GPIOB->PUPDR |= GPIO_PUPDR_PUPD10_0;
 8000be0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c54 <i2c_init+0xf0>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	4a1b      	ldr	r2, [pc, #108]	@ (8000c54 <i2c_init+0xf0>)
 8000be6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000bea:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= GPIO_PUPDR_PUPD11_0;
 8000bec:	4b19      	ldr	r3, [pc, #100]	@ (8000c54 <i2c_init+0xf0>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	4a18      	ldr	r2, [pc, #96]	@ (8000c54 <i2c_init+0xf0>)
 8000bf2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bf6:	60d3      	str	r3, [r2, #12]
	/*Set alternate function mapping*/
	GPIOB->AFR[1] |= GPIO_AFRH_AFSEL10_2;
 8000bf8:	4b16      	ldr	r3, [pc, #88]	@ (8000c54 <i2c_init+0xf0>)
 8000bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bfc:	4a15      	ldr	r2, [pc, #84]	@ (8000c54 <i2c_init+0xf0>)
 8000bfe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c02:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= GPIO_AFRH_AFSEL11_2;
 8000c04:	4b13      	ldr	r3, [pc, #76]	@ (8000c54 <i2c_init+0xf0>)
 8000c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c08:	4a12      	ldr	r2, [pc, #72]	@ (8000c54 <i2c_init+0xf0>)
 8000c0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c0e:	6253      	str	r3, [r2, #36]	@ 0x24

	/* I2C configuration*/
	// Hardware Reset
	I2C2->CR1 |= I2C_CR1_SWRST;
 8000c10:	4b11      	ldr	r3, [pc, #68]	@ (8000c58 <i2c_init+0xf4>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a10      	ldr	r2, [pc, #64]	@ (8000c58 <i2c_init+0xf4>)
 8000c16:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c1a:	6013      	str	r3, [r2, #0]
	I2C2->CR1 &= ~I2C_CR1_SWRST;
 8000c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c58 <i2c_init+0xf4>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a0d      	ldr	r2, [pc, #52]	@ (8000c58 <i2c_init+0xf4>)
 8000c22:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000c26:	6013      	str	r3, [r2, #0]
	//turn the peripheral off
	I2C2->CR1 &= ~I2C_CR1_PE;
 8000c28:	4b0b      	ldr	r3, [pc, #44]	@ (8000c58 <i2c_init+0xf4>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c58 <i2c_init+0xf4>)
 8000c2e:	f023 0301 	bic.w	r3, r3, #1
 8000c32:	6013      	str	r3, [r2, #0]

	// Set BAUD RATE to ~20-21 kHz
	I2C2->TIMINGR = (7 << 28) |  // PRESC = 7
 8000c34:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <i2c_init+0xf4>)
 8000c36:	4a09      	ldr	r2, [pc, #36]	@ (8000c5c <i2c_init+0xf8>)
 8000c38:	611a      	str	r2, [r3, #16]
	                (11 << 8) |  // SCLH = 11
	                (11 << 0);   // SCLL = 11


	// Enabling I2C2 peripheral
	I2C2->CR1 |= I2C_CR1_PE;
 8000c3a:	4b07      	ldr	r3, [pc, #28]	@ (8000c58 <i2c_init+0xf4>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a06      	ldr	r2, [pc, #24]	@ (8000c58 <i2c_init+0xf4>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6013      	str	r3, [r2, #0]
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	40021000 	.word	0x40021000
 8000c54:	48000400 	.word	0x48000400
 8000c58:	40005800 	.word	0x40005800
 8000c5c:	72100b0b 	.word	0x72100b0b

08000c60 <i2c_transaction>:

uint8_t i2c_transaction(uint8_t address, uint8_t dir, uint8_t* data, uint8_t len) {
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	603a      	str	r2, [r7, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
 8000c6e:	460b      	mov	r3, r1
 8000c70:	71bb      	strb	r3, [r7, #6]
 8000c72:	4613      	mov	r3, r2
 8000c74:	717b      	strb	r3, [r7, #5]
	while (I2C2->ISR & I2C_ISR_BUSY);
 8000c76:	bf00      	nop
 8000c78:	4b5c      	ldr	r3, [pc, #368]	@ (8000dec <i2c_transaction+0x18c>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d1f9      	bne.n	8000c78 <i2c_transaction+0x18>
	I2C2->CR2 &= ~I2C_CR2_SADD;
 8000c84:	4b59      	ldr	r3, [pc, #356]	@ (8000dec <i2c_transaction+0x18c>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	4a58      	ldr	r2, [pc, #352]	@ (8000dec <i2c_transaction+0x18c>)
 8000c8a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8000c8e:	f023 0303 	bic.w	r3, r3, #3
 8000c92:	6053      	str	r3, [r2, #4]
	I2C2->CR2 &= ~I2C_CR2_RD_WRN;
 8000c94:	4b55      	ldr	r3, [pc, #340]	@ (8000dec <i2c_transaction+0x18c>)
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	4a54      	ldr	r2, [pc, #336]	@ (8000dec <i2c_transaction+0x18c>)
 8000c9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000c9e:	6053      	str	r3, [r2, #4]
	I2C2->CR2 &= ~I2C_CR2_NBYTES_Msk;
 8000ca0:	4b52      	ldr	r3, [pc, #328]	@ (8000dec <i2c_transaction+0x18c>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	4a51      	ldr	r2, [pc, #324]	@ (8000dec <i2c_transaction+0x18c>)
 8000ca6:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8000caa:	6053      	str	r3, [r2, #4]
	if(dir){ //do a read transaction
 8000cac:	79bb      	ldrb	r3, [r7, #6]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d04c      	beq.n	8000d4c <i2c_transaction+0xec>
		//configure CR2 register
		I2C2->CR2 |= (address << 1) | (1<< 10) | (len << 16);
 8000cb2:	4b4e      	ldr	r3, [pc, #312]	@ (8000dec <i2c_transaction+0x18c>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	79fa      	ldrb	r2, [r7, #7]
 8000cb8:	0052      	lsls	r2, r2, #1
 8000cba:	f442 6180 	orr.w	r1, r2, #1024	@ 0x400
 8000cbe:	797a      	ldrb	r2, [r7, #5]
 8000cc0:	0412      	lsls	r2, r2, #16
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	4611      	mov	r1, r2
 8000cc6:	4a49      	ldr	r2, [pc, #292]	@ (8000dec <i2c_transaction+0x18c>)
 8000cc8:	430b      	orrs	r3, r1
 8000cca:	6053      	str	r3, [r2, #4]
		I2C2->CR2 |= I2C_CR2_START;
 8000ccc:	4b47      	ldr	r3, [pc, #284]	@ (8000dec <i2c_transaction+0x18c>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	4a46      	ldr	r2, [pc, #280]	@ (8000dec <i2c_transaction+0x18c>)
 8000cd2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000cd6:	6053      	str	r3, [r2, #4]


		for (uint8_t i = 0; i < len; i++) {
 8000cd8:	2300      	movs	r3, #0
 8000cda:	73fb      	strb	r3, [r7, #15]
 8000cdc:	e023      	b.n	8000d26 <i2c_transaction+0xc6>

			while (!(I2C2->ISR & I2C_ISR_RXNE)){
				if (I2C2->ISR & I2C_ISR_NACKF) {
 8000cde:	4b43      	ldr	r3, [pc, #268]	@ (8000dec <i2c_transaction+0x18c>)
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	f003 0310 	and.w	r3, r3, #16
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d00d      	beq.n	8000d06 <i2c_transaction+0xa6>
					I2C2->ICR |= I2C_ICR_NACKCF;
 8000cea:	4b40      	ldr	r3, [pc, #256]	@ (8000dec <i2c_transaction+0x18c>)
 8000cec:	69db      	ldr	r3, [r3, #28]
 8000cee:	4a3f      	ldr	r2, [pc, #252]	@ (8000dec <i2c_transaction+0x18c>)
 8000cf0:	f043 0310 	orr.w	r3, r3, #16
 8000cf4:	61d3      	str	r3, [r2, #28]
					I2C2->CR2 |= I2C_CR2_STOP;
 8000cf6:	4b3d      	ldr	r3, [pc, #244]	@ (8000dec <i2c_transaction+0x18c>)
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	4a3c      	ldr	r2, [pc, #240]	@ (8000dec <i2c_transaction+0x18c>)
 8000cfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d00:	6053      	str	r3, [r2, #4]
					return 0; // NACK received
 8000d02:	2300      	movs	r3, #0
 8000d04:	e06b      	b.n	8000dde <i2c_transaction+0x17e>
			while (!(I2C2->ISR & I2C_ISR_RXNE)){
 8000d06:	4b39      	ldr	r3, [pc, #228]	@ (8000dec <i2c_transaction+0x18c>)
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	f003 0304 	and.w	r3, r3, #4
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d0e5      	beq.n	8000cde <i2c_transaction+0x7e>
				}
			}
			data[i] = I2C2->RXDR;
 8000d12:	4b36      	ldr	r3, [pc, #216]	@ (8000dec <i2c_transaction+0x18c>)
 8000d14:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	683a      	ldr	r2, [r7, #0]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	b2ca      	uxtb	r2, r1
 8000d1e:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < len; i++) {
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	3301      	adds	r3, #1
 8000d24:	73fb      	strb	r3, [r7, #15]
 8000d26:	7bfa      	ldrb	r2, [r7, #15]
 8000d28:	797b      	ldrb	r3, [r7, #5]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d3eb      	bcc.n	8000d06 <i2c_transaction+0xa6>
		}


		//check if transfer is complete
		while (!(I2C2->ISR & I2C_ISR_TC));
 8000d2e:	bf00      	nop
 8000d30:	4b2e      	ldr	r3, [pc, #184]	@ (8000dec <i2c_transaction+0x18c>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d0f9      	beq.n	8000d30 <i2c_transaction+0xd0>
		I2C2->CR2 |= I2C_CR2_STOP;
 8000d3c:	4b2b      	ldr	r3, [pc, #172]	@ (8000dec <i2c_transaction+0x18c>)
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	4a2a      	ldr	r2, [pc, #168]	@ (8000dec <i2c_transaction+0x18c>)
 8000d42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d46:	6053      	str	r3, [r2, #4]
		return 1;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e048      	b.n	8000dde <i2c_transaction+0x17e>

	} else { //do a write transaction
		// Set the address and direction
		I2C2->CR2 |= (address << 1) | (0<< 10) | (len << 16);
 8000d4c:	4b27      	ldr	r3, [pc, #156]	@ (8000dec <i2c_transaction+0x18c>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	79fa      	ldrb	r2, [r7, #7]
 8000d52:	0051      	lsls	r1, r2, #1
 8000d54:	797a      	ldrb	r2, [r7, #5]
 8000d56:	0412      	lsls	r2, r2, #16
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	4611      	mov	r1, r2
 8000d5c:	4a23      	ldr	r2, [pc, #140]	@ (8000dec <i2c_transaction+0x18c>)
 8000d5e:	430b      	orrs	r3, r1
 8000d60:	6053      	str	r3, [r2, #4]
		I2C2->CR2 |= I2C_CR2_START;
 8000d62:	4b22      	ldr	r3, [pc, #136]	@ (8000dec <i2c_transaction+0x18c>)
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	4a21      	ldr	r2, [pc, #132]	@ (8000dec <i2c_transaction+0x18c>)
 8000d68:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d6c:	6053      	str	r3, [r2, #4]


		for (uint8_t i = 0; i < len; i++) {
 8000d6e:	2300      	movs	r3, #0
 8000d70:	73bb      	strb	r3, [r7, #14]
 8000d72:	e022      	b.n	8000dba <i2c_transaction+0x15a>
			while (!(I2C2->ISR & I2C_ISR_TXIS)) {
				if (I2C2->ISR & I2C_ISR_NACKF) {//Check NACK flag
 8000d74:	4b1d      	ldr	r3, [pc, #116]	@ (8000dec <i2c_transaction+0x18c>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	f003 0310 	and.w	r3, r3, #16
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d00d      	beq.n	8000d9c <i2c_transaction+0x13c>
					I2C2->ICR |= I2C_ICR_NACKCF;
 8000d80:	4b1a      	ldr	r3, [pc, #104]	@ (8000dec <i2c_transaction+0x18c>)
 8000d82:	69db      	ldr	r3, [r3, #28]
 8000d84:	4a19      	ldr	r2, [pc, #100]	@ (8000dec <i2c_transaction+0x18c>)
 8000d86:	f043 0310 	orr.w	r3, r3, #16
 8000d8a:	61d3      	str	r3, [r2, #28]
					I2C2->CR2 |= I2C_CR2_STOP;
 8000d8c:	4b17      	ldr	r3, [pc, #92]	@ (8000dec <i2c_transaction+0x18c>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	4a16      	ldr	r2, [pc, #88]	@ (8000dec <i2c_transaction+0x18c>)
 8000d92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d96:	6053      	str	r3, [r2, #4]
					return 0; // NACK received
 8000d98:	2300      	movs	r3, #0
 8000d9a:	e020      	b.n	8000dde <i2c_transaction+0x17e>
			while (!(I2C2->ISR & I2C_ISR_TXIS)) {
 8000d9c:	4b13      	ldr	r3, [pc, #76]	@ (8000dec <i2c_transaction+0x18c>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	f003 0302 	and.w	r3, r3, #2
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d0e5      	beq.n	8000d74 <i2c_transaction+0x114>
				}
			}

			I2C2->TXDR = data[i];
 8000da8:	7bbb      	ldrb	r3, [r7, #14]
 8000daa:	683a      	ldr	r2, [r7, #0]
 8000dac:	4413      	add	r3, r2
 8000dae:	781a      	ldrb	r2, [r3, #0]
 8000db0:	4b0e      	ldr	r3, [pc, #56]	@ (8000dec <i2c_transaction+0x18c>)
 8000db2:	629a      	str	r2, [r3, #40]	@ 0x28
		for (uint8_t i = 0; i < len; i++) {
 8000db4:	7bbb      	ldrb	r3, [r7, #14]
 8000db6:	3301      	adds	r3, #1
 8000db8:	73bb      	strb	r3, [r7, #14]
 8000dba:	7bba      	ldrb	r2, [r7, #14]
 8000dbc:	797b      	ldrb	r3, [r7, #5]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d3ec      	bcc.n	8000d9c <i2c_transaction+0x13c>
		}
		//check if transfer is complete
		while (!(I2C2->ISR & I2C_ISR_TC));
 8000dc2:	bf00      	nop
 8000dc4:	4b09      	ldr	r3, [pc, #36]	@ (8000dec <i2c_transaction+0x18c>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d0f9      	beq.n	8000dc4 <i2c_transaction+0x164>
		I2C2->CR2 |= I2C_CR2_STOP;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <i2c_transaction+0x18c>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	4a05      	ldr	r2, [pc, #20]	@ (8000dec <i2c_transaction+0x18c>)
 8000dd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dda:	6053      	str	r3, [r2, #4]

		return 1;
 8000ddc:	2301      	movs	r3, #1
	}

}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40005800 	.word	0x40005800

08000df0 <write_to_reg>:
#include <i2c.h>
#include <stdio.h>
#include <stdint.h>


uint8_t write_to_reg(uint8_t address, uint8_t subaddress, uint8_t val){
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	71bb      	strb	r3, [r7, #6]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	717b      	strb	r3, [r7, #5]
	uint8_t data[2] = {subaddress, val};
 8000e02:	79bb      	ldrb	r3, [r7, #6]
 8000e04:	733b      	strb	r3, [r7, #12]
 8000e06:	797b      	ldrb	r3, [r7, #5]
 8000e08:	737b      	strb	r3, [r7, #13]
	return i2c_transaction(address,0, data, 2);
 8000e0a:	f107 020c 	add.w	r2, r7, #12
 8000e0e:	79f8      	ldrb	r0, [r7, #7]
 8000e10:	2302      	movs	r3, #2
 8000e12:	2100      	movs	r1, #0
 8000e14:	f7ff ff24 	bl	8000c60 <i2c_transaction>
 8000e18:	4603      	mov	r3, r0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <read_from_reg>:
uint8_t read_from_reg(uint8_t address, uint8_t *subaddress, uint8_t *val, uint8_t len){
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b084      	sub	sp, #16
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4603      	mov	r3, r0
 8000e30:	73fb      	strb	r3, [r7, #15]
 8000e32:	4613      	mov	r3, r2
 8000e34:	73bb      	strb	r3, [r7, #14]
	i2c_transaction(address, 0, subaddress, 1);
 8000e36:	7bf8      	ldrb	r0, [r7, #15]
 8000e38:	2301      	movs	r3, #1
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	f7ff ff0f 	bl	8000c60 <i2c_transaction>
	return i2c_transaction(address, 1, val, len);
 8000e42:	7bbb      	ldrb	r3, [r7, #14]
 8000e44:	7bf8      	ldrb	r0, [r7, #15]
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	2101      	movs	r1, #1
 8000e4a:	f7ff ff09 	bl	8000c60 <i2c_transaction>
 8000e4e:	4603      	mov	r3, r0
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <lsm6dsl_init>:
void lsm6dsl_init(){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
	uint8_t err;
	/* Enable accelerometer*/
	err = write_to_reg(LSM6DSL_ADDR, CTRL1_XL, ODR_XL);
 8000e5e:	2260      	movs	r2, #96	@ 0x60
 8000e60:	2110      	movs	r1, #16
 8000e62:	206a      	movs	r0, #106	@ 0x6a
 8000e64:	f7ff ffc4 	bl	8000df0 <write_to_reg>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	71fb      	strb	r3, [r7, #7]
	if(err== 0){
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d102      	bne.n	8000e78 <lsm6dsl_init+0x20>
		printf("Error with enabling accelerometer\n");
 8000e72:	480a      	ldr	r0, [pc, #40]	@ (8000e9c <lsm6dsl_init+0x44>)
 8000e74:	f002 fe6c 	bl	8003b50 <puts>
	}
	/*Enable auto-increment on accelerometer for i2c*/
	err = write_to_reg(LSM6DSL_ADDR, CTRL3_C, IF_INC);
 8000e78:	2204      	movs	r2, #4
 8000e7a:	2112      	movs	r1, #18
 8000e7c:	206a      	movs	r0, #106	@ 0x6a
 8000e7e:	f7ff ffb7 	bl	8000df0 <write_to_reg>
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
	if(err == 0){
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d102      	bne.n	8000e92 <lsm6dsl_init+0x3a>
		printf("Error with auto-increment for accelerometer\n");
 8000e8c:	4804      	ldr	r0, [pc, #16]	@ (8000ea0 <lsm6dsl_init+0x48>)
 8000e8e:	f002 fe5f 	bl	8003b50 <puts>
	}
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	080047cc 	.word	0x080047cc
 8000ea0:	080047f0 	.word	0x080047f0

08000ea4 <lsm6dsl_read_xyz>:

void lsm6dsl_read_xyz(int16_t* x, int16_t* y, int16_t* z){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
	uint8_t data[6];
	uint8_t reg = OUTX_L_XL;
 8000eb0:	2328      	movs	r3, #40	@ 0x28
 8000eb2:	75fb      	strb	r3, [r7, #23]
	read_from_reg(LSM6DSL_ADDR, &reg, data, 6);
 8000eb4:	f107 0218 	add.w	r2, r7, #24
 8000eb8:	f107 0117 	add.w	r1, r7, #23
 8000ebc:	2306      	movs	r3, #6
 8000ebe:	206a      	movs	r0, #106	@ 0x6a
 8000ec0:	f7ff ffaf 	bl	8000e22 <read_from_reg>
	//Getting value of x
	*x = (int16_t)(data[1] << 8 | data[0]);
 8000ec4:	7e7b      	ldrb	r3, [r7, #25]
 8000ec6:	021b      	lsls	r3, r3, #8
 8000ec8:	b21a      	sxth	r2, r3
 8000eca:	7e3b      	ldrb	r3, [r7, #24]
 8000ecc:	b21b      	sxth	r3, r3
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	b21a      	sxth	r2, r3
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	801a      	strh	r2, [r3, #0]
	//Getting value of y
	*y = (int16_t)(data[3] << 8 | data[2]);
 8000ed6:	7efb      	ldrb	r3, [r7, #27]
 8000ed8:	021b      	lsls	r3, r3, #8
 8000eda:	b21a      	sxth	r2, r3
 8000edc:	7ebb      	ldrb	r3, [r7, #26]
 8000ede:	b21b      	sxth	r3, r3
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	b21a      	sxth	r2, r3
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	801a      	strh	r2, [r3, #0]
	//Getting value of z
	*z = (int16_t)(data[5] << 8 | data[4]);
 8000ee8:	7f7b      	ldrb	r3, [r7, #29]
 8000eea:	021b      	lsls	r3, r3, #8
 8000eec:	b21a      	sxth	r2, r3
 8000eee:	7f3b      	ldrb	r3, [r7, #28]
 8000ef0:	b21b      	sxth	r3, r3
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	b21a      	sxth	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	801a      	strh	r2, [r3, #0]
}
 8000efa:	bf00      	nop
 8000efc:	3720      	adds	r7, #32
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <lost_mode>:

void update_transmission_data() {
    transmission_data[1] = (0x23D5 & 0xFF00) | (min_lost & 0x00FF);
}

void lost_mode() {
 8000f04:	b5b0      	push	{r4, r5, r7, lr}
 8000f06:	b096      	sub	sp, #88	@ 0x58
 8000f08:	af02      	add	r7, sp, #8
    if (lost_mode_counter >= LOST_MODE_DELAY) {
 8000f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f84 <lost_mode+0x80>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2bc7      	cmp	r3, #199	@ 0xc7
 8000f10:	dd34      	ble.n	8000f7c <lost_mode+0x78>

    	char test_str[] = "SiyaTag missing for ";  // Ensure enough space for the message and number
 8000f12:	4b1d      	ldr	r3, [pc, #116]	@ (8000f88 <lost_mode+0x84>)
 8000f14:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8000f18:	461d      	mov	r5, r3
 8000f1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f1e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f22:	6020      	str	r0, [r4, #0]
 8000f24:	3404      	adds	r4, #4
 8000f26:	7021      	strb	r1, [r4, #0]
    	updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, sizeof(test_str) - 1, (unsigned char*)test_str);
 8000f28:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	2314      	movs	r3, #20
 8000f30:	2200      	movs	r2, #0
 8000f32:	4916      	ldr	r1, [pc, #88]	@ (8000f8c <lost_mode+0x88>)
 8000f34:	4816      	ldr	r0, [pc, #88]	@ (8000f90 <lost_mode+0x8c>)
 8000f36:	f7ff fd43 	bl	80009c0 <updateCharValue>

        char secs_str[50];  // Ensure enough space for the message
 	  //Convert cycles still from 50ms cycles to seconds and subtract the minute it takes to get to lost mode
        int seconds = (cycles_still * 50) / 1000 - 59;
 8000f3a:	4b16      	ldr	r3, [pc, #88]	@ (8000f94 <lost_mode+0x90>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a16      	ldr	r2, [pc, #88]	@ (8000f98 <lost_mode+0x94>)
 8000f40:	fb82 1203 	smull	r1, r2, r2, r3
 8000f44:	10d2      	asrs	r2, r2, #3
 8000f46:	17db      	asrs	r3, r3, #31
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	3b3b      	subs	r3, #59	@ 0x3b
 8000f4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
        sprintf(secs_str, "%d secs", seconds);
 8000f4e:	463b      	mov	r3, r7
 8000f50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000f52:	4912      	ldr	r1, [pc, #72]	@ (8000f9c <lost_mode+0x98>)
 8000f54:	4618      	mov	r0, r3
 8000f56:	f002 fcc3 	bl	80038e0 <siprintf>
        updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, strlen(secs_str), (unsigned char*)secs_str);
 8000f5a:	463b      	mov	r3, r7
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff f937 	bl	80001d0 <strlen>
 8000f62:	4603      	mov	r3, r0
 8000f64:	461a      	mov	r2, r3
 8000f66:	463b      	mov	r3, r7
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	4907      	ldr	r1, [pc, #28]	@ (8000f8c <lost_mode+0x88>)
 8000f70:	4807      	ldr	r0, [pc, #28]	@ (8000f90 <lost_mode+0x8c>)
 8000f72:	f7ff fd25 	bl	80009c0 <updateCharValue>
        lost_mode_counter = 0;
 8000f76:	4b03      	ldr	r3, [pc, #12]	@ (8000f84 <lost_mode+0x80>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
    }
}
 8000f7c:	bf00      	nop
 8000f7e:	3750      	adds	r7, #80	@ 0x50
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bdb0      	pop	{r4, r5, r7, pc}
 8000f84:	20000368 	.word	0x20000368
 8000f88:	08004824 	.word	0x08004824
 8000f8c:	200002f0 	.word	0x200002f0
 8000f90:	200002e8 	.word	0x200002e8
 8000f94:	20000360 	.word	0x20000360
 8000f98:	66666667 	.word	0x66666667
 8000f9c:	0800481c 	.word	0x0800481c

08000fa0 <TIM2_IRQHandler>:




void TIM2_IRQHandler() {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) {
 8000fa6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000faa:	691b      	ldr	r3, [r3, #16]
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d07c      	beq.n	80010ae <TIM2_IRQHandler+0x10e>
        TIM2->SR &= ~TIM_SR_UIF;
 8000fb4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fb8:	691b      	ldr	r3, [r3, #16]
 8000fba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fbe:	f023 0301 	bic.w	r3, r3, #1
 8000fc2:	6113      	str	r3, [r2, #16]
        lsm6dsl_read_xyz(&x, &y, &z);
 8000fc4:	4a3c      	ldr	r2, [pc, #240]	@ (80010b8 <TIM2_IRQHandler+0x118>)
 8000fc6:	493d      	ldr	r1, [pc, #244]	@ (80010bc <TIM2_IRQHandler+0x11c>)
 8000fc8:	483d      	ldr	r0, [pc, #244]	@ (80010c0 <TIM2_IRQHandler+0x120>)
 8000fca:	f7ff ff6b 	bl	8000ea4 <lsm6dsl_read_xyz>
        int vx = (x - px) * (x - px);
 8000fce:	4b3c      	ldr	r3, [pc, #240]	@ (80010c0 <TIM2_IRQHandler+0x120>)
 8000fd0:	881b      	ldrh	r3, [r3, #0]
 8000fd2:	b21b      	sxth	r3, r3
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b3b      	ldr	r3, [pc, #236]	@ (80010c4 <TIM2_IRQHandler+0x124>)
 8000fd8:	881b      	ldrh	r3, [r3, #0]
 8000fda:	b21b      	sxth	r3, r3
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	4a38      	ldr	r2, [pc, #224]	@ (80010c0 <TIM2_IRQHandler+0x120>)
 8000fe0:	8812      	ldrh	r2, [r2, #0]
 8000fe2:	b212      	sxth	r2, r2
 8000fe4:	4611      	mov	r1, r2
 8000fe6:	4a37      	ldr	r2, [pc, #220]	@ (80010c4 <TIM2_IRQHandler+0x124>)
 8000fe8:	8812      	ldrh	r2, [r2, #0]
 8000fea:	b212      	sxth	r2, r2
 8000fec:	1a8a      	subs	r2, r1, r2
 8000fee:	fb02 f303 	mul.w	r3, r2, r3
 8000ff2:	60fb      	str	r3, [r7, #12]
        int vy = (y - py) * (y - py);
 8000ff4:	4b31      	ldr	r3, [pc, #196]	@ (80010bc <TIM2_IRQHandler+0x11c>)
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	4b32      	ldr	r3, [pc, #200]	@ (80010c8 <TIM2_IRQHandler+0x128>)
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	b21b      	sxth	r3, r3
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	4a2d      	ldr	r2, [pc, #180]	@ (80010bc <TIM2_IRQHandler+0x11c>)
 8001006:	8812      	ldrh	r2, [r2, #0]
 8001008:	b212      	sxth	r2, r2
 800100a:	4611      	mov	r1, r2
 800100c:	4a2e      	ldr	r2, [pc, #184]	@ (80010c8 <TIM2_IRQHandler+0x128>)
 800100e:	8812      	ldrh	r2, [r2, #0]
 8001010:	b212      	sxth	r2, r2
 8001012:	1a8a      	subs	r2, r1, r2
 8001014:	fb02 f303 	mul.w	r3, r2, r3
 8001018:	60bb      	str	r3, [r7, #8]
        int vz = (z - pz) * (z - pz);
 800101a:	4b27      	ldr	r3, [pc, #156]	@ (80010b8 <TIM2_IRQHandler+0x118>)
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	b21b      	sxth	r3, r3
 8001020:	461a      	mov	r2, r3
 8001022:	4b2a      	ldr	r3, [pc, #168]	@ (80010cc <TIM2_IRQHandler+0x12c>)
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	b21b      	sxth	r3, r3
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	4a23      	ldr	r2, [pc, #140]	@ (80010b8 <TIM2_IRQHandler+0x118>)
 800102c:	8812      	ldrh	r2, [r2, #0]
 800102e:	b212      	sxth	r2, r2
 8001030:	4611      	mov	r1, r2
 8001032:	4a26      	ldr	r2, [pc, #152]	@ (80010cc <TIM2_IRQHandler+0x12c>)
 8001034:	8812      	ldrh	r2, [r2, #0]
 8001036:	b212      	sxth	r2, r2
 8001038:	1a8a      	subs	r2, r1, r2
 800103a:	fb02 f303 	mul.w	r3, r2, r3
 800103e:	607b      	str	r3, [r7, #4]

        if (vx < THRESHOLD && vy < THRESHOLD && vz < THRESHOLD) {
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4a23      	ldr	r2, [pc, #140]	@ (80010d0 <TIM2_IRQHandler+0x130>)
 8001044:	4293      	cmp	r3, r2
 8001046:	dc1a      	bgt.n	800107e <TIM2_IRQHandler+0xde>
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	4a21      	ldr	r2, [pc, #132]	@ (80010d0 <TIM2_IRQHandler+0x130>)
 800104c:	4293      	cmp	r3, r2
 800104e:	dc16      	bgt.n	800107e <TIM2_IRQHandler+0xde>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a1f      	ldr	r2, [pc, #124]	@ (80010d0 <TIM2_IRQHandler+0x130>)
 8001054:	4293      	cmp	r3, r2
 8001056:	dc12      	bgt.n	800107e <TIM2_IRQHandler+0xde>
            cycles_still++;
 8001058:	4b1e      	ldr	r3, [pc, #120]	@ (80010d4 <TIM2_IRQHandler+0x134>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	3301      	adds	r3, #1
 800105e:	4a1d      	ldr	r2, [pc, #116]	@ (80010d4 <TIM2_IRQHandler+0x134>)
 8001060:	6013      	str	r3, [r2, #0]
            if (cycles_still >= TIME_LIMIT) {
 8001062:	4b1c      	ldr	r3, [pc, #112]	@ (80010d4 <TIM2_IRQHandler+0x134>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800106a:	db11      	blt.n	8001090 <TIM2_IRQHandler+0xf0>
                lost = true;
 800106c:	4b1a      	ldr	r3, [pc, #104]	@ (80010d8 <TIM2_IRQHandler+0x138>)
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]
                lost_mode_counter++;
 8001072:	4b1a      	ldr	r3, [pc, #104]	@ (80010dc <TIM2_IRQHandler+0x13c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	3301      	adds	r3, #1
 8001078:	4a18      	ldr	r2, [pc, #96]	@ (80010dc <TIM2_IRQHandler+0x13c>)
 800107a:	6013      	str	r3, [r2, #0]
            if (cycles_still >= TIME_LIMIT) {
 800107c:	e008      	b.n	8001090 <TIM2_IRQHandler+0xf0>
            }
        } else {
            cycles_still = 0;
 800107e:	4b15      	ldr	r3, [pc, #84]	@ (80010d4 <TIM2_IRQHandler+0x134>)
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
            lost = false;
 8001084:	4b14      	ldr	r3, [pc, #80]	@ (80010d8 <TIM2_IRQHandler+0x138>)
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
            lost_mode_counter = 0;
 800108a:	4b14      	ldr	r3, [pc, #80]	@ (80010dc <TIM2_IRQHandler+0x13c>)
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
        }

        px = x;
 8001090:	4b0b      	ldr	r3, [pc, #44]	@ (80010c0 <TIM2_IRQHandler+0x120>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	b21a      	sxth	r2, r3
 8001096:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <TIM2_IRQHandler+0x124>)
 8001098:	801a      	strh	r2, [r3, #0]
        py = y;
 800109a:	4b08      	ldr	r3, [pc, #32]	@ (80010bc <TIM2_IRQHandler+0x11c>)
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	b21a      	sxth	r2, r3
 80010a0:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <TIM2_IRQHandler+0x128>)
 80010a2:	801a      	strh	r2, [r3, #0]
        pz = z;
 80010a4:	4b04      	ldr	r3, [pc, #16]	@ (80010b8 <TIM2_IRQHandler+0x118>)
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	b21a      	sxth	r2, r3
 80010aa:	4b08      	ldr	r3, [pc, #32]	@ (80010cc <TIM2_IRQHandler+0x12c>)
 80010ac:	801a      	strh	r2, [r3, #0]
    }
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000370 	.word	0x20000370
 80010bc:	2000036e 	.word	0x2000036e
 80010c0:	2000036c 	.word	0x2000036c
 80010c4:	20000372 	.word	0x20000372
 80010c8:	20000374 	.word	0x20000374
 80010cc:	20000376 	.word	0x20000376
 80010d0:	000f423f 	.word	0x000f423f
 80010d4:	20000360 	.word	0x20000360
 80010d8:	20000364 	.word	0x20000364
 80010dc:	20000368 	.word	0x20000368

080010e0 <main>:


int main(void) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
    HAL_Init();
 80010e4:	f000 fbcb 	bl	800187e <HAL_Init>
    SystemClock_Config();
 80010e8:	f000 f86c 	bl	80011c4 <SystemClock_Config>
    MX_GPIO_Init();
 80010ec:	f000 f8ee 	bl	80012cc <MX_GPIO_Init>
    MX_SPI3_Init();
 80010f0:	f000 f8ae 	bl	8001250 <MX_SPI3_Init>
    HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_RESET);
 80010f4:	2200      	movs	r2, #0
 80010f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010fe:	f000 ff2b 	bl	8001f58 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001102:	200a      	movs	r0, #10
 8001104:	f000 fc30 	bl	8001968 <HAL_Delay>
    HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 8001108:	2201      	movs	r2, #1
 800110a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800110e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001112:	f000 ff21 	bl	8001f58 <HAL_GPIO_WritePin>
    ble_init();
 8001116:	f7ff f8b3 	bl	8000280 <ble_init>
    HAL_Delay(10);
 800111a:	200a      	movs	r0, #10
 800111c:	f000 fc24 	bl	8001968 <HAL_Delay>


    i2c_init();
 8001120:	f7ff fd20 	bl	8000b64 <i2c_init>
    lsm6dsl_init();
 8001124:	f7ff fe98 	bl	8000e58 <lsm6dsl_init>

    timer_init(TIM2);
 8001128:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800112c:	f000 fb28 	bl	8001780 <timer_init>
    timer_set_ms(TIM2, 50);
 8001130:	2132      	movs	r1, #50	@ 0x32
 8001132:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001136:	f000 fb66 	bl	8001806 <timer_set_ms>
    x = 0;
 800113a:	4b19      	ldr	r3, [pc, #100]	@ (80011a0 <main+0xc0>)
 800113c:	2200      	movs	r2, #0
 800113e:	801a      	strh	r2, [r3, #0]
	y = 0;
 8001140:	4b18      	ldr	r3, [pc, #96]	@ (80011a4 <main+0xc4>)
 8001142:	2200      	movs	r2, #0
 8001144:	801a      	strh	r2, [r3, #0]
	z = 0;
 8001146:	4b18      	ldr	r3, [pc, #96]	@ (80011a8 <main+0xc8>)
 8001148:	2200      	movs	r2, #0
 800114a:	801a      	strh	r2, [r3, #0]
	px = 0;
 800114c:	4b17      	ldr	r3, [pc, #92]	@ (80011ac <main+0xcc>)
 800114e:	2200      	movs	r2, #0
 8001150:	801a      	strh	r2, [r3, #0]
	py = 0;
 8001152:	4b17      	ldr	r3, [pc, #92]	@ (80011b0 <main+0xd0>)
 8001154:	2200      	movs	r2, #0
 8001156:	801a      	strh	r2, [r3, #0]
	pz = 0;
 8001158:	4b16      	ldr	r3, [pc, #88]	@ (80011b4 <main+0xd4>)
 800115a:	2200      	movs	r2, #0
 800115c:	801a      	strh	r2, [r3, #0]
	//setDiscoverability(0);

    while (1) {
    	if(/*discoverable && */HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 800115e:	2140      	movs	r1, #64	@ 0x40
 8001160:	4815      	ldr	r0, [pc, #84]	@ (80011b8 <main+0xd8>)
 8001162:	f000 fee1 	bl	8001f28 <HAL_GPIO_ReadPin>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <main+0x90>
    	    catchBLE();
 800116c:	f7ff fa9e 	bl	80006ac <catchBLE>
    	}
        if (lost) {
 8001170:	4b12      	ldr	r3, [pc, #72]	@ (80011bc <main+0xdc>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2b00      	cmp	r3, #0
 8001178:	d008      	beq.n	800118c <main+0xac>
         // setConnectable();
          setDiscoverability(1);
 800117a:	2001      	movs	r0, #1
 800117c:	f7ff fccc 	bl	8000b18 <setDiscoverability>
          discoverable = true;
 8001180:	4b0f      	ldr	r3, [pc, #60]	@ (80011c0 <main+0xe0>)
 8001182:	2201      	movs	r2, #1
 8001184:	701a      	strb	r2, [r3, #0]
          lost_mode();
 8001186:	f7ff febd 	bl	8000f04 <lost_mode>
 800118a:	e7e8      	b.n	800115e <main+0x7e>
        } else {
          disconnectBLE();
 800118c:	f7ff fc6c 	bl	8000a68 <disconnectBLE>
          setDiscoverability(0);
 8001190:	2000      	movs	r0, #0
 8001192:	f7ff fcc1 	bl	8000b18 <setDiscoverability>
          discoverable = false;
 8001196:	4b0a      	ldr	r3, [pc, #40]	@ (80011c0 <main+0xe0>)
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
    	if(/*discoverable && */HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 800119c:	e7df      	b.n	800115e <main+0x7e>
 800119e:	bf00      	nop
 80011a0:	2000036c 	.word	0x2000036c
 80011a4:	2000036e 	.word	0x2000036e
 80011a8:	20000370 	.word	0x20000370
 80011ac:	20000372 	.word	0x20000372
 80011b0:	20000374 	.word	0x20000374
 80011b4:	20000376 	.word	0x20000376
 80011b8:	48001000 	.word	0x48001000
 80011bc:	20000364 	.word	0x20000364
 80011c0:	20000154 	.word	0x20000154

080011c4 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @attention This changes the System clock frequency, make sure you reflect that change in your timer
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b096      	sub	sp, #88	@ 0x58
 80011c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	2244      	movs	r2, #68	@ 0x44
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f002 fcc4 	bl	8003b60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d8:	463b      	mov	r3, r7
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
 80011e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011e6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011ea:	f000 feff 	bl	8001fec <HAL_PWREx_ControlVoltageScaling>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011f4:	f000 f902 	bl	80013fc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80011f8:	2310      	movs	r3, #16
 80011fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011fc:	2301      	movs	r3, #1
 80011fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	633b      	str	r3, [r7, #48]	@ 0x30
  // This lines changes system clock frequency
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8001204:	2300      	movs	r3, #0
 8001206:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001208:	2300      	movs	r3, #0
 800120a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4618      	mov	r0, r3
 8001212:	f000 ff41 	bl	8002098 <HAL_RCC_OscConfig>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800121c:	f000 f8ee 	bl	80013fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001220:	230f      	movs	r3, #15
 8001222:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001224:	2300      	movs	r3, #0
 8001226:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001230:	2300      	movs	r3, #0
 8001232:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001234:	463b      	mov	r3, r7
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f001 fb09 	bl	8002850 <HAL_RCC_ClockConfig>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001244:	f000 f8da 	bl	80013fc <Error_Handler>
  }
}
 8001248:	bf00      	nop
 800124a:	3758      	adds	r7, #88	@ 0x58
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001254:	4b1b      	ldr	r3, [pc, #108]	@ (80012c4 <MX_SPI3_Init+0x74>)
 8001256:	4a1c      	ldr	r2, [pc, #112]	@ (80012c8 <MX_SPI3_Init+0x78>)
 8001258:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800125a:	4b1a      	ldr	r3, [pc, #104]	@ (80012c4 <MX_SPI3_Init+0x74>)
 800125c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001260:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001262:	4b18      	ldr	r3, [pc, #96]	@ (80012c4 <MX_SPI3_Init+0x74>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001268:	4b16      	ldr	r3, [pc, #88]	@ (80012c4 <MX_SPI3_Init+0x74>)
 800126a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800126e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001270:	4b14      	ldr	r3, [pc, #80]	@ (80012c4 <MX_SPI3_Init+0x74>)
 8001272:	2200      	movs	r2, #0
 8001274:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001276:	4b13      	ldr	r3, [pc, #76]	@ (80012c4 <MX_SPI3_Init+0x74>)
 8001278:	2200      	movs	r2, #0
 800127a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800127c:	4b11      	ldr	r3, [pc, #68]	@ (80012c4 <MX_SPI3_Init+0x74>)
 800127e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001282:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001284:	4b0f      	ldr	r3, [pc, #60]	@ (80012c4 <MX_SPI3_Init+0x74>)
 8001286:	2200      	movs	r2, #0
 8001288:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800128a:	4b0e      	ldr	r3, [pc, #56]	@ (80012c4 <MX_SPI3_Init+0x74>)
 800128c:	2200      	movs	r2, #0
 800128e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001290:	4b0c      	ldr	r3, [pc, #48]	@ (80012c4 <MX_SPI3_Init+0x74>)
 8001292:	2200      	movs	r2, #0
 8001294:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001296:	4b0b      	ldr	r3, [pc, #44]	@ (80012c4 <MX_SPI3_Init+0x74>)
 8001298:	2200      	movs	r2, #0
 800129a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800129c:	4b09      	ldr	r3, [pc, #36]	@ (80012c4 <MX_SPI3_Init+0x74>)
 800129e:	2207      	movs	r2, #7
 80012a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012a2:	4b08      	ldr	r3, [pc, #32]	@ (80012c4 <MX_SPI3_Init+0x74>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012a8:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <MX_SPI3_Init+0x74>)
 80012aa:	2208      	movs	r2, #8
 80012ac:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80012ae:	4805      	ldr	r0, [pc, #20]	@ (80012c4 <MX_SPI3_Init+0x74>)
 80012b0:	f001 fcba 	bl	8002c28 <HAL_SPI_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80012ba:	f000 f89f 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	200002fc 	.word	0x200002fc
 80012c8:	40003c00 	.word	0x40003c00

080012cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08a      	sub	sp, #40	@ 0x28
 80012d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
 80012e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012e2:	4b43      	ldr	r3, [pc, #268]	@ (80013f0 <MX_GPIO_Init+0x124>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e6:	4a42      	ldr	r2, [pc, #264]	@ (80013f0 <MX_GPIO_Init+0x124>)
 80012e8:	f043 0310 	orr.w	r3, r3, #16
 80012ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ee:	4b40      	ldr	r3, [pc, #256]	@ (80013f0 <MX_GPIO_Init+0x124>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f2:	f003 0310 	and.w	r3, r3, #16
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	4b3d      	ldr	r3, [pc, #244]	@ (80013f0 <MX_GPIO_Init+0x124>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fe:	4a3c      	ldr	r2, [pc, #240]	@ (80013f0 <MX_GPIO_Init+0x124>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001306:	4b3a      	ldr	r3, [pc, #232]	@ (80013f0 <MX_GPIO_Init+0x124>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001312:	4b37      	ldr	r3, [pc, #220]	@ (80013f0 <MX_GPIO_Init+0x124>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001316:	4a36      	ldr	r2, [pc, #216]	@ (80013f0 <MX_GPIO_Init+0x124>)
 8001318:	f043 0302 	orr.w	r3, r3, #2
 800131c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800131e:	4b34      	ldr	r3, [pc, #208]	@ (80013f0 <MX_GPIO_Init+0x124>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800132a:	4b31      	ldr	r3, [pc, #196]	@ (80013f0 <MX_GPIO_Init+0x124>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132e:	4a30      	ldr	r2, [pc, #192]	@ (80013f0 <MX_GPIO_Init+0x124>)
 8001330:	f043 0308 	orr.w	r3, r3, #8
 8001334:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001336:	4b2e      	ldr	r3, [pc, #184]	@ (80013f0 <MX_GPIO_Init+0x124>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001342:	4b2b      	ldr	r3, [pc, #172]	@ (80013f0 <MX_GPIO_Init+0x124>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001346:	4a2a      	ldr	r2, [pc, #168]	@ (80013f0 <MX_GPIO_Init+0x124>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800134e:	4b28      	ldr	r3, [pc, #160]	@ (80013f0 <MX_GPIO_Init+0x124>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED1_GPIO_Port, GPIO_LED1_Pin, GPIO_PIN_RESET);
 800135a:	2200      	movs	r2, #0
 800135c:	2120      	movs	r1, #32
 800135e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001362:	f000 fdf9 	bl	8001f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 8001366:	2201      	movs	r2, #1
 8001368:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800136c:	4821      	ldr	r0, [pc, #132]	@ (80013f4 <MX_GPIO_Init+0x128>)
 800136e:	f000 fdf3 	bl	8001f58 <HAL_GPIO_WritePin>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 8001372:	2201      	movs	r2, #1
 8001374:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001378:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800137c:	f000 fdec 	bl	8001f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 8001380:	2340      	movs	r3, #64	@ 0x40
 8001382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001384:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001388:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4619      	mov	r1, r3
 8001394:	4818      	ldr	r0, [pc, #96]	@ (80013f8 <MX_GPIO_Init+0x12c>)
 8001396:	f000 fc1d 	bl	8001bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin BLE_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|BLE_RESET_Pin;
 800139a:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800139e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a0:	2301      	movs	r3, #1
 80013a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a8:	2300      	movs	r3, #0
 80013aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	4619      	mov	r1, r3
 80013b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013b6:	f000 fc0d 	bl	8001bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_CS_Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin;
 80013ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c8:	2303      	movs	r3, #3
 80013ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4619      	mov	r1, r3
 80013d2:	4808      	ldr	r0, [pc, #32]	@ (80013f4 <MX_GPIO_Init+0x128>)
 80013d4:	f000 fbfe 	bl	8001bd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	2100      	movs	r1, #0
 80013dc:	2017      	movs	r0, #23
 80013de:	f000 fbc2 	bl	8001b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013e2:	2017      	movs	r0, #23
 80013e4:	f000 fbdb 	bl	8001b9e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013e8:	bf00      	nop
 80013ea:	3728      	adds	r7, #40	@ 0x28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40021000 	.word	0x40021000
 80013f4:	48000c00 	.word	0x48000c00
 80013f8:	48001000 	.word	0x48001000

080013fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001400:	b672      	cpsid	i
}
 8001402:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <Error_Handler+0x8>

08001408 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140e:	4b0f      	ldr	r3, [pc, #60]	@ (800144c <HAL_MspInit+0x44>)
 8001410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001412:	4a0e      	ldr	r2, [pc, #56]	@ (800144c <HAL_MspInit+0x44>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6613      	str	r3, [r2, #96]	@ 0x60
 800141a:	4b0c      	ldr	r3, [pc, #48]	@ (800144c <HAL_MspInit+0x44>)
 800141c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001426:	4b09      	ldr	r3, [pc, #36]	@ (800144c <HAL_MspInit+0x44>)
 8001428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800142a:	4a08      	ldr	r2, [pc, #32]	@ (800144c <HAL_MspInit+0x44>)
 800142c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001430:	6593      	str	r3, [r2, #88]	@ 0x58
 8001432:	4b06      	ldr	r3, [pc, #24]	@ (800144c <HAL_MspInit+0x44>)
 8001434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40021000 	.word	0x40021000

08001450 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	@ 0x28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a17      	ldr	r2, [pc, #92]	@ (80014cc <HAL_SPI_MspInit+0x7c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d128      	bne.n	80014c4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001472:	4b17      	ldr	r3, [pc, #92]	@ (80014d0 <HAL_SPI_MspInit+0x80>)
 8001474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001476:	4a16      	ldr	r2, [pc, #88]	@ (80014d0 <HAL_SPI_MspInit+0x80>)
 8001478:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800147c:	6593      	str	r3, [r2, #88]	@ 0x58
 800147e:	4b14      	ldr	r3, [pc, #80]	@ (80014d0 <HAL_SPI_MspInit+0x80>)
 8001480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001482:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800148a:	4b11      	ldr	r3, [pc, #68]	@ (80014d0 <HAL_SPI_MspInit+0x80>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148e:	4a10      	ldr	r2, [pc, #64]	@ (80014d0 <HAL_SPI_MspInit+0x80>)
 8001490:	f043 0304 	orr.w	r3, r3, #4
 8001494:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001496:	4b0e      	ldr	r3, [pc, #56]	@ (80014d0 <HAL_SPI_MspInit+0x80>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149a:	f003 0304 	and.w	r3, r3, #4
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80014a2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80014a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b0:	2303      	movs	r3, #3
 80014b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014b4:	2306      	movs	r3, #6
 80014b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	4619      	mov	r1, r3
 80014be:	4805      	ldr	r0, [pc, #20]	@ (80014d4 <HAL_SPI_MspInit+0x84>)
 80014c0:	f000 fb88 	bl	8001bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80014c4:	bf00      	nop
 80014c6:	3728      	adds	r7, #40	@ 0x28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40003c00 	.word	0x40003c00
 80014d0:	40021000 	.word	0x40021000
 80014d4:	48000800 	.word	0x48000800

080014d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <NMI_Handler+0x4>

080014e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <HardFault_Handler+0x4>

080014e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <MemManage_Handler+0x4>

080014f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <BusFault_Handler+0x4>

080014f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014fc:	bf00      	nop
 80014fe:	e7fd      	b.n	80014fc <UsageFault_Handler+0x4>

08001500 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800152e:	f000 f9fb 	bl	8001928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  dataAvailable=1;
 800153c:	4b03      	ldr	r3, [pc, #12]	@ (800154c <EXTI9_5_IRQHandler+0x14>)
 800153e:	2201      	movs	r2, #1
 8001540:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 8001542:	2040      	movs	r0, #64	@ 0x40
 8001544:	f000 fd20 	bl	8001f88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	200002f8 	.word	0x200002f8

08001550 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	e00a      	b.n	8001578 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001562:	f3af 8000 	nop.w
 8001566:	4601      	mov	r1, r0
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	1c5a      	adds	r2, r3, #1
 800156c:	60ba      	str	r2, [r7, #8]
 800156e:	b2ca      	uxtb	r2, r1
 8001570:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	3301      	adds	r3, #1
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	429a      	cmp	r2, r3
 800157e:	dbf0      	blt.n	8001562 <_read+0x12>
	}

return len;
 8001580:	687b      	ldr	r3, [r7, #4]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b086      	sub	sp, #24
 800158e:	af00      	add	r7, sp, #0
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	e009      	b.n	80015b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	60ba      	str	r2, [r7, #8]
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	3301      	adds	r3, #1
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	dbf1      	blt.n	800159c <_write+0x12>
	}
	return len;
 80015b8:	687b      	ldr	r3, [r7, #4]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <_sbrk>:

caddr_t _sbrk(int incr)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80015cc:	4b11      	ldr	r3, [pc, #68]	@ (8001614 <_sbrk+0x50>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d102      	bne.n	80015da <_sbrk+0x16>
		heap_end = &end;
 80015d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001614 <_sbrk+0x50>)
 80015d6:	4a10      	ldr	r2, [pc, #64]	@ (8001618 <_sbrk+0x54>)
 80015d8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80015da:	4b0e      	ldr	r3, [pc, #56]	@ (8001614 <_sbrk+0x50>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80015e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <_sbrk+0x50>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4413      	add	r3, r2
 80015e8:	466a      	mov	r2, sp
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d907      	bls.n	80015fe <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80015ee:	f002 facf 	bl	8003b90 <__errno>
 80015f2:	4603      	mov	r3, r0
 80015f4:	220c      	movs	r2, #12
 80015f6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80015f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015fc:	e006      	b.n	800160c <_sbrk+0x48>
	}

	heap_end += incr;
 80015fe:	4b05      	ldr	r3, [pc, #20]	@ (8001614 <_sbrk+0x50>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	4a03      	ldr	r2, [pc, #12]	@ (8001614 <_sbrk+0x50>)
 8001608:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800160a:	68fb      	ldr	r3, [r7, #12]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000378 	.word	0x20000378
 8001618:	200004d0 	.word	0x200004d0

0800161c <_close>:

int _close(int file)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	return -1;
 8001624:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001628:	4618      	mov	r0, r3
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001644:	605a      	str	r2, [r3, #4]
	return 0;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <_isatty>:

int _isatty(int file)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	return 1;
 800165c:	2301      	movs	r3, #1
}
 800165e:	4618      	mov	r0, r3
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800166a:	b480      	push	{r7}
 800166c:	b085      	sub	sp, #20
 800166e:	af00      	add	r7, sp, #0
 8001670:	60f8      	str	r0, [r7, #12]
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
	return 0;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001688:	4b17      	ldr	r3, [pc, #92]	@ (80016e8 <SystemInit+0x64>)
 800168a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800168e:	4a16      	ldr	r2, [pc, #88]	@ (80016e8 <SystemInit+0x64>)
 8001690:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001694:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001698:	4b14      	ldr	r3, [pc, #80]	@ (80016ec <SystemInit+0x68>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a13      	ldr	r2, [pc, #76]	@ (80016ec <SystemInit+0x68>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80016a4:	4b11      	ldr	r3, [pc, #68]	@ (80016ec <SystemInit+0x68>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80016aa:	4b10      	ldr	r3, [pc, #64]	@ (80016ec <SystemInit+0x68>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a0f      	ldr	r2, [pc, #60]	@ (80016ec <SystemInit+0x68>)
 80016b0:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80016b4:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80016b8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80016ba:	4b0c      	ldr	r3, [pc, #48]	@ (80016ec <SystemInit+0x68>)
 80016bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80016c0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016c2:	4b0a      	ldr	r3, [pc, #40]	@ (80016ec <SystemInit+0x68>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a09      	ldr	r2, [pc, #36]	@ (80016ec <SystemInit+0x68>)
 80016c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016cc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80016ce:	4b07      	ldr	r3, [pc, #28]	@ (80016ec <SystemInit+0x68>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016d4:	4b04      	ldr	r3, [pc, #16]	@ (80016e8 <SystemInit+0x64>)
 80016d6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80016da:	609a      	str	r2, [r3, #8]
#endif
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000ed00 	.word	0xe000ed00
 80016ec:	40021000 	.word	0x40021000

080016f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	db0b      	blt.n	800171a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	f003 021f 	and.w	r2, r3, #31
 8001708:	4907      	ldr	r1, [pc, #28]	@ (8001728 <__NVIC_EnableIRQ+0x38>)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	095b      	lsrs	r3, r3, #5
 8001710:	2001      	movs	r0, #1
 8001712:	fa00 f202 	lsl.w	r2, r0, r2
 8001716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000e100 	.word	0xe000e100

0800172c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	6039      	str	r1, [r7, #0]
 8001736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173c:	2b00      	cmp	r3, #0
 800173e:	db0a      	blt.n	8001756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	b2da      	uxtb	r2, r3
 8001744:	490c      	ldr	r1, [pc, #48]	@ (8001778 <__NVIC_SetPriority+0x4c>)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	0112      	lsls	r2, r2, #4
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	440b      	add	r3, r1
 8001750:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001754:	e00a      	b.n	800176c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4908      	ldr	r1, [pc, #32]	@ (800177c <__NVIC_SetPriority+0x50>)
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	3b04      	subs	r3, #4
 8001764:	0112      	lsls	r2, r2, #4
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	440b      	add	r3, r1
 800176a:	761a      	strb	r2, [r3, #24]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000e100 	.word	0xe000e100
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <timer_init>:
 */

#include "timer.h"


void timer_init(TIM_TypeDef *timer) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
    // Enable clock for TIM2
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 8001788:	4b17      	ldr	r3, [pc, #92]	@ (80017e8 <timer_init+0x68>)
 800178a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178c:	4a16      	ldr	r2, [pc, #88]	@ (80017e8 <timer_init+0x68>)
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	6593      	str	r3, [r2, #88]	@ 0x58

	// Step 1:
    // Reset timer
	timer->CR1 &= ~TIM_CR1_CEN;     // Stop the timer and reset control register
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f023 0201 	bic.w	r2, r3, #1
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	601a      	str	r2, [r3, #0]
    timer->SR = 0;	    			// Reset status register
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	611a      	str	r2, [r3, #16]
    timer->CNT = 0;     			// Reset counter
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	625a      	str	r2, [r3, #36]	@ 0x24

    // Step 2:
    // Set auto-reload to max initially (will be configured in timer_set_ms)
    timer->ARR = 0xFFFFFFFF;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Step 3:
    // Enable interrupt for update event
    timer->DIER |= TIM_DIER_UIE;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	f043 0201 	orr.w	r2, r3, #1
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	60da      	str	r2, [r3, #12]

    // Enable TIM2 interrupt in NVIC
    NVIC_EnableIRQ(TIM2_IRQn);
 80017c0:	201c      	movs	r0, #28
 80017c2:	f7ff ff95 	bl	80016f0 <__NVIC_EnableIRQ>
    NVIC_SetPriority(TIM2_IRQn, 1);
 80017c6:	2101      	movs	r1, #1
 80017c8:	201c      	movs	r0, #28
 80017ca:	f7ff ffaf 	bl	800172c <__NVIC_SetPriority>

    // Step 4:
    // Prescaler for a 1 kHz clock (8 MHz / 8000)
    timer->PSC = 99;  // Prescaler is off by 1 because it’s 0-based
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2263      	movs	r2, #99	@ 0x63
 80017d2:	629a      	str	r2, [r3, #40]	@ 0x28

    // Step 5:
    // Enable the timer
    timer->CR1 |= TIM_CR1_CEN;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f043 0201 	orr.w	r2, r3, #1
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	601a      	str	r2, [r3, #0]
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40021000 	.word	0x40021000

080017ec <timer_reset>:

void timer_reset(TIM_TypeDef *timer) {
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
    timer->CNT = 0;  // Reset counter to 0
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <timer_set_ms>:

void timer_set_ms(TIM_TypeDef *timer, uint16_t period_ms) {
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
 800180e:	460b      	mov	r3, r1
 8001810:	807b      	strh	r3, [r7, #2]

	timer_reset(timer);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff ffea 	bl	80017ec <timer_reset>

    // Set the auto-reload value for the desired period (1 kHz clock, so period = ms)
    timer->ARR = period_ms - 1;
 8001818:	887b      	ldrh	r3, [r7, #2]
 800181a:	3b01      	subs	r3, #1
 800181c:	461a      	mov	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800182c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001864 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001830:	f7ff ff28 	bl	8001684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001834:	480c      	ldr	r0, [pc, #48]	@ (8001868 <LoopForever+0x6>)
  ldr r1, =_edata
 8001836:	490d      	ldr	r1, [pc, #52]	@ (800186c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001838:	4a0d      	ldr	r2, [pc, #52]	@ (8001870 <LoopForever+0xe>)
  movs r3, #0
 800183a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800183c:	e002      	b.n	8001844 <LoopCopyDataInit>

0800183e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800183e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001842:	3304      	adds	r3, #4

08001844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001848:	d3f9      	bcc.n	800183e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800184a:	4a0a      	ldr	r2, [pc, #40]	@ (8001874 <LoopForever+0x12>)
  ldr r4, =_ebss
 800184c:	4c0a      	ldr	r4, [pc, #40]	@ (8001878 <LoopForever+0x16>)
  movs r3, #0
 800184e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001850:	e001      	b.n	8001856 <LoopFillZerobss>

08001852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001854:	3204      	adds	r2, #4

08001856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001858:	d3fb      	bcc.n	8001852 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800185a:	f002 f99f 	bl	8003b9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800185e:	f7ff fc3f 	bl	80010e0 <main>

08001862 <LoopForever>:

LoopForever:
    b LoopForever
 8001862:	e7fe      	b.n	8001862 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001864:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800186c:	200001c0 	.word	0x200001c0
  ldr r2, =_sidata
 8001870:	080048c0 	.word	0x080048c0
  ldr r2, =_sbss
 8001874:	200001c0 	.word	0x200001c0
  ldr r4, =_ebss
 8001878:	200004cc 	.word	0x200004cc

0800187c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800187c:	e7fe      	b.n	800187c <ADC1_2_IRQHandler>

0800187e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001884:	2300      	movs	r3, #0
 8001886:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001888:	2003      	movs	r0, #3
 800188a:	f000 f961 	bl	8001b50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800188e:	2000      	movs	r0, #0
 8001890:	f000 f80e 	bl	80018b0 <HAL_InitTick>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d002      	beq.n	80018a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	71fb      	strb	r3, [r7, #7]
 800189e:	e001      	b.n	80018a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018a0:	f7ff fdb2 	bl	8001408 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018a4:	79fb      	ldrb	r3, [r7, #7]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018b8:	2300      	movs	r3, #0
 80018ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018bc:	4b17      	ldr	r3, [pc, #92]	@ (800191c <HAL_InitTick+0x6c>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d023      	beq.n	800190c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018c4:	4b16      	ldr	r3, [pc, #88]	@ (8001920 <HAL_InitTick+0x70>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b14      	ldr	r3, [pc, #80]	@ (800191c <HAL_InitTick+0x6c>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	4619      	mov	r1, r3
 80018ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 f96d 	bl	8001bba <HAL_SYSTICK_Config>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10f      	bne.n	8001906 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b0f      	cmp	r3, #15
 80018ea:	d809      	bhi.n	8001900 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018ec:	2200      	movs	r2, #0
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018f4:	f000 f937 	bl	8001b66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001924 <HAL_InitTick+0x74>)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	e007      	b.n	8001910 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	73fb      	strb	r3, [r7, #15]
 8001904:	e004      	b.n	8001910 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	73fb      	strb	r3, [r7, #15]
 800190a:	e001      	b.n	8001910 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001910:	7bfb      	ldrb	r3, [r7, #15]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000160 	.word	0x20000160
 8001920:	20000158 	.word	0x20000158
 8001924:	2000015c 	.word	0x2000015c

08001928 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800192c:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <HAL_IncTick+0x20>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	461a      	mov	r2, r3
 8001932:	4b06      	ldr	r3, [pc, #24]	@ (800194c <HAL_IncTick+0x24>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4413      	add	r3, r2
 8001938:	4a04      	ldr	r2, [pc, #16]	@ (800194c <HAL_IncTick+0x24>)
 800193a:	6013      	str	r3, [r2, #0]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20000160 	.word	0x20000160
 800194c:	2000037c 	.word	0x2000037c

08001950 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return uwTick;
 8001954:	4b03      	ldr	r3, [pc, #12]	@ (8001964 <HAL_GetTick+0x14>)
 8001956:	681b      	ldr	r3, [r3, #0]
}
 8001958:	4618      	mov	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	2000037c 	.word	0x2000037c

08001968 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001970:	f7ff ffee 	bl	8001950 <HAL_GetTick>
 8001974:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001980:	d005      	beq.n	800198e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001982:	4b0a      	ldr	r3, [pc, #40]	@ (80019ac <HAL_Delay+0x44>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	461a      	mov	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4413      	add	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800198e:	bf00      	nop
 8001990:	f7ff ffde 	bl	8001950 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	429a      	cmp	r2, r3
 800199e:	d8f7      	bhi.n	8001990 <HAL_Delay+0x28>
  {
  }
}
 80019a0:	bf00      	nop
 80019a2:	bf00      	nop
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000160 	.word	0x20000160

080019b0 <__NVIC_SetPriorityGrouping>:
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c0:	4b0c      	ldr	r3, [pc, #48]	@ (80019f4 <__NVIC_SetPriorityGrouping+0x44>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019cc:	4013      	ands	r3, r2
 80019ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019e2:	4a04      	ldr	r2, [pc, #16]	@ (80019f4 <__NVIC_SetPriorityGrouping+0x44>)
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	60d3      	str	r3, [r2, #12]
}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <__NVIC_GetPriorityGrouping>:
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019fc:	4b04      	ldr	r3, [pc, #16]	@ (8001a10 <__NVIC_GetPriorityGrouping+0x18>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	0a1b      	lsrs	r3, r3, #8
 8001a02:	f003 0307 	and.w	r3, r3, #7
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <__NVIC_EnableIRQ>:
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	db0b      	blt.n	8001a3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	f003 021f 	and.w	r2, r3, #31
 8001a2c:	4907      	ldr	r1, [pc, #28]	@ (8001a4c <__NVIC_EnableIRQ+0x38>)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	095b      	lsrs	r3, r3, #5
 8001a34:	2001      	movs	r0, #1
 8001a36:	fa00 f202 	lsl.w	r2, r0, r2
 8001a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	e000e100 	.word	0xe000e100

08001a50 <__NVIC_SetPriority>:
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	6039      	str	r1, [r7, #0]
 8001a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	db0a      	blt.n	8001a7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	490c      	ldr	r1, [pc, #48]	@ (8001a9c <__NVIC_SetPriority+0x4c>)
 8001a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6e:	0112      	lsls	r2, r2, #4
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	440b      	add	r3, r1
 8001a74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001a78:	e00a      	b.n	8001a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	4908      	ldr	r1, [pc, #32]	@ (8001aa0 <__NVIC_SetPriority+0x50>)
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	3b04      	subs	r3, #4
 8001a88:	0112      	lsls	r2, r2, #4
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	761a      	strb	r2, [r3, #24]
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	e000e100 	.word	0xe000e100
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b089      	sub	sp, #36	@ 0x24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f1c3 0307 	rsb	r3, r3, #7
 8001abe:	2b04      	cmp	r3, #4
 8001ac0:	bf28      	it	cs
 8001ac2:	2304      	movcs	r3, #4
 8001ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	3304      	adds	r3, #4
 8001aca:	2b06      	cmp	r3, #6
 8001acc:	d902      	bls.n	8001ad4 <NVIC_EncodePriority+0x30>
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	3b03      	subs	r3, #3
 8001ad2:	e000      	b.n	8001ad6 <NVIC_EncodePriority+0x32>
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43da      	mvns	r2, r3
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	401a      	ands	r2, r3
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	fa01 f303 	lsl.w	r3, r1, r3
 8001af6:	43d9      	mvns	r1, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001afc:	4313      	orrs	r3, r2
         );
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3724      	adds	r7, #36	@ 0x24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
	...

08001b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b1c:	d301      	bcc.n	8001b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e00f      	b.n	8001b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b22:	4a0a      	ldr	r2, [pc, #40]	@ (8001b4c <SysTick_Config+0x40>)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b2a:	210f      	movs	r1, #15
 8001b2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b30:	f7ff ff8e 	bl	8001a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b34:	4b05      	ldr	r3, [pc, #20]	@ (8001b4c <SysTick_Config+0x40>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b3a:	4b04      	ldr	r3, [pc, #16]	@ (8001b4c <SysTick_Config+0x40>)
 8001b3c:	2207      	movs	r2, #7
 8001b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	e000e010 	.word	0xe000e010

08001b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff ff29 	bl	80019b0 <__NVIC_SetPriorityGrouping>
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b086      	sub	sp, #24
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	60b9      	str	r1, [r7, #8]
 8001b70:	607a      	str	r2, [r7, #4]
 8001b72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b78:	f7ff ff3e 	bl	80019f8 <__NVIC_GetPriorityGrouping>
 8001b7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	68b9      	ldr	r1, [r7, #8]
 8001b82:	6978      	ldr	r0, [r7, #20]
 8001b84:	f7ff ff8e 	bl	8001aa4 <NVIC_EncodePriority>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b8e:	4611      	mov	r1, r2
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff5d 	bl	8001a50 <__NVIC_SetPriority>
}
 8001b96:	bf00      	nop
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff31 	bl	8001a14 <__NVIC_EnableIRQ>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff ffa2 	bl	8001b0c <SysTick_Config>
 8001bc8:	4603      	mov	r3, r0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b087      	sub	sp, #28
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001be2:	e17f      	b.n	8001ee4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	2101      	movs	r1, #1
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f000 8171 	beq.w	8001ede <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 0303 	and.w	r3, r3, #3
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d005      	beq.n	8001c14 <HAL_GPIO_Init+0x40>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d130      	bne.n	8001c76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	2203      	movs	r2, #3
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	68da      	ldr	r2, [r3, #12]
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43db      	mvns	r3, r3
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	4013      	ands	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	091b      	lsrs	r3, r3, #4
 8001c60:	f003 0201 	and.w	r2, r3, #1
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	2b03      	cmp	r3, #3
 8001c80:	d118      	bne.n	8001cb4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c88:	2201      	movs	r2, #1
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4013      	ands	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	08db      	lsrs	r3, r3, #3
 8001c9e:	f003 0201 	and.w	r2, r3, #1
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 0303 	and.w	r3, r3, #3
 8001cbc:	2b03      	cmp	r3, #3
 8001cbe:	d017      	beq.n	8001cf0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	2203      	movs	r2, #3
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d123      	bne.n	8001d44 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	08da      	lsrs	r2, r3, #3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3208      	adds	r2, #8
 8001d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d08:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	220f      	movs	r2, #15
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	691a      	ldr	r2, [r3, #16]
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	08da      	lsrs	r2, r3, #3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	3208      	adds	r2, #8
 8001d3e:	6939      	ldr	r1, [r7, #16]
 8001d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	2203      	movs	r2, #3
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 0203 	and.w	r2, r3, #3
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 80ac 	beq.w	8001ede <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d86:	4b5f      	ldr	r3, [pc, #380]	@ (8001f04 <HAL_GPIO_Init+0x330>)
 8001d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d8a:	4a5e      	ldr	r2, [pc, #376]	@ (8001f04 <HAL_GPIO_Init+0x330>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d92:	4b5c      	ldr	r3, [pc, #368]	@ (8001f04 <HAL_GPIO_Init+0x330>)
 8001d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d9e:	4a5a      	ldr	r2, [pc, #360]	@ (8001f08 <HAL_GPIO_Init+0x334>)
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	089b      	lsrs	r3, r3, #2
 8001da4:	3302      	adds	r3, #2
 8001da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001daa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	220f      	movs	r2, #15
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001dc8:	d025      	beq.n	8001e16 <HAL_GPIO_Init+0x242>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a4f      	ldr	r2, [pc, #316]	@ (8001f0c <HAL_GPIO_Init+0x338>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d01f      	beq.n	8001e12 <HAL_GPIO_Init+0x23e>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a4e      	ldr	r2, [pc, #312]	@ (8001f10 <HAL_GPIO_Init+0x33c>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d019      	beq.n	8001e0e <HAL_GPIO_Init+0x23a>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a4d      	ldr	r2, [pc, #308]	@ (8001f14 <HAL_GPIO_Init+0x340>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d013      	beq.n	8001e0a <HAL_GPIO_Init+0x236>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a4c      	ldr	r2, [pc, #304]	@ (8001f18 <HAL_GPIO_Init+0x344>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d00d      	beq.n	8001e06 <HAL_GPIO_Init+0x232>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a4b      	ldr	r2, [pc, #300]	@ (8001f1c <HAL_GPIO_Init+0x348>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d007      	beq.n	8001e02 <HAL_GPIO_Init+0x22e>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a4a      	ldr	r2, [pc, #296]	@ (8001f20 <HAL_GPIO_Init+0x34c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d101      	bne.n	8001dfe <HAL_GPIO_Init+0x22a>
 8001dfa:	2306      	movs	r3, #6
 8001dfc:	e00c      	b.n	8001e18 <HAL_GPIO_Init+0x244>
 8001dfe:	2307      	movs	r3, #7
 8001e00:	e00a      	b.n	8001e18 <HAL_GPIO_Init+0x244>
 8001e02:	2305      	movs	r3, #5
 8001e04:	e008      	b.n	8001e18 <HAL_GPIO_Init+0x244>
 8001e06:	2304      	movs	r3, #4
 8001e08:	e006      	b.n	8001e18 <HAL_GPIO_Init+0x244>
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e004      	b.n	8001e18 <HAL_GPIO_Init+0x244>
 8001e0e:	2302      	movs	r3, #2
 8001e10:	e002      	b.n	8001e18 <HAL_GPIO_Init+0x244>
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <HAL_GPIO_Init+0x244>
 8001e16:	2300      	movs	r3, #0
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	f002 0203 	and.w	r2, r2, #3
 8001e1e:	0092      	lsls	r2, r2, #2
 8001e20:	4093      	lsls	r3, r2
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e28:	4937      	ldr	r1, [pc, #220]	@ (8001f08 <HAL_GPIO_Init+0x334>)
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	089b      	lsrs	r3, r3, #2
 8001e2e:	3302      	adds	r3, #2
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e36:	4b3b      	ldr	r3, [pc, #236]	@ (8001f24 <HAL_GPIO_Init+0x350>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4013      	ands	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e5a:	4a32      	ldr	r2, [pc, #200]	@ (8001f24 <HAL_GPIO_Init+0x350>)
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e60:	4b30      	ldr	r3, [pc, #192]	@ (8001f24 <HAL_GPIO_Init+0x350>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e84:	4a27      	ldr	r2, [pc, #156]	@ (8001f24 <HAL_GPIO_Init+0x350>)
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e8a:	4b26      	ldr	r3, [pc, #152]	@ (8001f24 <HAL_GPIO_Init+0x350>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	43db      	mvns	r3, r3
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	4013      	ands	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001eae:	4a1d      	ldr	r2, [pc, #116]	@ (8001f24 <HAL_GPIO_Init+0x350>)
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f24 <HAL_GPIO_Init+0x350>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ed8:	4a12      	ldr	r2, [pc, #72]	@ (8001f24 <HAL_GPIO_Init+0x350>)
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	fa22 f303 	lsr.w	r3, r2, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f47f ae78 	bne.w	8001be4 <HAL_GPIO_Init+0x10>
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	371c      	adds	r7, #28
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40010000 	.word	0x40010000
 8001f0c:	48000400 	.word	0x48000400
 8001f10:	48000800 	.word	0x48000800
 8001f14:	48000c00 	.word	0x48000c00
 8001f18:	48001000 	.word	0x48001000
 8001f1c:	48001400 	.word	0x48001400
 8001f20:	48001800 	.word	0x48001800
 8001f24:	40010400 	.word	0x40010400

08001f28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	460b      	mov	r3, r1
 8001f32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	691a      	ldr	r2, [r3, #16]
 8001f38:	887b      	ldrh	r3, [r7, #2]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d002      	beq.n	8001f46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f40:	2301      	movs	r3, #1
 8001f42:	73fb      	strb	r3, [r7, #15]
 8001f44:	e001      	b.n	8001f4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f46:	2300      	movs	r3, #0
 8001f48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	807b      	strh	r3, [r7, #2]
 8001f64:	4613      	mov	r3, r2
 8001f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f68:	787b      	ldrb	r3, [r7, #1]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f6e:	887a      	ldrh	r2, [r7, #2]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f74:	e002      	b.n	8001f7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f76:	887a      	ldrh	r2, [r7, #2]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f92:	4b08      	ldr	r3, [pc, #32]	@ (8001fb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f94:	695a      	ldr	r2, [r3, #20]
 8001f96:	88fb      	ldrh	r3, [r7, #6]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d006      	beq.n	8001fac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f9e:	4a05      	ldr	r2, [pc, #20]	@ (8001fb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fa0:	88fb      	ldrh	r3, [r7, #6]
 8001fa2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fa4:	88fb      	ldrh	r3, [r7, #6]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 f806 	bl	8001fb8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fac:	bf00      	nop
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40010400 	.word	0x40010400

08001fb8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
	...

08001fd0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001fd4:	4b04      	ldr	r3, [pc, #16]	@ (8001fe8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40007000 	.word	0x40007000

08001fec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ffa:	d130      	bne.n	800205e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ffc:	4b23      	ldr	r3, [pc, #140]	@ (800208c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002008:	d038      	beq.n	800207c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800200a:	4b20      	ldr	r3, [pc, #128]	@ (800208c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002012:	4a1e      	ldr	r2, [pc, #120]	@ (800208c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002014:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002018:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800201a:	4b1d      	ldr	r3, [pc, #116]	@ (8002090 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2232      	movs	r2, #50	@ 0x32
 8002020:	fb02 f303 	mul.w	r3, r2, r3
 8002024:	4a1b      	ldr	r2, [pc, #108]	@ (8002094 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002026:	fba2 2303 	umull	r2, r3, r2, r3
 800202a:	0c9b      	lsrs	r3, r3, #18
 800202c:	3301      	adds	r3, #1
 800202e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002030:	e002      	b.n	8002038 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	3b01      	subs	r3, #1
 8002036:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002038:	4b14      	ldr	r3, [pc, #80]	@ (800208c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002040:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002044:	d102      	bne.n	800204c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1f2      	bne.n	8002032 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800204c:	4b0f      	ldr	r3, [pc, #60]	@ (800208c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002054:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002058:	d110      	bne.n	800207c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e00f      	b.n	800207e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800205e:	4b0b      	ldr	r3, [pc, #44]	@ (800208c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002066:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800206a:	d007      	beq.n	800207c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800206c:	4b07      	ldr	r3, [pc, #28]	@ (800208c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002074:	4a05      	ldr	r2, [pc, #20]	@ (800208c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002076:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800207a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	40007000 	.word	0x40007000
 8002090:	20000158 	.word	0x20000158
 8002094:	431bde83 	.word	0x431bde83

08002098 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e3ca      	b.n	8002840 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020aa:	4b97      	ldr	r3, [pc, #604]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 030c 	and.w	r3, r3, #12
 80020b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020b4:	4b94      	ldr	r3, [pc, #592]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f003 0303 	and.w	r3, r3, #3
 80020bc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0310 	and.w	r3, r3, #16
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 80e4 	beq.w	8002294 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d007      	beq.n	80020e2 <HAL_RCC_OscConfig+0x4a>
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	2b0c      	cmp	r3, #12
 80020d6:	f040 808b 	bne.w	80021f0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	f040 8087 	bne.w	80021f0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020e2:	4b89      	ldr	r3, [pc, #548]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d005      	beq.n	80020fa <HAL_RCC_OscConfig+0x62>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e3a2      	b.n	8002840 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a1a      	ldr	r2, [r3, #32]
 80020fe:	4b82      	ldr	r3, [pc, #520]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b00      	cmp	r3, #0
 8002108:	d004      	beq.n	8002114 <HAL_RCC_OscConfig+0x7c>
 800210a:	4b7f      	ldr	r3, [pc, #508]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002112:	e005      	b.n	8002120 <HAL_RCC_OscConfig+0x88>
 8002114:	4b7c      	ldr	r3, [pc, #496]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 8002116:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800211a:	091b      	lsrs	r3, r3, #4
 800211c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002120:	4293      	cmp	r3, r2
 8002122:	d223      	bcs.n	800216c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	4618      	mov	r0, r3
 800212a:	f000 fd1d 	bl	8002b68 <RCC_SetFlashLatencyFromMSIRange>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e383      	b.n	8002840 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002138:	4b73      	ldr	r3, [pc, #460]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a72      	ldr	r2, [pc, #456]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 800213e:	f043 0308 	orr.w	r3, r3, #8
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	4b70      	ldr	r3, [pc, #448]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	496d      	ldr	r1, [pc, #436]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 8002152:	4313      	orrs	r3, r2
 8002154:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002156:	4b6c      	ldr	r3, [pc, #432]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	021b      	lsls	r3, r3, #8
 8002164:	4968      	ldr	r1, [pc, #416]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 8002166:	4313      	orrs	r3, r2
 8002168:	604b      	str	r3, [r1, #4]
 800216a:	e025      	b.n	80021b8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800216c:	4b66      	ldr	r3, [pc, #408]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a65      	ldr	r2, [pc, #404]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 8002172:	f043 0308 	orr.w	r3, r3, #8
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	4b63      	ldr	r3, [pc, #396]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	4960      	ldr	r1, [pc, #384]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 8002186:	4313      	orrs	r3, r2
 8002188:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800218a:	4b5f      	ldr	r3, [pc, #380]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	021b      	lsls	r3, r3, #8
 8002198:	495b      	ldr	r1, [pc, #364]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 800219a:	4313      	orrs	r3, r2
 800219c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d109      	bne.n	80021b8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f000 fcdd 	bl	8002b68 <RCC_SetFlashLatencyFromMSIRange>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e343      	b.n	8002840 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021b8:	f000 fc4a 	bl	8002a50 <HAL_RCC_GetSysClockFreq>
 80021bc:	4602      	mov	r2, r0
 80021be:	4b52      	ldr	r3, [pc, #328]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	091b      	lsrs	r3, r3, #4
 80021c4:	f003 030f 	and.w	r3, r3, #15
 80021c8:	4950      	ldr	r1, [pc, #320]	@ (800230c <HAL_RCC_OscConfig+0x274>)
 80021ca:	5ccb      	ldrb	r3, [r1, r3]
 80021cc:	f003 031f 	and.w	r3, r3, #31
 80021d0:	fa22 f303 	lsr.w	r3, r2, r3
 80021d4:	4a4e      	ldr	r2, [pc, #312]	@ (8002310 <HAL_RCC_OscConfig+0x278>)
 80021d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021d8:	4b4e      	ldr	r3, [pc, #312]	@ (8002314 <HAL_RCC_OscConfig+0x27c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff fb67 	bl	80018b0 <HAL_InitTick>
 80021e2:	4603      	mov	r3, r0
 80021e4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d052      	beq.n	8002292 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
 80021ee:	e327      	b.n	8002840 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d032      	beq.n	800225e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021f8:	4b43      	ldr	r3, [pc, #268]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a42      	ldr	r2, [pc, #264]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002204:	f7ff fba4 	bl	8001950 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800220c:	f7ff fba0 	bl	8001950 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e310      	b.n	8002840 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800221e:	4b3a      	ldr	r3, [pc, #232]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0f0      	beq.n	800220c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800222a:	4b37      	ldr	r3, [pc, #220]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a36      	ldr	r2, [pc, #216]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 8002230:	f043 0308 	orr.w	r3, r3, #8
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	4b34      	ldr	r3, [pc, #208]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	4931      	ldr	r1, [pc, #196]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 8002244:	4313      	orrs	r3, r2
 8002246:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002248:	4b2f      	ldr	r3, [pc, #188]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	021b      	lsls	r3, r3, #8
 8002256:	492c      	ldr	r1, [pc, #176]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 8002258:	4313      	orrs	r3, r2
 800225a:	604b      	str	r3, [r1, #4]
 800225c:	e01a      	b.n	8002294 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800225e:	4b2a      	ldr	r3, [pc, #168]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a29      	ldr	r2, [pc, #164]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 8002264:	f023 0301 	bic.w	r3, r3, #1
 8002268:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800226a:	f7ff fb71 	bl	8001950 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002272:	f7ff fb6d 	bl	8001950 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e2dd      	b.n	8002840 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002284:	4b20      	ldr	r3, [pc, #128]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1f0      	bne.n	8002272 <HAL_RCC_OscConfig+0x1da>
 8002290:	e000      	b.n	8002294 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002292:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b00      	cmp	r3, #0
 800229e:	d074      	beq.n	800238a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	2b08      	cmp	r3, #8
 80022a4:	d005      	beq.n	80022b2 <HAL_RCC_OscConfig+0x21a>
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	2b0c      	cmp	r3, #12
 80022aa:	d10e      	bne.n	80022ca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	2b03      	cmp	r3, #3
 80022b0:	d10b      	bne.n	80022ca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b2:	4b15      	ldr	r3, [pc, #84]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d064      	beq.n	8002388 <HAL_RCC_OscConfig+0x2f0>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d160      	bne.n	8002388 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e2ba      	b.n	8002840 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022d2:	d106      	bne.n	80022e2 <HAL_RCC_OscConfig+0x24a>
 80022d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a0b      	ldr	r2, [pc, #44]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 80022da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	e026      	b.n	8002330 <HAL_RCC_OscConfig+0x298>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022ea:	d115      	bne.n	8002318 <HAL_RCC_OscConfig+0x280>
 80022ec:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a05      	ldr	r2, [pc, #20]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 80022f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	4b03      	ldr	r3, [pc, #12]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a02      	ldr	r2, [pc, #8]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 80022fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002302:	6013      	str	r3, [r2, #0]
 8002304:	e014      	b.n	8002330 <HAL_RCC_OscConfig+0x298>
 8002306:	bf00      	nop
 8002308:	40021000 	.word	0x40021000
 800230c:	0800483c 	.word	0x0800483c
 8002310:	20000158 	.word	0x20000158
 8002314:	2000015c 	.word	0x2000015c
 8002318:	4ba0      	ldr	r3, [pc, #640]	@ (800259c <HAL_RCC_OscConfig+0x504>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a9f      	ldr	r2, [pc, #636]	@ (800259c <HAL_RCC_OscConfig+0x504>)
 800231e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002322:	6013      	str	r3, [r2, #0]
 8002324:	4b9d      	ldr	r3, [pc, #628]	@ (800259c <HAL_RCC_OscConfig+0x504>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a9c      	ldr	r2, [pc, #624]	@ (800259c <HAL_RCC_OscConfig+0x504>)
 800232a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800232e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d013      	beq.n	8002360 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002338:	f7ff fb0a 	bl	8001950 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002340:	f7ff fb06 	bl	8001950 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b64      	cmp	r3, #100	@ 0x64
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e276      	b.n	8002840 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002352:	4b92      	ldr	r3, [pc, #584]	@ (800259c <HAL_RCC_OscConfig+0x504>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0f0      	beq.n	8002340 <HAL_RCC_OscConfig+0x2a8>
 800235e:	e014      	b.n	800238a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002360:	f7ff faf6 	bl	8001950 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002368:	f7ff faf2 	bl	8001950 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b64      	cmp	r3, #100	@ 0x64
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e262      	b.n	8002840 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800237a:	4b88      	ldr	r3, [pc, #544]	@ (800259c <HAL_RCC_OscConfig+0x504>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f0      	bne.n	8002368 <HAL_RCC_OscConfig+0x2d0>
 8002386:	e000      	b.n	800238a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d060      	beq.n	8002458 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	2b04      	cmp	r3, #4
 800239a:	d005      	beq.n	80023a8 <HAL_RCC_OscConfig+0x310>
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	2b0c      	cmp	r3, #12
 80023a0:	d119      	bne.n	80023d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d116      	bne.n	80023d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023a8:	4b7c      	ldr	r3, [pc, #496]	@ (800259c <HAL_RCC_OscConfig+0x504>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_RCC_OscConfig+0x328>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e23f      	b.n	8002840 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c0:	4b76      	ldr	r3, [pc, #472]	@ (800259c <HAL_RCC_OscConfig+0x504>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	061b      	lsls	r3, r3, #24
 80023ce:	4973      	ldr	r1, [pc, #460]	@ (800259c <HAL_RCC_OscConfig+0x504>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023d4:	e040      	b.n	8002458 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d023      	beq.n	8002426 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023de:	4b6f      	ldr	r3, [pc, #444]	@ (800259c <HAL_RCC_OscConfig+0x504>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a6e      	ldr	r2, [pc, #440]	@ (800259c <HAL_RCC_OscConfig+0x504>)
 80023e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ea:	f7ff fab1 	bl	8001950 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023f2:	f7ff faad 	bl	8001950 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e21d      	b.n	8002840 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002404:	4b65      	ldr	r3, [pc, #404]	@ (800259c <HAL_RCC_OscConfig+0x504>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0f0      	beq.n	80023f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002410:	4b62      	ldr	r3, [pc, #392]	@ (800259c <HAL_RCC_OscConfig+0x504>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	061b      	lsls	r3, r3, #24
 800241e:	495f      	ldr	r1, [pc, #380]	@ (800259c <HAL_RCC_OscConfig+0x504>)
 8002420:	4313      	orrs	r3, r2
 8002422:	604b      	str	r3, [r1, #4]
 8002424:	e018      	b.n	8002458 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002426:	4b5d      	ldr	r3, [pc, #372]	@ (800259c <HAL_RCC_OscConfig+0x504>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a5c      	ldr	r2, [pc, #368]	@ (800259c <HAL_RCC_OscConfig+0x504>)
 800242c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002430:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002432:	f7ff fa8d 	bl	8001950 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800243a:	f7ff fa89 	bl	8001950 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e1f9      	b.n	8002840 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800244c:	4b53      	ldr	r3, [pc, #332]	@ (800259c <HAL_RCC_OscConfig+0x504>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1f0      	bne.n	800243a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	2b00      	cmp	r3, #0
 8002462:	d03c      	beq.n	80024de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d01c      	beq.n	80024a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800246c:	4b4b      	ldr	r3, [pc, #300]	@ (800259c <HAL_RCC_OscConfig+0x504>)
 800246e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002472:	4a4a      	ldr	r2, [pc, #296]	@ (800259c <HAL_RCC_OscConfig+0x504>)
 8002474:	f043 0301 	orr.w	r3, r3, #1
 8002478:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800247c:	f7ff fa68 	bl	8001950 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002484:	f7ff fa64 	bl	8001950 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e1d4      	b.n	8002840 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002496:	4b41      	ldr	r3, [pc, #260]	@ (800259c <HAL_RCC_OscConfig+0x504>)
 8002498:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0ef      	beq.n	8002484 <HAL_RCC_OscConfig+0x3ec>
 80024a4:	e01b      	b.n	80024de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024a6:	4b3d      	ldr	r3, [pc, #244]	@ (800259c <HAL_RCC_OscConfig+0x504>)
 80024a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024ac:	4a3b      	ldr	r2, [pc, #236]	@ (800259c <HAL_RCC_OscConfig+0x504>)
 80024ae:	f023 0301 	bic.w	r3, r3, #1
 80024b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b6:	f7ff fa4b 	bl	8001950 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024be:	f7ff fa47 	bl	8001950 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e1b7      	b.n	8002840 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024d0:	4b32      	ldr	r3, [pc, #200]	@ (800259c <HAL_RCC_OscConfig+0x504>)
 80024d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1ef      	bne.n	80024be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0304 	and.w	r3, r3, #4
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 80a6 	beq.w	8002638 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ec:	2300      	movs	r3, #0
 80024ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024f0:	4b2a      	ldr	r3, [pc, #168]	@ (800259c <HAL_RCC_OscConfig+0x504>)
 80024f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10d      	bne.n	8002518 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024fc:	4b27      	ldr	r3, [pc, #156]	@ (800259c <HAL_RCC_OscConfig+0x504>)
 80024fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002500:	4a26      	ldr	r2, [pc, #152]	@ (800259c <HAL_RCC_OscConfig+0x504>)
 8002502:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002506:	6593      	str	r3, [r2, #88]	@ 0x58
 8002508:	4b24      	ldr	r3, [pc, #144]	@ (800259c <HAL_RCC_OscConfig+0x504>)
 800250a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800250c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002514:	2301      	movs	r3, #1
 8002516:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002518:	4b21      	ldr	r3, [pc, #132]	@ (80025a0 <HAL_RCC_OscConfig+0x508>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002520:	2b00      	cmp	r3, #0
 8002522:	d118      	bne.n	8002556 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002524:	4b1e      	ldr	r3, [pc, #120]	@ (80025a0 <HAL_RCC_OscConfig+0x508>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a1d      	ldr	r2, [pc, #116]	@ (80025a0 <HAL_RCC_OscConfig+0x508>)
 800252a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800252e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002530:	f7ff fa0e 	bl	8001950 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002538:	f7ff fa0a 	bl	8001950 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e17a      	b.n	8002840 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800254a:	4b15      	ldr	r3, [pc, #84]	@ (80025a0 <HAL_RCC_OscConfig+0x508>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d108      	bne.n	8002570 <HAL_RCC_OscConfig+0x4d8>
 800255e:	4b0f      	ldr	r3, [pc, #60]	@ (800259c <HAL_RCC_OscConfig+0x504>)
 8002560:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002564:	4a0d      	ldr	r2, [pc, #52]	@ (800259c <HAL_RCC_OscConfig+0x504>)
 8002566:	f043 0301 	orr.w	r3, r3, #1
 800256a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800256e:	e029      	b.n	80025c4 <HAL_RCC_OscConfig+0x52c>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	2b05      	cmp	r3, #5
 8002576:	d115      	bne.n	80025a4 <HAL_RCC_OscConfig+0x50c>
 8002578:	4b08      	ldr	r3, [pc, #32]	@ (800259c <HAL_RCC_OscConfig+0x504>)
 800257a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800257e:	4a07      	ldr	r2, [pc, #28]	@ (800259c <HAL_RCC_OscConfig+0x504>)
 8002580:	f043 0304 	orr.w	r3, r3, #4
 8002584:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002588:	4b04      	ldr	r3, [pc, #16]	@ (800259c <HAL_RCC_OscConfig+0x504>)
 800258a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800258e:	4a03      	ldr	r2, [pc, #12]	@ (800259c <HAL_RCC_OscConfig+0x504>)
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002598:	e014      	b.n	80025c4 <HAL_RCC_OscConfig+0x52c>
 800259a:	bf00      	nop
 800259c:	40021000 	.word	0x40021000
 80025a0:	40007000 	.word	0x40007000
 80025a4:	4b9c      	ldr	r3, [pc, #624]	@ (8002818 <HAL_RCC_OscConfig+0x780>)
 80025a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025aa:	4a9b      	ldr	r2, [pc, #620]	@ (8002818 <HAL_RCC_OscConfig+0x780>)
 80025ac:	f023 0301 	bic.w	r3, r3, #1
 80025b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025b4:	4b98      	ldr	r3, [pc, #608]	@ (8002818 <HAL_RCC_OscConfig+0x780>)
 80025b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ba:	4a97      	ldr	r2, [pc, #604]	@ (8002818 <HAL_RCC_OscConfig+0x780>)
 80025bc:	f023 0304 	bic.w	r3, r3, #4
 80025c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d016      	beq.n	80025fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025cc:	f7ff f9c0 	bl	8001950 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025d2:	e00a      	b.n	80025ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d4:	f7ff f9bc 	bl	8001950 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e12a      	b.n	8002840 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ea:	4b8b      	ldr	r3, [pc, #556]	@ (8002818 <HAL_RCC_OscConfig+0x780>)
 80025ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0ed      	beq.n	80025d4 <HAL_RCC_OscConfig+0x53c>
 80025f8:	e015      	b.n	8002626 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fa:	f7ff f9a9 	bl	8001950 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002600:	e00a      	b.n	8002618 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002602:	f7ff f9a5 	bl	8001950 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002610:	4293      	cmp	r3, r2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e113      	b.n	8002840 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002618:	4b7f      	ldr	r3, [pc, #508]	@ (8002818 <HAL_RCC_OscConfig+0x780>)
 800261a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1ed      	bne.n	8002602 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002626:	7ffb      	ldrb	r3, [r7, #31]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d105      	bne.n	8002638 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800262c:	4b7a      	ldr	r3, [pc, #488]	@ (8002818 <HAL_RCC_OscConfig+0x780>)
 800262e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002630:	4a79      	ldr	r2, [pc, #484]	@ (8002818 <HAL_RCC_OscConfig+0x780>)
 8002632:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002636:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 80fe 	beq.w	800283e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002646:	2b02      	cmp	r3, #2
 8002648:	f040 80d0 	bne.w	80027ec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800264c:	4b72      	ldr	r3, [pc, #456]	@ (8002818 <HAL_RCC_OscConfig+0x780>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f003 0203 	and.w	r2, r3, #3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800265c:	429a      	cmp	r2, r3
 800265e:	d130      	bne.n	80026c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266a:	3b01      	subs	r3, #1
 800266c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800266e:	429a      	cmp	r2, r3
 8002670:	d127      	bne.n	80026c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800267c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800267e:	429a      	cmp	r2, r3
 8002680:	d11f      	bne.n	80026c2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800268c:	2a07      	cmp	r2, #7
 800268e:	bf14      	ite	ne
 8002690:	2201      	movne	r2, #1
 8002692:	2200      	moveq	r2, #0
 8002694:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002696:	4293      	cmp	r3, r2
 8002698:	d113      	bne.n	80026c2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026a4:	085b      	lsrs	r3, r3, #1
 80026a6:	3b01      	subs	r3, #1
 80026a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d109      	bne.n	80026c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b8:	085b      	lsrs	r3, r3, #1
 80026ba:	3b01      	subs	r3, #1
 80026bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026be:	429a      	cmp	r2, r3
 80026c0:	d06e      	beq.n	80027a0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	2b0c      	cmp	r3, #12
 80026c6:	d069      	beq.n	800279c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80026c8:	4b53      	ldr	r3, [pc, #332]	@ (8002818 <HAL_RCC_OscConfig+0x780>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d105      	bne.n	80026e0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80026d4:	4b50      	ldr	r3, [pc, #320]	@ (8002818 <HAL_RCC_OscConfig+0x780>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e0ad      	b.n	8002840 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80026e4:	4b4c      	ldr	r3, [pc, #304]	@ (8002818 <HAL_RCC_OscConfig+0x780>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a4b      	ldr	r2, [pc, #300]	@ (8002818 <HAL_RCC_OscConfig+0x780>)
 80026ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026ee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026f0:	f7ff f92e 	bl	8001950 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f8:	f7ff f92a 	bl	8001950 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e09a      	b.n	8002840 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800270a:	4b43      	ldr	r3, [pc, #268]	@ (8002818 <HAL_RCC_OscConfig+0x780>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f0      	bne.n	80026f8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002716:	4b40      	ldr	r3, [pc, #256]	@ (8002818 <HAL_RCC_OscConfig+0x780>)
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	4b40      	ldr	r3, [pc, #256]	@ (800281c <HAL_RCC_OscConfig+0x784>)
 800271c:	4013      	ands	r3, r2
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002726:	3a01      	subs	r2, #1
 8002728:	0112      	lsls	r2, r2, #4
 800272a:	4311      	orrs	r1, r2
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002730:	0212      	lsls	r2, r2, #8
 8002732:	4311      	orrs	r1, r2
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002738:	0852      	lsrs	r2, r2, #1
 800273a:	3a01      	subs	r2, #1
 800273c:	0552      	lsls	r2, r2, #21
 800273e:	4311      	orrs	r1, r2
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002744:	0852      	lsrs	r2, r2, #1
 8002746:	3a01      	subs	r2, #1
 8002748:	0652      	lsls	r2, r2, #25
 800274a:	4311      	orrs	r1, r2
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002750:	0912      	lsrs	r2, r2, #4
 8002752:	0452      	lsls	r2, r2, #17
 8002754:	430a      	orrs	r2, r1
 8002756:	4930      	ldr	r1, [pc, #192]	@ (8002818 <HAL_RCC_OscConfig+0x780>)
 8002758:	4313      	orrs	r3, r2
 800275a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800275c:	4b2e      	ldr	r3, [pc, #184]	@ (8002818 <HAL_RCC_OscConfig+0x780>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a2d      	ldr	r2, [pc, #180]	@ (8002818 <HAL_RCC_OscConfig+0x780>)
 8002762:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002766:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002768:	4b2b      	ldr	r3, [pc, #172]	@ (8002818 <HAL_RCC_OscConfig+0x780>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	4a2a      	ldr	r2, [pc, #168]	@ (8002818 <HAL_RCC_OscConfig+0x780>)
 800276e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002772:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002774:	f7ff f8ec 	bl	8001950 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800277c:	f7ff f8e8 	bl	8001950 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e058      	b.n	8002840 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800278e:	4b22      	ldr	r3, [pc, #136]	@ (8002818 <HAL_RCC_OscConfig+0x780>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0f0      	beq.n	800277c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800279a:	e050      	b.n	800283e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e04f      	b.n	8002840 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002818 <HAL_RCC_OscConfig+0x780>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d148      	bne.n	800283e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002818 <HAL_RCC_OscConfig+0x780>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a19      	ldr	r2, [pc, #100]	@ (8002818 <HAL_RCC_OscConfig+0x780>)
 80027b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027b8:	4b17      	ldr	r3, [pc, #92]	@ (8002818 <HAL_RCC_OscConfig+0x780>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	4a16      	ldr	r2, [pc, #88]	@ (8002818 <HAL_RCC_OscConfig+0x780>)
 80027be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027c4:	f7ff f8c4 	bl	8001950 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027cc:	f7ff f8c0 	bl	8001950 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e030      	b.n	8002840 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027de:	4b0e      	ldr	r3, [pc, #56]	@ (8002818 <HAL_RCC_OscConfig+0x780>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f0      	beq.n	80027cc <HAL_RCC_OscConfig+0x734>
 80027ea:	e028      	b.n	800283e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	2b0c      	cmp	r3, #12
 80027f0:	d023      	beq.n	800283a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f2:	4b09      	ldr	r3, [pc, #36]	@ (8002818 <HAL_RCC_OscConfig+0x780>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a08      	ldr	r2, [pc, #32]	@ (8002818 <HAL_RCC_OscConfig+0x780>)
 80027f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fe:	f7ff f8a7 	bl	8001950 <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002804:	e00c      	b.n	8002820 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002806:	f7ff f8a3 	bl	8001950 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d905      	bls.n	8002820 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e013      	b.n	8002840 <HAL_RCC_OscConfig+0x7a8>
 8002818:	40021000 	.word	0x40021000
 800281c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002820:	4b09      	ldr	r3, [pc, #36]	@ (8002848 <HAL_RCC_OscConfig+0x7b0>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1ec      	bne.n	8002806 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800282c:	4b06      	ldr	r3, [pc, #24]	@ (8002848 <HAL_RCC_OscConfig+0x7b0>)
 800282e:	68da      	ldr	r2, [r3, #12]
 8002830:	4905      	ldr	r1, [pc, #20]	@ (8002848 <HAL_RCC_OscConfig+0x7b0>)
 8002832:	4b06      	ldr	r3, [pc, #24]	@ (800284c <HAL_RCC_OscConfig+0x7b4>)
 8002834:	4013      	ands	r3, r2
 8002836:	60cb      	str	r3, [r1, #12]
 8002838:	e001      	b.n	800283e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3720      	adds	r7, #32
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40021000 	.word	0x40021000
 800284c:	feeefffc 	.word	0xfeeefffc

08002850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e0e7      	b.n	8002a34 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002864:	4b75      	ldr	r3, [pc, #468]	@ (8002a3c <HAL_RCC_ClockConfig+0x1ec>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d910      	bls.n	8002894 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002872:	4b72      	ldr	r3, [pc, #456]	@ (8002a3c <HAL_RCC_ClockConfig+0x1ec>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f023 0207 	bic.w	r2, r3, #7
 800287a:	4970      	ldr	r1, [pc, #448]	@ (8002a3c <HAL_RCC_ClockConfig+0x1ec>)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	4313      	orrs	r3, r2
 8002880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002882:	4b6e      	ldr	r3, [pc, #440]	@ (8002a3c <HAL_RCC_ClockConfig+0x1ec>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	429a      	cmp	r2, r3
 800288e:	d001      	beq.n	8002894 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e0cf      	b.n	8002a34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d010      	beq.n	80028c2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	4b66      	ldr	r3, [pc, #408]	@ (8002a40 <HAL_RCC_ClockConfig+0x1f0>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d908      	bls.n	80028c2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028b0:	4b63      	ldr	r3, [pc, #396]	@ (8002a40 <HAL_RCC_ClockConfig+0x1f0>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	4960      	ldr	r1, [pc, #384]	@ (8002a40 <HAL_RCC_ClockConfig+0x1f0>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d04c      	beq.n	8002968 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	d107      	bne.n	80028e6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028d6:	4b5a      	ldr	r3, [pc, #360]	@ (8002a40 <HAL_RCC_ClockConfig+0x1f0>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d121      	bne.n	8002926 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e0a6      	b.n	8002a34 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d107      	bne.n	80028fe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028ee:	4b54      	ldr	r3, [pc, #336]	@ (8002a40 <HAL_RCC_ClockConfig+0x1f0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d115      	bne.n	8002926 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e09a      	b.n	8002a34 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d107      	bne.n	8002916 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002906:	4b4e      	ldr	r3, [pc, #312]	@ (8002a40 <HAL_RCC_ClockConfig+0x1f0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d109      	bne.n	8002926 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e08e      	b.n	8002a34 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002916:	4b4a      	ldr	r3, [pc, #296]	@ (8002a40 <HAL_RCC_ClockConfig+0x1f0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e086      	b.n	8002a34 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002926:	4b46      	ldr	r3, [pc, #280]	@ (8002a40 <HAL_RCC_ClockConfig+0x1f0>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f023 0203 	bic.w	r2, r3, #3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	4943      	ldr	r1, [pc, #268]	@ (8002a40 <HAL_RCC_ClockConfig+0x1f0>)
 8002934:	4313      	orrs	r3, r2
 8002936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002938:	f7ff f80a 	bl	8001950 <HAL_GetTick>
 800293c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293e:	e00a      	b.n	8002956 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002940:	f7ff f806 	bl	8001950 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800294e:	4293      	cmp	r3, r2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e06e      	b.n	8002a34 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002956:	4b3a      	ldr	r3, [pc, #232]	@ (8002a40 <HAL_RCC_ClockConfig+0x1f0>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 020c 	and.w	r2, r3, #12
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	429a      	cmp	r2, r3
 8002966:	d1eb      	bne.n	8002940 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d010      	beq.n	8002996 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	4b31      	ldr	r3, [pc, #196]	@ (8002a40 <HAL_RCC_ClockConfig+0x1f0>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002980:	429a      	cmp	r2, r3
 8002982:	d208      	bcs.n	8002996 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002984:	4b2e      	ldr	r3, [pc, #184]	@ (8002a40 <HAL_RCC_ClockConfig+0x1f0>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	492b      	ldr	r1, [pc, #172]	@ (8002a40 <HAL_RCC_ClockConfig+0x1f0>)
 8002992:	4313      	orrs	r3, r2
 8002994:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002996:	4b29      	ldr	r3, [pc, #164]	@ (8002a3c <HAL_RCC_ClockConfig+0x1ec>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d210      	bcs.n	80029c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a4:	4b25      	ldr	r3, [pc, #148]	@ (8002a3c <HAL_RCC_ClockConfig+0x1ec>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f023 0207 	bic.w	r2, r3, #7
 80029ac:	4923      	ldr	r1, [pc, #140]	@ (8002a3c <HAL_RCC_ClockConfig+0x1ec>)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b4:	4b21      	ldr	r3, [pc, #132]	@ (8002a3c <HAL_RCC_ClockConfig+0x1ec>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d001      	beq.n	80029c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e036      	b.n	8002a34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0304 	and.w	r3, r3, #4
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d008      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002a40 <HAL_RCC_ClockConfig+0x1f0>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	4918      	ldr	r1, [pc, #96]	@ (8002a40 <HAL_RCC_ClockConfig+0x1f0>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0308 	and.w	r3, r3, #8
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d009      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029f0:	4b13      	ldr	r3, [pc, #76]	@ (8002a40 <HAL_RCC_ClockConfig+0x1f0>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	4910      	ldr	r1, [pc, #64]	@ (8002a40 <HAL_RCC_ClockConfig+0x1f0>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a04:	f000 f824 	bl	8002a50 <HAL_RCC_GetSysClockFreq>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a40 <HAL_RCC_ClockConfig+0x1f0>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	091b      	lsrs	r3, r3, #4
 8002a10:	f003 030f 	and.w	r3, r3, #15
 8002a14:	490b      	ldr	r1, [pc, #44]	@ (8002a44 <HAL_RCC_ClockConfig+0x1f4>)
 8002a16:	5ccb      	ldrb	r3, [r1, r3]
 8002a18:	f003 031f 	and.w	r3, r3, #31
 8002a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a20:	4a09      	ldr	r2, [pc, #36]	@ (8002a48 <HAL_RCC_ClockConfig+0x1f8>)
 8002a22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a24:	4b09      	ldr	r3, [pc, #36]	@ (8002a4c <HAL_RCC_ClockConfig+0x1fc>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fe ff41 	bl	80018b0 <HAL_InitTick>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a32:	7afb      	ldrb	r3, [r7, #11]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40022000 	.word	0x40022000
 8002a40:	40021000 	.word	0x40021000
 8002a44:	0800483c 	.word	0x0800483c
 8002a48:	20000158 	.word	0x20000158
 8002a4c:	2000015c 	.word	0x2000015c

08002a50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b089      	sub	sp, #36	@ 0x24
 8002a54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	61fb      	str	r3, [r7, #28]
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a5e:	4b3e      	ldr	r3, [pc, #248]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 030c 	and.w	r3, r3, #12
 8002a66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a68:	4b3b      	ldr	r3, [pc, #236]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f003 0303 	and.w	r3, r3, #3
 8002a70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d005      	beq.n	8002a84 <HAL_RCC_GetSysClockFreq+0x34>
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	2b0c      	cmp	r3, #12
 8002a7c:	d121      	bne.n	8002ac2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d11e      	bne.n	8002ac2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a84:	4b34      	ldr	r3, [pc, #208]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0308 	and.w	r3, r3, #8
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d107      	bne.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a90:	4b31      	ldr	r3, [pc, #196]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a96:	0a1b      	lsrs	r3, r3, #8
 8002a98:	f003 030f 	and.w	r3, r3, #15
 8002a9c:	61fb      	str	r3, [r7, #28]
 8002a9e:	e005      	b.n	8002aac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002aa0:	4b2d      	ldr	r3, [pc, #180]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	091b      	lsrs	r3, r3, #4
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002aac:	4a2b      	ldr	r2, [pc, #172]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10d      	bne.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ac0:	e00a      	b.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	d102      	bne.n	8002ace <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ac8:	4b25      	ldr	r3, [pc, #148]	@ (8002b60 <HAL_RCC_GetSysClockFreq+0x110>)
 8002aca:	61bb      	str	r3, [r7, #24]
 8002acc:	e004      	b.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d101      	bne.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ad4:	4b23      	ldr	r3, [pc, #140]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ad6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	2b0c      	cmp	r3, #12
 8002adc:	d134      	bne.n	8002b48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ade:	4b1e      	ldr	r3, [pc, #120]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d003      	beq.n	8002af6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d003      	beq.n	8002afc <HAL_RCC_GetSysClockFreq+0xac>
 8002af4:	e005      	b.n	8002b02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002af6:	4b1a      	ldr	r3, [pc, #104]	@ (8002b60 <HAL_RCC_GetSysClockFreq+0x110>)
 8002af8:	617b      	str	r3, [r7, #20]
      break;
 8002afa:	e005      	b.n	8002b08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002afc:	4b19      	ldr	r3, [pc, #100]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x114>)
 8002afe:	617b      	str	r3, [r7, #20]
      break;
 8002b00:	e002      	b.n	8002b08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	617b      	str	r3, [r7, #20]
      break;
 8002b06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b08:	4b13      	ldr	r3, [pc, #76]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	091b      	lsrs	r3, r3, #4
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	3301      	adds	r3, #1
 8002b14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b16:	4b10      	ldr	r3, [pc, #64]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	0a1b      	lsrs	r3, r3, #8
 8002b1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	fb03 f202 	mul.w	r2, r3, r2
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	0e5b      	lsrs	r3, r3, #25
 8002b34:	f003 0303 	and.w	r3, r3, #3
 8002b38:	3301      	adds	r3, #1
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b48:	69bb      	ldr	r3, [r7, #24]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3724      	adds	r7, #36	@ 0x24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	0800484c 	.word	0x0800484c
 8002b60:	00f42400 	.word	0x00f42400
 8002b64:	007a1200 	.word	0x007a1200

08002b68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b70:	2300      	movs	r3, #0
 8002b72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b74:	4b2a      	ldr	r3, [pc, #168]	@ (8002c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b80:	f7ff fa26 	bl	8001fd0 <HAL_PWREx_GetVoltageRange>
 8002b84:	6178      	str	r0, [r7, #20]
 8002b86:	e014      	b.n	8002bb2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b88:	4b25      	ldr	r3, [pc, #148]	@ (8002c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b8c:	4a24      	ldr	r2, [pc, #144]	@ (8002c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b92:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b94:	4b22      	ldr	r3, [pc, #136]	@ (8002c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ba0:	f7ff fa16 	bl	8001fd0 <HAL_PWREx_GetVoltageRange>
 8002ba4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ba6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002baa:	4a1d      	ldr	r2, [pc, #116]	@ (8002c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bb0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bb8:	d10b      	bne.n	8002bd2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b80      	cmp	r3, #128	@ 0x80
 8002bbe:	d919      	bls.n	8002bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2ba0      	cmp	r3, #160	@ 0xa0
 8002bc4:	d902      	bls.n	8002bcc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	613b      	str	r3, [r7, #16]
 8002bca:	e013      	b.n	8002bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bcc:	2301      	movs	r3, #1
 8002bce:	613b      	str	r3, [r7, #16]
 8002bd0:	e010      	b.n	8002bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b80      	cmp	r3, #128	@ 0x80
 8002bd6:	d902      	bls.n	8002bde <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002bd8:	2303      	movs	r3, #3
 8002bda:	613b      	str	r3, [r7, #16]
 8002bdc:	e00a      	b.n	8002bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b80      	cmp	r3, #128	@ 0x80
 8002be2:	d102      	bne.n	8002bea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002be4:	2302      	movs	r3, #2
 8002be6:	613b      	str	r3, [r7, #16]
 8002be8:	e004      	b.n	8002bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b70      	cmp	r3, #112	@ 0x70
 8002bee:	d101      	bne.n	8002bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f023 0207 	bic.w	r2, r3, #7
 8002bfc:	4909      	ldr	r1, [pc, #36]	@ (8002c24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c04:	4b07      	ldr	r3, [pc, #28]	@ (8002c24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d001      	beq.n	8002c16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e000      	b.n	8002c18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40021000 	.word	0x40021000
 8002c24:	40022000 	.word	0x40022000

08002c28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e095      	b.n	8002d66 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d108      	bne.n	8002c54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c4a:	d009      	beq.n	8002c60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	61da      	str	r2, [r3, #28]
 8002c52:	e005      	b.n	8002c60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d106      	bne.n	8002c80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7fe fbe8 	bl	8001450 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c96:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ca0:	d902      	bls.n	8002ca8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	e002      	b.n	8002cae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ca8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002cb6:	d007      	beq.n	8002cc8 <HAL_SPI_Init+0xa0>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002cc0:	d002      	beq.n	8002cc8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	431a      	orrs	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d00:	431a      	orrs	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d0a:	ea42 0103 	orr.w	r1, r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d12:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	0c1b      	lsrs	r3, r3, #16
 8002d24:	f003 0204 	and.w	r2, r3, #4
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2c:	f003 0310 	and.w	r3, r3, #16
 8002d30:	431a      	orrs	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002d44:	ea42 0103 	orr.w	r1, r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b088      	sub	sp, #32
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	60f8      	str	r0, [r7, #12]
 8002d76:	60b9      	str	r1, [r7, #8]
 8002d78:	603b      	str	r3, [r7, #0]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_SPI_Transmit+0x22>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e15f      	b.n	8003050 <HAL_SPI_Transmit+0x2e2>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d98:	f7fe fdda 	bl	8001950 <HAL_GetTick>
 8002d9c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d9e:	88fb      	ldrh	r3, [r7, #6]
 8002da0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d002      	beq.n	8002db4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002dae:	2302      	movs	r3, #2
 8002db0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002db2:	e148      	b.n	8003046 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <HAL_SPI_Transmit+0x52>
 8002dba:	88fb      	ldrh	r3, [r7, #6]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d102      	bne.n	8002dc6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002dc4:	e13f      	b.n	8003046 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2203      	movs	r2, #3
 8002dca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	88fa      	ldrh	r2, [r7, #6]
 8002dde:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	88fa      	ldrh	r2, [r7, #6]
 8002de4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e10:	d10f      	bne.n	8002e32 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e20:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e30:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e3c:	2b40      	cmp	r3, #64	@ 0x40
 8002e3e:	d007      	beq.n	8002e50 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e58:	d94f      	bls.n	8002efa <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <HAL_SPI_Transmit+0xfa>
 8002e62:	8afb      	ldrh	r3, [r7, #22]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d142      	bne.n	8002eee <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e6c:	881a      	ldrh	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e78:	1c9a      	adds	r2, r3, #2
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	3b01      	subs	r3, #1
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e8c:	e02f      	b.n	8002eee <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d112      	bne.n	8002ec2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ea0:	881a      	ldrh	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eac:	1c9a      	adds	r2, r3, #2
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ec0:	e015      	b.n	8002eee <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ec2:	f7fe fd45 	bl	8001950 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d803      	bhi.n	8002eda <HAL_SPI_Transmit+0x16c>
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ed8:	d102      	bne.n	8002ee0 <HAL_SPI_Transmit+0x172>
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d106      	bne.n	8002eee <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002eec:	e0ab      	b.n	8003046 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1ca      	bne.n	8002e8e <HAL_SPI_Transmit+0x120>
 8002ef8:	e080      	b.n	8002ffc <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d002      	beq.n	8002f08 <HAL_SPI_Transmit+0x19a>
 8002f02:	8afb      	ldrh	r3, [r7, #22]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d174      	bne.n	8002ff2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d912      	bls.n	8002f38 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f16:	881a      	ldrh	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f22:	1c9a      	adds	r2, r3, #2
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	3b02      	subs	r3, #2
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f36:	e05c      	b.n	8002ff2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	330c      	adds	r3, #12
 8002f42:	7812      	ldrb	r2, [r2, #0]
 8002f44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f4a:	1c5a      	adds	r2, r3, #1
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002f5e:	e048      	b.n	8002ff2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d12b      	bne.n	8002fc6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d912      	bls.n	8002f9e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f7c:	881a      	ldrh	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f88:	1c9a      	adds	r2, r3, #2
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	3b02      	subs	r3, #2
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f9c:	e029      	b.n	8002ff2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	330c      	adds	r3, #12
 8002fa8:	7812      	ldrb	r2, [r2, #0]
 8002faa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb0:	1c5a      	adds	r2, r3, #1
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002fc4:	e015      	b.n	8002ff2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fc6:	f7fe fcc3 	bl	8001950 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d803      	bhi.n	8002fde <HAL_SPI_Transmit+0x270>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002fdc:	d102      	bne.n	8002fe4 <HAL_SPI_Transmit+0x276>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d106      	bne.n	8002ff2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002ff0:	e029      	b.n	8003046 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1b1      	bne.n	8002f60 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	6839      	ldr	r1, [r7, #0]
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 fb69 	bl	80036d8 <SPI_EndRxTxTransaction>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d002      	beq.n	8003012 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2220      	movs	r2, #32
 8003010:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10a      	bne.n	8003030 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800301a:	2300      	movs	r3, #0
 800301c:	613b      	str	r3, [r7, #16]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	613b      	str	r3, [r7, #16]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	613b      	str	r3, [r7, #16]
 800302e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003034:	2b00      	cmp	r3, #0
 8003036:	d002      	beq.n	800303e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	77fb      	strb	r3, [r7, #31]
 800303c:	e003      	b.n	8003046 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800304e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3720      	adds	r7, #32
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b08a      	sub	sp, #40	@ 0x28
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
 8003064:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003066:	2301      	movs	r3, #1
 8003068:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800306a:	2300      	movs	r3, #0
 800306c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003076:	2b01      	cmp	r3, #1
 8003078:	d101      	bne.n	800307e <HAL_SPI_TransmitReceive+0x26>
 800307a:	2302      	movs	r3, #2
 800307c:	e20a      	b.n	8003494 <HAL_SPI_TransmitReceive+0x43c>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003086:	f7fe fc63 	bl	8001950 <HAL_GetTick>
 800308a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003092:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800309a:	887b      	ldrh	r3, [r7, #2]
 800309c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800309e:	887b      	ldrh	r3, [r7, #2]
 80030a0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030a2:	7efb      	ldrb	r3, [r7, #27]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d00e      	beq.n	80030c6 <HAL_SPI_TransmitReceive+0x6e>
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030ae:	d106      	bne.n	80030be <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d102      	bne.n	80030be <HAL_SPI_TransmitReceive+0x66>
 80030b8:	7efb      	ldrb	r3, [r7, #27]
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d003      	beq.n	80030c6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80030be:	2302      	movs	r3, #2
 80030c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80030c4:	e1e0      	b.n	8003488 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d005      	beq.n	80030d8 <HAL_SPI_TransmitReceive+0x80>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <HAL_SPI_TransmitReceive+0x80>
 80030d2:	887b      	ldrh	r3, [r7, #2]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d103      	bne.n	80030e0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80030de:	e1d3      	b.n	8003488 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d003      	beq.n	80030f4 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2205      	movs	r2, #5
 80030f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	887a      	ldrh	r2, [r7, #2]
 8003104:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	887a      	ldrh	r2, [r7, #2]
 800310c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	887a      	ldrh	r2, [r7, #2]
 800311a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	887a      	ldrh	r2, [r7, #2]
 8003120:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003136:	d802      	bhi.n	800313e <HAL_SPI_TransmitReceive+0xe6>
 8003138:	8a3b      	ldrh	r3, [r7, #16]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d908      	bls.n	8003150 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	e007      	b.n	8003160 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800315e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800316a:	2b40      	cmp	r3, #64	@ 0x40
 800316c:	d007      	beq.n	800317e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800317c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003186:	f240 8081 	bls.w	800328c <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <HAL_SPI_TransmitReceive+0x140>
 8003192:	8a7b      	ldrh	r3, [r7, #18]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d16d      	bne.n	8003274 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800319c:	881a      	ldrh	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a8:	1c9a      	adds	r2, r3, #2
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031bc:	e05a      	b.n	8003274 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d11b      	bne.n	8003204 <HAL_SPI_TransmitReceive+0x1ac>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d016      	beq.n	8003204 <HAL_SPI_TransmitReceive+0x1ac>
 80031d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d113      	bne.n	8003204 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e0:	881a      	ldrh	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ec:	1c9a      	adds	r2, r3, #2
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b01      	cmp	r3, #1
 8003210:	d11c      	bne.n	800324c <HAL_SPI_TransmitReceive+0x1f4>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003218:	b29b      	uxth	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d016      	beq.n	800324c <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003228:	b292      	uxth	r2, r2
 800322a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003230:	1c9a      	adds	r2, r3, #2
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800323c:	b29b      	uxth	r3, r3
 800323e:	3b01      	subs	r3, #1
 8003240:	b29a      	uxth	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003248:	2301      	movs	r3, #1
 800324a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800324c:	f7fe fb80 	bl	8001950 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003258:	429a      	cmp	r2, r3
 800325a:	d80b      	bhi.n	8003274 <HAL_SPI_TransmitReceive+0x21c>
 800325c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800325e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003262:	d007      	beq.n	8003274 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003272:	e109      	b.n	8003488 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003278:	b29b      	uxth	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d19f      	bne.n	80031be <HAL_SPI_TransmitReceive+0x166>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003284:	b29b      	uxth	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d199      	bne.n	80031be <HAL_SPI_TransmitReceive+0x166>
 800328a:	e0e3      	b.n	8003454 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_SPI_TransmitReceive+0x244>
 8003294:	8a7b      	ldrh	r3, [r7, #18]
 8003296:	2b01      	cmp	r3, #1
 8003298:	f040 80cf 	bne.w	800343a <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d912      	bls.n	80032cc <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032aa:	881a      	ldrh	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b6:	1c9a      	adds	r2, r3, #2
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	3b02      	subs	r3, #2
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80032ca:	e0b6      	b.n	800343a <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	330c      	adds	r3, #12
 80032d6:	7812      	ldrb	r2, [r2, #0]
 80032d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032de:	1c5a      	adds	r2, r3, #1
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	3b01      	subs	r3, #1
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032f2:	e0a2      	b.n	800343a <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d134      	bne.n	800336c <HAL_SPI_TransmitReceive+0x314>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003306:	b29b      	uxth	r3, r3
 8003308:	2b00      	cmp	r3, #0
 800330a:	d02f      	beq.n	800336c <HAL_SPI_TransmitReceive+0x314>
 800330c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330e:	2b01      	cmp	r3, #1
 8003310:	d12c      	bne.n	800336c <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003316:	b29b      	uxth	r3, r3
 8003318:	2b01      	cmp	r3, #1
 800331a:	d912      	bls.n	8003342 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003320:	881a      	ldrh	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800332c:	1c9a      	adds	r2, r3, #2
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003336:	b29b      	uxth	r3, r3
 8003338:	3b02      	subs	r3, #2
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003340:	e012      	b.n	8003368 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	330c      	adds	r3, #12
 800334c:	7812      	ldrb	r2, [r2, #0]
 800334e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003354:	1c5a      	adds	r2, r3, #1
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800335e:	b29b      	uxth	r3, r3
 8003360:	3b01      	subs	r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b01      	cmp	r3, #1
 8003378:	d148      	bne.n	800340c <HAL_SPI_TransmitReceive+0x3b4>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003380:	b29b      	uxth	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d042      	beq.n	800340c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800338c:	b29b      	uxth	r3, r3
 800338e:	2b01      	cmp	r3, #1
 8003390:	d923      	bls.n	80033da <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339c:	b292      	uxth	r2, r2
 800339e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a4:	1c9a      	adds	r2, r3, #2
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	3b02      	subs	r3, #2
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d81f      	bhi.n	8003408 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80033d6:	605a      	str	r2, [r3, #4]
 80033d8:	e016      	b.n	8003408 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f103 020c 	add.w	r2, r3, #12
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e6:	7812      	ldrb	r2, [r2, #0]
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	3b01      	subs	r3, #1
 8003400:	b29a      	uxth	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003408:	2301      	movs	r3, #1
 800340a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800340c:	f7fe faa0 	bl	8001950 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003418:	429a      	cmp	r2, r3
 800341a:	d803      	bhi.n	8003424 <HAL_SPI_TransmitReceive+0x3cc>
 800341c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800341e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003422:	d102      	bne.n	800342a <HAL_SPI_TransmitReceive+0x3d2>
 8003424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003426:	2b00      	cmp	r3, #0
 8003428:	d107      	bne.n	800343a <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003438:	e026      	b.n	8003488 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800343e:	b29b      	uxth	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	f47f af57 	bne.w	80032f4 <HAL_SPI_TransmitReceive+0x29c>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800344c:	b29b      	uxth	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	f47f af50 	bne.w	80032f4 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003454:	69fa      	ldr	r2, [r7, #28]
 8003456:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 f93d 	bl	80036d8 <SPI_EndRxTxTransaction>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d005      	beq.n	8003470 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2220      	movs	r2, #32
 800346e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800347e:	e003      	b.n	8003488 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003490:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003494:	4618      	mov	r0, r3
 8003496:	3728      	adds	r7, #40	@ 0x28
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b088      	sub	sp, #32
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	603b      	str	r3, [r7, #0]
 80034a8:	4613      	mov	r3, r2
 80034aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80034ac:	f7fe fa50 	bl	8001950 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b4:	1a9b      	subs	r3, r3, r2
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	4413      	add	r3, r2
 80034ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034bc:	f7fe fa48 	bl	8001950 <HAL_GetTick>
 80034c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034c2:	4b39      	ldr	r3, [pc, #228]	@ (80035a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	015b      	lsls	r3, r3, #5
 80034c8:	0d1b      	lsrs	r3, r3, #20
 80034ca:	69fa      	ldr	r2, [r7, #28]
 80034cc:	fb02 f303 	mul.w	r3, r2, r3
 80034d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034d2:	e054      	b.n	800357e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034da:	d050      	beq.n	800357e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034dc:	f7fe fa38 	bl	8001950 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	69fa      	ldr	r2, [r7, #28]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d902      	bls.n	80034f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d13d      	bne.n	800356e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003500:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800350a:	d111      	bne.n	8003530 <SPI_WaitFlagStateUntilTimeout+0x94>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003514:	d004      	beq.n	8003520 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800351e:	d107      	bne.n	8003530 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800352e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003534:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003538:	d10f      	bne.n	800355a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003558:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e017      	b.n	800359e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	3b01      	subs	r3, #1
 800357c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	4013      	ands	r3, r2
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	429a      	cmp	r2, r3
 800358c:	bf0c      	ite	eq
 800358e:	2301      	moveq	r3, #1
 8003590:	2300      	movne	r3, #0
 8003592:	b2db      	uxtb	r3, r3
 8003594:	461a      	mov	r2, r3
 8003596:	79fb      	ldrb	r3, [r7, #7]
 8003598:	429a      	cmp	r2, r3
 800359a:	d19b      	bne.n	80034d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3720      	adds	r7, #32
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20000158 	.word	0x20000158

080035ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b08a      	sub	sp, #40	@ 0x28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
 80035b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80035ba:	2300      	movs	r3, #0
 80035bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80035be:	f7fe f9c7 	bl	8001950 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c6:	1a9b      	subs	r3, r3, r2
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	4413      	add	r3, r2
 80035cc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80035ce:	f7fe f9bf 	bl	8001950 <HAL_GetTick>
 80035d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	330c      	adds	r3, #12
 80035da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80035dc:	4b3d      	ldr	r3, [pc, #244]	@ (80036d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	4613      	mov	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	00da      	lsls	r2, r3, #3
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	0d1b      	lsrs	r3, r3, #20
 80035ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ee:	fb02 f303 	mul.w	r3, r2, r3
 80035f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80035f4:	e060      	b.n	80036b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80035fc:	d107      	bne.n	800360e <SPI_WaitFifoStateUntilTimeout+0x62>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d104      	bne.n	800360e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	b2db      	uxtb	r3, r3
 800360a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800360c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003614:	d050      	beq.n	80036b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003616:	f7fe f99b 	bl	8001950 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	6a3b      	ldr	r3, [r7, #32]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003622:	429a      	cmp	r2, r3
 8003624:	d902      	bls.n	800362c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003628:	2b00      	cmp	r3, #0
 800362a:	d13d      	bne.n	80036a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800363a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003644:	d111      	bne.n	800366a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800364e:	d004      	beq.n	800365a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003658:	d107      	bne.n	800366a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003668:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003672:	d10f      	bne.n	8003694 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003692:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e010      	b.n	80036ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80036ae:	2300      	movs	r3, #0
 80036b0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	3b01      	subs	r3, #1
 80036b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	4013      	ands	r3, r2
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d196      	bne.n	80035f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3728      	adds	r7, #40	@ 0x28
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	20000158 	.word	0x20000158

080036d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af02      	add	r7, sp, #8
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f7ff ff5b 	bl	80035ac <SPI_WaitFifoStateUntilTimeout>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d007      	beq.n	800370c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003700:	f043 0220 	orr.w	r2, r3, #32
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e027      	b.n	800375c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2200      	movs	r2, #0
 8003714:	2180      	movs	r1, #128	@ 0x80
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f7ff fec0 	bl	800349c <SPI_WaitFlagStateUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d007      	beq.n	8003732 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003726:	f043 0220 	orr.w	r2, r3, #32
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e014      	b.n	800375c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	2200      	movs	r2, #0
 800373a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f7ff ff34 	bl	80035ac <SPI_WaitFifoStateUntilTimeout>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d007      	beq.n	800375a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800374e:	f043 0220 	orr.w	r2, r3, #32
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e000      	b.n	800375c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <malloc>:
 8003764:	4b02      	ldr	r3, [pc, #8]	@ (8003770 <malloc+0xc>)
 8003766:	4601      	mov	r1, r0
 8003768:	6818      	ldr	r0, [r3, #0]
 800376a:	f000 b82d 	b.w	80037c8 <_malloc_r>
 800376e:	bf00      	nop
 8003770:	20000170 	.word	0x20000170

08003774 <free>:
 8003774:	4b02      	ldr	r3, [pc, #8]	@ (8003780 <free+0xc>)
 8003776:	4601      	mov	r1, r0
 8003778:	6818      	ldr	r0, [r3, #0]
 800377a:	f000 ba45 	b.w	8003c08 <_free_r>
 800377e:	bf00      	nop
 8003780:	20000170 	.word	0x20000170

08003784 <sbrk_aligned>:
 8003784:	b570      	push	{r4, r5, r6, lr}
 8003786:	4e0f      	ldr	r6, [pc, #60]	@ (80037c4 <sbrk_aligned+0x40>)
 8003788:	460c      	mov	r4, r1
 800378a:	6831      	ldr	r1, [r6, #0]
 800378c:	4605      	mov	r5, r0
 800378e:	b911      	cbnz	r1, 8003796 <sbrk_aligned+0x12>
 8003790:	f000 f9ee 	bl	8003b70 <_sbrk_r>
 8003794:	6030      	str	r0, [r6, #0]
 8003796:	4621      	mov	r1, r4
 8003798:	4628      	mov	r0, r5
 800379a:	f000 f9e9 	bl	8003b70 <_sbrk_r>
 800379e:	1c43      	adds	r3, r0, #1
 80037a0:	d103      	bne.n	80037aa <sbrk_aligned+0x26>
 80037a2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80037a6:	4620      	mov	r0, r4
 80037a8:	bd70      	pop	{r4, r5, r6, pc}
 80037aa:	1cc4      	adds	r4, r0, #3
 80037ac:	f024 0403 	bic.w	r4, r4, #3
 80037b0:	42a0      	cmp	r0, r4
 80037b2:	d0f8      	beq.n	80037a6 <sbrk_aligned+0x22>
 80037b4:	1a21      	subs	r1, r4, r0
 80037b6:	4628      	mov	r0, r5
 80037b8:	f000 f9da 	bl	8003b70 <_sbrk_r>
 80037bc:	3001      	adds	r0, #1
 80037be:	d1f2      	bne.n	80037a6 <sbrk_aligned+0x22>
 80037c0:	e7ef      	b.n	80037a2 <sbrk_aligned+0x1e>
 80037c2:	bf00      	nop
 80037c4:	20000380 	.word	0x20000380

080037c8 <_malloc_r>:
 80037c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037cc:	1ccd      	adds	r5, r1, #3
 80037ce:	f025 0503 	bic.w	r5, r5, #3
 80037d2:	3508      	adds	r5, #8
 80037d4:	2d0c      	cmp	r5, #12
 80037d6:	bf38      	it	cc
 80037d8:	250c      	movcc	r5, #12
 80037da:	2d00      	cmp	r5, #0
 80037dc:	4606      	mov	r6, r0
 80037de:	db01      	blt.n	80037e4 <_malloc_r+0x1c>
 80037e0:	42a9      	cmp	r1, r5
 80037e2:	d904      	bls.n	80037ee <_malloc_r+0x26>
 80037e4:	230c      	movs	r3, #12
 80037e6:	6033      	str	r3, [r6, #0]
 80037e8:	2000      	movs	r0, #0
 80037ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80038c4 <_malloc_r+0xfc>
 80037f2:	f000 f869 	bl	80038c8 <__malloc_lock>
 80037f6:	f8d8 3000 	ldr.w	r3, [r8]
 80037fa:	461c      	mov	r4, r3
 80037fc:	bb44      	cbnz	r4, 8003850 <_malloc_r+0x88>
 80037fe:	4629      	mov	r1, r5
 8003800:	4630      	mov	r0, r6
 8003802:	f7ff ffbf 	bl	8003784 <sbrk_aligned>
 8003806:	1c43      	adds	r3, r0, #1
 8003808:	4604      	mov	r4, r0
 800380a:	d158      	bne.n	80038be <_malloc_r+0xf6>
 800380c:	f8d8 4000 	ldr.w	r4, [r8]
 8003810:	4627      	mov	r7, r4
 8003812:	2f00      	cmp	r7, #0
 8003814:	d143      	bne.n	800389e <_malloc_r+0xd6>
 8003816:	2c00      	cmp	r4, #0
 8003818:	d04b      	beq.n	80038b2 <_malloc_r+0xea>
 800381a:	6823      	ldr	r3, [r4, #0]
 800381c:	4639      	mov	r1, r7
 800381e:	4630      	mov	r0, r6
 8003820:	eb04 0903 	add.w	r9, r4, r3
 8003824:	f000 f9a4 	bl	8003b70 <_sbrk_r>
 8003828:	4581      	cmp	r9, r0
 800382a:	d142      	bne.n	80038b2 <_malloc_r+0xea>
 800382c:	6821      	ldr	r1, [r4, #0]
 800382e:	1a6d      	subs	r5, r5, r1
 8003830:	4629      	mov	r1, r5
 8003832:	4630      	mov	r0, r6
 8003834:	f7ff ffa6 	bl	8003784 <sbrk_aligned>
 8003838:	3001      	adds	r0, #1
 800383a:	d03a      	beq.n	80038b2 <_malloc_r+0xea>
 800383c:	6823      	ldr	r3, [r4, #0]
 800383e:	442b      	add	r3, r5
 8003840:	6023      	str	r3, [r4, #0]
 8003842:	f8d8 3000 	ldr.w	r3, [r8]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	bb62      	cbnz	r2, 80038a4 <_malloc_r+0xdc>
 800384a:	f8c8 7000 	str.w	r7, [r8]
 800384e:	e00f      	b.n	8003870 <_malloc_r+0xa8>
 8003850:	6822      	ldr	r2, [r4, #0]
 8003852:	1b52      	subs	r2, r2, r5
 8003854:	d420      	bmi.n	8003898 <_malloc_r+0xd0>
 8003856:	2a0b      	cmp	r2, #11
 8003858:	d917      	bls.n	800388a <_malloc_r+0xc2>
 800385a:	1961      	adds	r1, r4, r5
 800385c:	42a3      	cmp	r3, r4
 800385e:	6025      	str	r5, [r4, #0]
 8003860:	bf18      	it	ne
 8003862:	6059      	strne	r1, [r3, #4]
 8003864:	6863      	ldr	r3, [r4, #4]
 8003866:	bf08      	it	eq
 8003868:	f8c8 1000 	streq.w	r1, [r8]
 800386c:	5162      	str	r2, [r4, r5]
 800386e:	604b      	str	r3, [r1, #4]
 8003870:	4630      	mov	r0, r6
 8003872:	f000 f82f 	bl	80038d4 <__malloc_unlock>
 8003876:	f104 000b 	add.w	r0, r4, #11
 800387a:	1d23      	adds	r3, r4, #4
 800387c:	f020 0007 	bic.w	r0, r0, #7
 8003880:	1ac2      	subs	r2, r0, r3
 8003882:	bf1c      	itt	ne
 8003884:	1a1b      	subne	r3, r3, r0
 8003886:	50a3      	strne	r3, [r4, r2]
 8003888:	e7af      	b.n	80037ea <_malloc_r+0x22>
 800388a:	6862      	ldr	r2, [r4, #4]
 800388c:	42a3      	cmp	r3, r4
 800388e:	bf0c      	ite	eq
 8003890:	f8c8 2000 	streq.w	r2, [r8]
 8003894:	605a      	strne	r2, [r3, #4]
 8003896:	e7eb      	b.n	8003870 <_malloc_r+0xa8>
 8003898:	4623      	mov	r3, r4
 800389a:	6864      	ldr	r4, [r4, #4]
 800389c:	e7ae      	b.n	80037fc <_malloc_r+0x34>
 800389e:	463c      	mov	r4, r7
 80038a0:	687f      	ldr	r7, [r7, #4]
 80038a2:	e7b6      	b.n	8003812 <_malloc_r+0x4a>
 80038a4:	461a      	mov	r2, r3
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	42a3      	cmp	r3, r4
 80038aa:	d1fb      	bne.n	80038a4 <_malloc_r+0xdc>
 80038ac:	2300      	movs	r3, #0
 80038ae:	6053      	str	r3, [r2, #4]
 80038b0:	e7de      	b.n	8003870 <_malloc_r+0xa8>
 80038b2:	230c      	movs	r3, #12
 80038b4:	6033      	str	r3, [r6, #0]
 80038b6:	4630      	mov	r0, r6
 80038b8:	f000 f80c 	bl	80038d4 <__malloc_unlock>
 80038bc:	e794      	b.n	80037e8 <_malloc_r+0x20>
 80038be:	6005      	str	r5, [r0, #0]
 80038c0:	e7d6      	b.n	8003870 <_malloc_r+0xa8>
 80038c2:	bf00      	nop
 80038c4:	20000384 	.word	0x20000384

080038c8 <__malloc_lock>:
 80038c8:	4801      	ldr	r0, [pc, #4]	@ (80038d0 <__malloc_lock+0x8>)
 80038ca:	f000 b98c 	b.w	8003be6 <__retarget_lock_acquire_recursive>
 80038ce:	bf00      	nop
 80038d0:	200004c4 	.word	0x200004c4

080038d4 <__malloc_unlock>:
 80038d4:	4801      	ldr	r0, [pc, #4]	@ (80038dc <__malloc_unlock+0x8>)
 80038d6:	f000 b987 	b.w	8003be8 <__retarget_lock_release_recursive>
 80038da:	bf00      	nop
 80038dc:	200004c4 	.word	0x200004c4

080038e0 <siprintf>:
 80038e0:	b40e      	push	{r1, r2, r3}
 80038e2:	b500      	push	{lr}
 80038e4:	b09c      	sub	sp, #112	@ 0x70
 80038e6:	ab1d      	add	r3, sp, #116	@ 0x74
 80038e8:	9002      	str	r0, [sp, #8]
 80038ea:	9006      	str	r0, [sp, #24]
 80038ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80038f0:	4809      	ldr	r0, [pc, #36]	@ (8003918 <siprintf+0x38>)
 80038f2:	9107      	str	r1, [sp, #28]
 80038f4:	9104      	str	r1, [sp, #16]
 80038f6:	4909      	ldr	r1, [pc, #36]	@ (800391c <siprintf+0x3c>)
 80038f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80038fc:	9105      	str	r1, [sp, #20]
 80038fe:	6800      	ldr	r0, [r0, #0]
 8003900:	9301      	str	r3, [sp, #4]
 8003902:	a902      	add	r1, sp, #8
 8003904:	f000 fa26 	bl	8003d54 <_svfiprintf_r>
 8003908:	9b02      	ldr	r3, [sp, #8]
 800390a:	2200      	movs	r2, #0
 800390c:	701a      	strb	r2, [r3, #0]
 800390e:	b01c      	add	sp, #112	@ 0x70
 8003910:	f85d eb04 	ldr.w	lr, [sp], #4
 8003914:	b003      	add	sp, #12
 8003916:	4770      	bx	lr
 8003918:	20000170 	.word	0x20000170
 800391c:	ffff0208 	.word	0xffff0208

08003920 <std>:
 8003920:	2300      	movs	r3, #0
 8003922:	b510      	push	{r4, lr}
 8003924:	4604      	mov	r4, r0
 8003926:	e9c0 3300 	strd	r3, r3, [r0]
 800392a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800392e:	6083      	str	r3, [r0, #8]
 8003930:	8181      	strh	r1, [r0, #12]
 8003932:	6643      	str	r3, [r0, #100]	@ 0x64
 8003934:	81c2      	strh	r2, [r0, #14]
 8003936:	6183      	str	r3, [r0, #24]
 8003938:	4619      	mov	r1, r3
 800393a:	2208      	movs	r2, #8
 800393c:	305c      	adds	r0, #92	@ 0x5c
 800393e:	f000 f90f 	bl	8003b60 <memset>
 8003942:	4b0d      	ldr	r3, [pc, #52]	@ (8003978 <std+0x58>)
 8003944:	6263      	str	r3, [r4, #36]	@ 0x24
 8003946:	4b0d      	ldr	r3, [pc, #52]	@ (800397c <std+0x5c>)
 8003948:	62a3      	str	r3, [r4, #40]	@ 0x28
 800394a:	4b0d      	ldr	r3, [pc, #52]	@ (8003980 <std+0x60>)
 800394c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800394e:	4b0d      	ldr	r3, [pc, #52]	@ (8003984 <std+0x64>)
 8003950:	6323      	str	r3, [r4, #48]	@ 0x30
 8003952:	4b0d      	ldr	r3, [pc, #52]	@ (8003988 <std+0x68>)
 8003954:	6224      	str	r4, [r4, #32]
 8003956:	429c      	cmp	r4, r3
 8003958:	d006      	beq.n	8003968 <std+0x48>
 800395a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800395e:	4294      	cmp	r4, r2
 8003960:	d002      	beq.n	8003968 <std+0x48>
 8003962:	33d0      	adds	r3, #208	@ 0xd0
 8003964:	429c      	cmp	r4, r3
 8003966:	d105      	bne.n	8003974 <std+0x54>
 8003968:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800396c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003970:	f000 b938 	b.w	8003be4 <__retarget_lock_init_recursive>
 8003974:	bd10      	pop	{r4, pc}
 8003976:	bf00      	nop
 8003978:	080043c1 	.word	0x080043c1
 800397c:	080043e3 	.word	0x080043e3
 8003980:	0800441b 	.word	0x0800441b
 8003984:	0800443f 	.word	0x0800443f
 8003988:	20000388 	.word	0x20000388

0800398c <stdio_exit_handler>:
 800398c:	4a02      	ldr	r2, [pc, #8]	@ (8003998 <stdio_exit_handler+0xc>)
 800398e:	4903      	ldr	r1, [pc, #12]	@ (800399c <stdio_exit_handler+0x10>)
 8003990:	4803      	ldr	r0, [pc, #12]	@ (80039a0 <stdio_exit_handler+0x14>)
 8003992:	f000 b869 	b.w	8003a68 <_fwalk_sglue>
 8003996:	bf00      	nop
 8003998:	20000164 	.word	0x20000164
 800399c:	08004371 	.word	0x08004371
 80039a0:	20000174 	.word	0x20000174

080039a4 <cleanup_stdio>:
 80039a4:	6841      	ldr	r1, [r0, #4]
 80039a6:	4b0c      	ldr	r3, [pc, #48]	@ (80039d8 <cleanup_stdio+0x34>)
 80039a8:	4299      	cmp	r1, r3
 80039aa:	b510      	push	{r4, lr}
 80039ac:	4604      	mov	r4, r0
 80039ae:	d001      	beq.n	80039b4 <cleanup_stdio+0x10>
 80039b0:	f000 fcde 	bl	8004370 <_fflush_r>
 80039b4:	68a1      	ldr	r1, [r4, #8]
 80039b6:	4b09      	ldr	r3, [pc, #36]	@ (80039dc <cleanup_stdio+0x38>)
 80039b8:	4299      	cmp	r1, r3
 80039ba:	d002      	beq.n	80039c2 <cleanup_stdio+0x1e>
 80039bc:	4620      	mov	r0, r4
 80039be:	f000 fcd7 	bl	8004370 <_fflush_r>
 80039c2:	68e1      	ldr	r1, [r4, #12]
 80039c4:	4b06      	ldr	r3, [pc, #24]	@ (80039e0 <cleanup_stdio+0x3c>)
 80039c6:	4299      	cmp	r1, r3
 80039c8:	d004      	beq.n	80039d4 <cleanup_stdio+0x30>
 80039ca:	4620      	mov	r0, r4
 80039cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039d0:	f000 bcce 	b.w	8004370 <_fflush_r>
 80039d4:	bd10      	pop	{r4, pc}
 80039d6:	bf00      	nop
 80039d8:	20000388 	.word	0x20000388
 80039dc:	200003f0 	.word	0x200003f0
 80039e0:	20000458 	.word	0x20000458

080039e4 <global_stdio_init.part.0>:
 80039e4:	b510      	push	{r4, lr}
 80039e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003a14 <global_stdio_init.part.0+0x30>)
 80039e8:	4c0b      	ldr	r4, [pc, #44]	@ (8003a18 <global_stdio_init.part.0+0x34>)
 80039ea:	4a0c      	ldr	r2, [pc, #48]	@ (8003a1c <global_stdio_init.part.0+0x38>)
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	4620      	mov	r0, r4
 80039f0:	2200      	movs	r2, #0
 80039f2:	2104      	movs	r1, #4
 80039f4:	f7ff ff94 	bl	8003920 <std>
 80039f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80039fc:	2201      	movs	r2, #1
 80039fe:	2109      	movs	r1, #9
 8003a00:	f7ff ff8e 	bl	8003920 <std>
 8003a04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003a08:	2202      	movs	r2, #2
 8003a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a0e:	2112      	movs	r1, #18
 8003a10:	f7ff bf86 	b.w	8003920 <std>
 8003a14:	200004c0 	.word	0x200004c0
 8003a18:	20000388 	.word	0x20000388
 8003a1c:	0800398d 	.word	0x0800398d

08003a20 <__sfp_lock_acquire>:
 8003a20:	4801      	ldr	r0, [pc, #4]	@ (8003a28 <__sfp_lock_acquire+0x8>)
 8003a22:	f000 b8e0 	b.w	8003be6 <__retarget_lock_acquire_recursive>
 8003a26:	bf00      	nop
 8003a28:	200004c5 	.word	0x200004c5

08003a2c <__sfp_lock_release>:
 8003a2c:	4801      	ldr	r0, [pc, #4]	@ (8003a34 <__sfp_lock_release+0x8>)
 8003a2e:	f000 b8db 	b.w	8003be8 <__retarget_lock_release_recursive>
 8003a32:	bf00      	nop
 8003a34:	200004c5 	.word	0x200004c5

08003a38 <__sinit>:
 8003a38:	b510      	push	{r4, lr}
 8003a3a:	4604      	mov	r4, r0
 8003a3c:	f7ff fff0 	bl	8003a20 <__sfp_lock_acquire>
 8003a40:	6a23      	ldr	r3, [r4, #32]
 8003a42:	b11b      	cbz	r3, 8003a4c <__sinit+0x14>
 8003a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a48:	f7ff bff0 	b.w	8003a2c <__sfp_lock_release>
 8003a4c:	4b04      	ldr	r3, [pc, #16]	@ (8003a60 <__sinit+0x28>)
 8003a4e:	6223      	str	r3, [r4, #32]
 8003a50:	4b04      	ldr	r3, [pc, #16]	@ (8003a64 <__sinit+0x2c>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1f5      	bne.n	8003a44 <__sinit+0xc>
 8003a58:	f7ff ffc4 	bl	80039e4 <global_stdio_init.part.0>
 8003a5c:	e7f2      	b.n	8003a44 <__sinit+0xc>
 8003a5e:	bf00      	nop
 8003a60:	080039a5 	.word	0x080039a5
 8003a64:	200004c0 	.word	0x200004c0

08003a68 <_fwalk_sglue>:
 8003a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a6c:	4607      	mov	r7, r0
 8003a6e:	4688      	mov	r8, r1
 8003a70:	4614      	mov	r4, r2
 8003a72:	2600      	movs	r6, #0
 8003a74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a78:	f1b9 0901 	subs.w	r9, r9, #1
 8003a7c:	d505      	bpl.n	8003a8a <_fwalk_sglue+0x22>
 8003a7e:	6824      	ldr	r4, [r4, #0]
 8003a80:	2c00      	cmp	r4, #0
 8003a82:	d1f7      	bne.n	8003a74 <_fwalk_sglue+0xc>
 8003a84:	4630      	mov	r0, r6
 8003a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a8a:	89ab      	ldrh	r3, [r5, #12]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d907      	bls.n	8003aa0 <_fwalk_sglue+0x38>
 8003a90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a94:	3301      	adds	r3, #1
 8003a96:	d003      	beq.n	8003aa0 <_fwalk_sglue+0x38>
 8003a98:	4629      	mov	r1, r5
 8003a9a:	4638      	mov	r0, r7
 8003a9c:	47c0      	blx	r8
 8003a9e:	4306      	orrs	r6, r0
 8003aa0:	3568      	adds	r5, #104	@ 0x68
 8003aa2:	e7e9      	b.n	8003a78 <_fwalk_sglue+0x10>

08003aa4 <_puts_r>:
 8003aa4:	6a03      	ldr	r3, [r0, #32]
 8003aa6:	b570      	push	{r4, r5, r6, lr}
 8003aa8:	6884      	ldr	r4, [r0, #8]
 8003aaa:	4605      	mov	r5, r0
 8003aac:	460e      	mov	r6, r1
 8003aae:	b90b      	cbnz	r3, 8003ab4 <_puts_r+0x10>
 8003ab0:	f7ff ffc2 	bl	8003a38 <__sinit>
 8003ab4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003ab6:	07db      	lsls	r3, r3, #31
 8003ab8:	d405      	bmi.n	8003ac6 <_puts_r+0x22>
 8003aba:	89a3      	ldrh	r3, [r4, #12]
 8003abc:	0598      	lsls	r0, r3, #22
 8003abe:	d402      	bmi.n	8003ac6 <_puts_r+0x22>
 8003ac0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ac2:	f000 f890 	bl	8003be6 <__retarget_lock_acquire_recursive>
 8003ac6:	89a3      	ldrh	r3, [r4, #12]
 8003ac8:	0719      	lsls	r1, r3, #28
 8003aca:	d502      	bpl.n	8003ad2 <_puts_r+0x2e>
 8003acc:	6923      	ldr	r3, [r4, #16]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d135      	bne.n	8003b3e <_puts_r+0x9a>
 8003ad2:	4621      	mov	r1, r4
 8003ad4:	4628      	mov	r0, r5
 8003ad6:	f000 fd23 	bl	8004520 <__swsetup_r>
 8003ada:	b380      	cbz	r0, 8003b3e <_puts_r+0x9a>
 8003adc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8003ae0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003ae2:	07da      	lsls	r2, r3, #31
 8003ae4:	d405      	bmi.n	8003af2 <_puts_r+0x4e>
 8003ae6:	89a3      	ldrh	r3, [r4, #12]
 8003ae8:	059b      	lsls	r3, r3, #22
 8003aea:	d402      	bmi.n	8003af2 <_puts_r+0x4e>
 8003aec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003aee:	f000 f87b 	bl	8003be8 <__retarget_lock_release_recursive>
 8003af2:	4628      	mov	r0, r5
 8003af4:	bd70      	pop	{r4, r5, r6, pc}
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	da04      	bge.n	8003b04 <_puts_r+0x60>
 8003afa:	69a2      	ldr	r2, [r4, #24]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	dc17      	bgt.n	8003b30 <_puts_r+0x8c>
 8003b00:	290a      	cmp	r1, #10
 8003b02:	d015      	beq.n	8003b30 <_puts_r+0x8c>
 8003b04:	6823      	ldr	r3, [r4, #0]
 8003b06:	1c5a      	adds	r2, r3, #1
 8003b08:	6022      	str	r2, [r4, #0]
 8003b0a:	7019      	strb	r1, [r3, #0]
 8003b0c:	68a3      	ldr	r3, [r4, #8]
 8003b0e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003b12:	3b01      	subs	r3, #1
 8003b14:	60a3      	str	r3, [r4, #8]
 8003b16:	2900      	cmp	r1, #0
 8003b18:	d1ed      	bne.n	8003af6 <_puts_r+0x52>
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	da11      	bge.n	8003b42 <_puts_r+0x9e>
 8003b1e:	4622      	mov	r2, r4
 8003b20:	210a      	movs	r1, #10
 8003b22:	4628      	mov	r0, r5
 8003b24:	f000 fcbd 	bl	80044a2 <__swbuf_r>
 8003b28:	3001      	adds	r0, #1
 8003b2a:	d0d7      	beq.n	8003adc <_puts_r+0x38>
 8003b2c:	250a      	movs	r5, #10
 8003b2e:	e7d7      	b.n	8003ae0 <_puts_r+0x3c>
 8003b30:	4622      	mov	r2, r4
 8003b32:	4628      	mov	r0, r5
 8003b34:	f000 fcb5 	bl	80044a2 <__swbuf_r>
 8003b38:	3001      	adds	r0, #1
 8003b3a:	d1e7      	bne.n	8003b0c <_puts_r+0x68>
 8003b3c:	e7ce      	b.n	8003adc <_puts_r+0x38>
 8003b3e:	3e01      	subs	r6, #1
 8003b40:	e7e4      	b.n	8003b0c <_puts_r+0x68>
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	1c5a      	adds	r2, r3, #1
 8003b46:	6022      	str	r2, [r4, #0]
 8003b48:	220a      	movs	r2, #10
 8003b4a:	701a      	strb	r2, [r3, #0]
 8003b4c:	e7ee      	b.n	8003b2c <_puts_r+0x88>
	...

08003b50 <puts>:
 8003b50:	4b02      	ldr	r3, [pc, #8]	@ (8003b5c <puts+0xc>)
 8003b52:	4601      	mov	r1, r0
 8003b54:	6818      	ldr	r0, [r3, #0]
 8003b56:	f7ff bfa5 	b.w	8003aa4 <_puts_r>
 8003b5a:	bf00      	nop
 8003b5c:	20000170 	.word	0x20000170

08003b60 <memset>:
 8003b60:	4402      	add	r2, r0
 8003b62:	4603      	mov	r3, r0
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d100      	bne.n	8003b6a <memset+0xa>
 8003b68:	4770      	bx	lr
 8003b6a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b6e:	e7f9      	b.n	8003b64 <memset+0x4>

08003b70 <_sbrk_r>:
 8003b70:	b538      	push	{r3, r4, r5, lr}
 8003b72:	4d06      	ldr	r5, [pc, #24]	@ (8003b8c <_sbrk_r+0x1c>)
 8003b74:	2300      	movs	r3, #0
 8003b76:	4604      	mov	r4, r0
 8003b78:	4608      	mov	r0, r1
 8003b7a:	602b      	str	r3, [r5, #0]
 8003b7c:	f7fd fd22 	bl	80015c4 <_sbrk>
 8003b80:	1c43      	adds	r3, r0, #1
 8003b82:	d102      	bne.n	8003b8a <_sbrk_r+0x1a>
 8003b84:	682b      	ldr	r3, [r5, #0]
 8003b86:	b103      	cbz	r3, 8003b8a <_sbrk_r+0x1a>
 8003b88:	6023      	str	r3, [r4, #0]
 8003b8a:	bd38      	pop	{r3, r4, r5, pc}
 8003b8c:	200004c8 	.word	0x200004c8

08003b90 <__errno>:
 8003b90:	4b01      	ldr	r3, [pc, #4]	@ (8003b98 <__errno+0x8>)
 8003b92:	6818      	ldr	r0, [r3, #0]
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	20000170 	.word	0x20000170

08003b9c <__libc_init_array>:
 8003b9c:	b570      	push	{r4, r5, r6, lr}
 8003b9e:	4d0d      	ldr	r5, [pc, #52]	@ (8003bd4 <__libc_init_array+0x38>)
 8003ba0:	4c0d      	ldr	r4, [pc, #52]	@ (8003bd8 <__libc_init_array+0x3c>)
 8003ba2:	1b64      	subs	r4, r4, r5
 8003ba4:	10a4      	asrs	r4, r4, #2
 8003ba6:	2600      	movs	r6, #0
 8003ba8:	42a6      	cmp	r6, r4
 8003baa:	d109      	bne.n	8003bc0 <__libc_init_array+0x24>
 8003bac:	4d0b      	ldr	r5, [pc, #44]	@ (8003bdc <__libc_init_array+0x40>)
 8003bae:	4c0c      	ldr	r4, [pc, #48]	@ (8003be0 <__libc_init_array+0x44>)
 8003bb0:	f000 fdf8 	bl	80047a4 <_init>
 8003bb4:	1b64      	subs	r4, r4, r5
 8003bb6:	10a4      	asrs	r4, r4, #2
 8003bb8:	2600      	movs	r6, #0
 8003bba:	42a6      	cmp	r6, r4
 8003bbc:	d105      	bne.n	8003bca <__libc_init_array+0x2e>
 8003bbe:	bd70      	pop	{r4, r5, r6, pc}
 8003bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bc4:	4798      	blx	r3
 8003bc6:	3601      	adds	r6, #1
 8003bc8:	e7ee      	b.n	8003ba8 <__libc_init_array+0xc>
 8003bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bce:	4798      	blx	r3
 8003bd0:	3601      	adds	r6, #1
 8003bd2:	e7f2      	b.n	8003bba <__libc_init_array+0x1e>
 8003bd4:	080048b8 	.word	0x080048b8
 8003bd8:	080048b8 	.word	0x080048b8
 8003bdc:	080048b8 	.word	0x080048b8
 8003be0:	080048bc 	.word	0x080048bc

08003be4 <__retarget_lock_init_recursive>:
 8003be4:	4770      	bx	lr

08003be6 <__retarget_lock_acquire_recursive>:
 8003be6:	4770      	bx	lr

08003be8 <__retarget_lock_release_recursive>:
 8003be8:	4770      	bx	lr

08003bea <memcpy>:
 8003bea:	440a      	add	r2, r1
 8003bec:	4291      	cmp	r1, r2
 8003bee:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003bf2:	d100      	bne.n	8003bf6 <memcpy+0xc>
 8003bf4:	4770      	bx	lr
 8003bf6:	b510      	push	{r4, lr}
 8003bf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003bfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c00:	4291      	cmp	r1, r2
 8003c02:	d1f9      	bne.n	8003bf8 <memcpy+0xe>
 8003c04:	bd10      	pop	{r4, pc}
	...

08003c08 <_free_r>:
 8003c08:	b538      	push	{r3, r4, r5, lr}
 8003c0a:	4605      	mov	r5, r0
 8003c0c:	2900      	cmp	r1, #0
 8003c0e:	d041      	beq.n	8003c94 <_free_r+0x8c>
 8003c10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c14:	1f0c      	subs	r4, r1, #4
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	bfb8      	it	lt
 8003c1a:	18e4      	addlt	r4, r4, r3
 8003c1c:	f7ff fe54 	bl	80038c8 <__malloc_lock>
 8003c20:	4a1d      	ldr	r2, [pc, #116]	@ (8003c98 <_free_r+0x90>)
 8003c22:	6813      	ldr	r3, [r2, #0]
 8003c24:	b933      	cbnz	r3, 8003c34 <_free_r+0x2c>
 8003c26:	6063      	str	r3, [r4, #4]
 8003c28:	6014      	str	r4, [r2, #0]
 8003c2a:	4628      	mov	r0, r5
 8003c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c30:	f7ff be50 	b.w	80038d4 <__malloc_unlock>
 8003c34:	42a3      	cmp	r3, r4
 8003c36:	d908      	bls.n	8003c4a <_free_r+0x42>
 8003c38:	6820      	ldr	r0, [r4, #0]
 8003c3a:	1821      	adds	r1, r4, r0
 8003c3c:	428b      	cmp	r3, r1
 8003c3e:	bf01      	itttt	eq
 8003c40:	6819      	ldreq	r1, [r3, #0]
 8003c42:	685b      	ldreq	r3, [r3, #4]
 8003c44:	1809      	addeq	r1, r1, r0
 8003c46:	6021      	streq	r1, [r4, #0]
 8003c48:	e7ed      	b.n	8003c26 <_free_r+0x1e>
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	b10b      	cbz	r3, 8003c54 <_free_r+0x4c>
 8003c50:	42a3      	cmp	r3, r4
 8003c52:	d9fa      	bls.n	8003c4a <_free_r+0x42>
 8003c54:	6811      	ldr	r1, [r2, #0]
 8003c56:	1850      	adds	r0, r2, r1
 8003c58:	42a0      	cmp	r0, r4
 8003c5a:	d10b      	bne.n	8003c74 <_free_r+0x6c>
 8003c5c:	6820      	ldr	r0, [r4, #0]
 8003c5e:	4401      	add	r1, r0
 8003c60:	1850      	adds	r0, r2, r1
 8003c62:	4283      	cmp	r3, r0
 8003c64:	6011      	str	r1, [r2, #0]
 8003c66:	d1e0      	bne.n	8003c2a <_free_r+0x22>
 8003c68:	6818      	ldr	r0, [r3, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	6053      	str	r3, [r2, #4]
 8003c6e:	4408      	add	r0, r1
 8003c70:	6010      	str	r0, [r2, #0]
 8003c72:	e7da      	b.n	8003c2a <_free_r+0x22>
 8003c74:	d902      	bls.n	8003c7c <_free_r+0x74>
 8003c76:	230c      	movs	r3, #12
 8003c78:	602b      	str	r3, [r5, #0]
 8003c7a:	e7d6      	b.n	8003c2a <_free_r+0x22>
 8003c7c:	6820      	ldr	r0, [r4, #0]
 8003c7e:	1821      	adds	r1, r4, r0
 8003c80:	428b      	cmp	r3, r1
 8003c82:	bf04      	itt	eq
 8003c84:	6819      	ldreq	r1, [r3, #0]
 8003c86:	685b      	ldreq	r3, [r3, #4]
 8003c88:	6063      	str	r3, [r4, #4]
 8003c8a:	bf04      	itt	eq
 8003c8c:	1809      	addeq	r1, r1, r0
 8003c8e:	6021      	streq	r1, [r4, #0]
 8003c90:	6054      	str	r4, [r2, #4]
 8003c92:	e7ca      	b.n	8003c2a <_free_r+0x22>
 8003c94:	bd38      	pop	{r3, r4, r5, pc}
 8003c96:	bf00      	nop
 8003c98:	20000384 	.word	0x20000384

08003c9c <__ssputs_r>:
 8003c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ca0:	688e      	ldr	r6, [r1, #8]
 8003ca2:	461f      	mov	r7, r3
 8003ca4:	42be      	cmp	r6, r7
 8003ca6:	680b      	ldr	r3, [r1, #0]
 8003ca8:	4682      	mov	sl, r0
 8003caa:	460c      	mov	r4, r1
 8003cac:	4690      	mov	r8, r2
 8003cae:	d82d      	bhi.n	8003d0c <__ssputs_r+0x70>
 8003cb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003cb4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003cb8:	d026      	beq.n	8003d08 <__ssputs_r+0x6c>
 8003cba:	6965      	ldr	r5, [r4, #20]
 8003cbc:	6909      	ldr	r1, [r1, #16]
 8003cbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cc2:	eba3 0901 	sub.w	r9, r3, r1
 8003cc6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003cca:	1c7b      	adds	r3, r7, #1
 8003ccc:	444b      	add	r3, r9
 8003cce:	106d      	asrs	r5, r5, #1
 8003cd0:	429d      	cmp	r5, r3
 8003cd2:	bf38      	it	cc
 8003cd4:	461d      	movcc	r5, r3
 8003cd6:	0553      	lsls	r3, r2, #21
 8003cd8:	d527      	bpl.n	8003d2a <__ssputs_r+0x8e>
 8003cda:	4629      	mov	r1, r5
 8003cdc:	f7ff fd74 	bl	80037c8 <_malloc_r>
 8003ce0:	4606      	mov	r6, r0
 8003ce2:	b360      	cbz	r0, 8003d3e <__ssputs_r+0xa2>
 8003ce4:	6921      	ldr	r1, [r4, #16]
 8003ce6:	464a      	mov	r2, r9
 8003ce8:	f7ff ff7f 	bl	8003bea <memcpy>
 8003cec:	89a3      	ldrh	r3, [r4, #12]
 8003cee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003cf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cf6:	81a3      	strh	r3, [r4, #12]
 8003cf8:	6126      	str	r6, [r4, #16]
 8003cfa:	6165      	str	r5, [r4, #20]
 8003cfc:	444e      	add	r6, r9
 8003cfe:	eba5 0509 	sub.w	r5, r5, r9
 8003d02:	6026      	str	r6, [r4, #0]
 8003d04:	60a5      	str	r5, [r4, #8]
 8003d06:	463e      	mov	r6, r7
 8003d08:	42be      	cmp	r6, r7
 8003d0a:	d900      	bls.n	8003d0e <__ssputs_r+0x72>
 8003d0c:	463e      	mov	r6, r7
 8003d0e:	6820      	ldr	r0, [r4, #0]
 8003d10:	4632      	mov	r2, r6
 8003d12:	4641      	mov	r1, r8
 8003d14:	f000 fcbc 	bl	8004690 <memmove>
 8003d18:	68a3      	ldr	r3, [r4, #8]
 8003d1a:	1b9b      	subs	r3, r3, r6
 8003d1c:	60a3      	str	r3, [r4, #8]
 8003d1e:	6823      	ldr	r3, [r4, #0]
 8003d20:	4433      	add	r3, r6
 8003d22:	6023      	str	r3, [r4, #0]
 8003d24:	2000      	movs	r0, #0
 8003d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d2a:	462a      	mov	r2, r5
 8003d2c:	f000 fb8b 	bl	8004446 <_realloc_r>
 8003d30:	4606      	mov	r6, r0
 8003d32:	2800      	cmp	r0, #0
 8003d34:	d1e0      	bne.n	8003cf8 <__ssputs_r+0x5c>
 8003d36:	6921      	ldr	r1, [r4, #16]
 8003d38:	4650      	mov	r0, sl
 8003d3a:	f7ff ff65 	bl	8003c08 <_free_r>
 8003d3e:	230c      	movs	r3, #12
 8003d40:	f8ca 3000 	str.w	r3, [sl]
 8003d44:	89a3      	ldrh	r3, [r4, #12]
 8003d46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d4a:	81a3      	strh	r3, [r4, #12]
 8003d4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d50:	e7e9      	b.n	8003d26 <__ssputs_r+0x8a>
	...

08003d54 <_svfiprintf_r>:
 8003d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d58:	4698      	mov	r8, r3
 8003d5a:	898b      	ldrh	r3, [r1, #12]
 8003d5c:	061b      	lsls	r3, r3, #24
 8003d5e:	b09d      	sub	sp, #116	@ 0x74
 8003d60:	4607      	mov	r7, r0
 8003d62:	460d      	mov	r5, r1
 8003d64:	4614      	mov	r4, r2
 8003d66:	d510      	bpl.n	8003d8a <_svfiprintf_r+0x36>
 8003d68:	690b      	ldr	r3, [r1, #16]
 8003d6a:	b973      	cbnz	r3, 8003d8a <_svfiprintf_r+0x36>
 8003d6c:	2140      	movs	r1, #64	@ 0x40
 8003d6e:	f7ff fd2b 	bl	80037c8 <_malloc_r>
 8003d72:	6028      	str	r0, [r5, #0]
 8003d74:	6128      	str	r0, [r5, #16]
 8003d76:	b930      	cbnz	r0, 8003d86 <_svfiprintf_r+0x32>
 8003d78:	230c      	movs	r3, #12
 8003d7a:	603b      	str	r3, [r7, #0]
 8003d7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d80:	b01d      	add	sp, #116	@ 0x74
 8003d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d86:	2340      	movs	r3, #64	@ 0x40
 8003d88:	616b      	str	r3, [r5, #20]
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d8e:	2320      	movs	r3, #32
 8003d90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003d94:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d98:	2330      	movs	r3, #48	@ 0x30
 8003d9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003f38 <_svfiprintf_r+0x1e4>
 8003d9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003da2:	f04f 0901 	mov.w	r9, #1
 8003da6:	4623      	mov	r3, r4
 8003da8:	469a      	mov	sl, r3
 8003daa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dae:	b10a      	cbz	r2, 8003db4 <_svfiprintf_r+0x60>
 8003db0:	2a25      	cmp	r2, #37	@ 0x25
 8003db2:	d1f9      	bne.n	8003da8 <_svfiprintf_r+0x54>
 8003db4:	ebba 0b04 	subs.w	fp, sl, r4
 8003db8:	d00b      	beq.n	8003dd2 <_svfiprintf_r+0x7e>
 8003dba:	465b      	mov	r3, fp
 8003dbc:	4622      	mov	r2, r4
 8003dbe:	4629      	mov	r1, r5
 8003dc0:	4638      	mov	r0, r7
 8003dc2:	f7ff ff6b 	bl	8003c9c <__ssputs_r>
 8003dc6:	3001      	adds	r0, #1
 8003dc8:	f000 80a7 	beq.w	8003f1a <_svfiprintf_r+0x1c6>
 8003dcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003dce:	445a      	add	r2, fp
 8003dd0:	9209      	str	r2, [sp, #36]	@ 0x24
 8003dd2:	f89a 3000 	ldrb.w	r3, [sl]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 809f 	beq.w	8003f1a <_svfiprintf_r+0x1c6>
 8003ddc:	2300      	movs	r3, #0
 8003dde:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003de2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003de6:	f10a 0a01 	add.w	sl, sl, #1
 8003dea:	9304      	str	r3, [sp, #16]
 8003dec:	9307      	str	r3, [sp, #28]
 8003dee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003df2:	931a      	str	r3, [sp, #104]	@ 0x68
 8003df4:	4654      	mov	r4, sl
 8003df6:	2205      	movs	r2, #5
 8003df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dfc:	484e      	ldr	r0, [pc, #312]	@ (8003f38 <_svfiprintf_r+0x1e4>)
 8003dfe:	f7fc f9ef 	bl	80001e0 <memchr>
 8003e02:	9a04      	ldr	r2, [sp, #16]
 8003e04:	b9d8      	cbnz	r0, 8003e3e <_svfiprintf_r+0xea>
 8003e06:	06d0      	lsls	r0, r2, #27
 8003e08:	bf44      	itt	mi
 8003e0a:	2320      	movmi	r3, #32
 8003e0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e10:	0711      	lsls	r1, r2, #28
 8003e12:	bf44      	itt	mi
 8003e14:	232b      	movmi	r3, #43	@ 0x2b
 8003e16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e1a:	f89a 3000 	ldrb.w	r3, [sl]
 8003e1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e20:	d015      	beq.n	8003e4e <_svfiprintf_r+0xfa>
 8003e22:	9a07      	ldr	r2, [sp, #28]
 8003e24:	4654      	mov	r4, sl
 8003e26:	2000      	movs	r0, #0
 8003e28:	f04f 0c0a 	mov.w	ip, #10
 8003e2c:	4621      	mov	r1, r4
 8003e2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e32:	3b30      	subs	r3, #48	@ 0x30
 8003e34:	2b09      	cmp	r3, #9
 8003e36:	d94b      	bls.n	8003ed0 <_svfiprintf_r+0x17c>
 8003e38:	b1b0      	cbz	r0, 8003e68 <_svfiprintf_r+0x114>
 8003e3a:	9207      	str	r2, [sp, #28]
 8003e3c:	e014      	b.n	8003e68 <_svfiprintf_r+0x114>
 8003e3e:	eba0 0308 	sub.w	r3, r0, r8
 8003e42:	fa09 f303 	lsl.w	r3, r9, r3
 8003e46:	4313      	orrs	r3, r2
 8003e48:	9304      	str	r3, [sp, #16]
 8003e4a:	46a2      	mov	sl, r4
 8003e4c:	e7d2      	b.n	8003df4 <_svfiprintf_r+0xa0>
 8003e4e:	9b03      	ldr	r3, [sp, #12]
 8003e50:	1d19      	adds	r1, r3, #4
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	9103      	str	r1, [sp, #12]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	bfbb      	ittet	lt
 8003e5a:	425b      	neglt	r3, r3
 8003e5c:	f042 0202 	orrlt.w	r2, r2, #2
 8003e60:	9307      	strge	r3, [sp, #28]
 8003e62:	9307      	strlt	r3, [sp, #28]
 8003e64:	bfb8      	it	lt
 8003e66:	9204      	strlt	r2, [sp, #16]
 8003e68:	7823      	ldrb	r3, [r4, #0]
 8003e6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e6c:	d10a      	bne.n	8003e84 <_svfiprintf_r+0x130>
 8003e6e:	7863      	ldrb	r3, [r4, #1]
 8003e70:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e72:	d132      	bne.n	8003eda <_svfiprintf_r+0x186>
 8003e74:	9b03      	ldr	r3, [sp, #12]
 8003e76:	1d1a      	adds	r2, r3, #4
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	9203      	str	r2, [sp, #12]
 8003e7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003e80:	3402      	adds	r4, #2
 8003e82:	9305      	str	r3, [sp, #20]
 8003e84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003f48 <_svfiprintf_r+0x1f4>
 8003e88:	7821      	ldrb	r1, [r4, #0]
 8003e8a:	2203      	movs	r2, #3
 8003e8c:	4650      	mov	r0, sl
 8003e8e:	f7fc f9a7 	bl	80001e0 <memchr>
 8003e92:	b138      	cbz	r0, 8003ea4 <_svfiprintf_r+0x150>
 8003e94:	9b04      	ldr	r3, [sp, #16]
 8003e96:	eba0 000a 	sub.w	r0, r0, sl
 8003e9a:	2240      	movs	r2, #64	@ 0x40
 8003e9c:	4082      	lsls	r2, r0
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	3401      	adds	r4, #1
 8003ea2:	9304      	str	r3, [sp, #16]
 8003ea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ea8:	4824      	ldr	r0, [pc, #144]	@ (8003f3c <_svfiprintf_r+0x1e8>)
 8003eaa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003eae:	2206      	movs	r2, #6
 8003eb0:	f7fc f996 	bl	80001e0 <memchr>
 8003eb4:	2800      	cmp	r0, #0
 8003eb6:	d036      	beq.n	8003f26 <_svfiprintf_r+0x1d2>
 8003eb8:	4b21      	ldr	r3, [pc, #132]	@ (8003f40 <_svfiprintf_r+0x1ec>)
 8003eba:	bb1b      	cbnz	r3, 8003f04 <_svfiprintf_r+0x1b0>
 8003ebc:	9b03      	ldr	r3, [sp, #12]
 8003ebe:	3307      	adds	r3, #7
 8003ec0:	f023 0307 	bic.w	r3, r3, #7
 8003ec4:	3308      	adds	r3, #8
 8003ec6:	9303      	str	r3, [sp, #12]
 8003ec8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003eca:	4433      	add	r3, r6
 8003ecc:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ece:	e76a      	b.n	8003da6 <_svfiprintf_r+0x52>
 8003ed0:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ed4:	460c      	mov	r4, r1
 8003ed6:	2001      	movs	r0, #1
 8003ed8:	e7a8      	b.n	8003e2c <_svfiprintf_r+0xd8>
 8003eda:	2300      	movs	r3, #0
 8003edc:	3401      	adds	r4, #1
 8003ede:	9305      	str	r3, [sp, #20]
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	f04f 0c0a 	mov.w	ip, #10
 8003ee6:	4620      	mov	r0, r4
 8003ee8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003eec:	3a30      	subs	r2, #48	@ 0x30
 8003eee:	2a09      	cmp	r2, #9
 8003ef0:	d903      	bls.n	8003efa <_svfiprintf_r+0x1a6>
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0c6      	beq.n	8003e84 <_svfiprintf_r+0x130>
 8003ef6:	9105      	str	r1, [sp, #20]
 8003ef8:	e7c4      	b.n	8003e84 <_svfiprintf_r+0x130>
 8003efa:	fb0c 2101 	mla	r1, ip, r1, r2
 8003efe:	4604      	mov	r4, r0
 8003f00:	2301      	movs	r3, #1
 8003f02:	e7f0      	b.n	8003ee6 <_svfiprintf_r+0x192>
 8003f04:	ab03      	add	r3, sp, #12
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	462a      	mov	r2, r5
 8003f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8003f44 <_svfiprintf_r+0x1f0>)
 8003f0c:	a904      	add	r1, sp, #16
 8003f0e:	4638      	mov	r0, r7
 8003f10:	f3af 8000 	nop.w
 8003f14:	1c42      	adds	r2, r0, #1
 8003f16:	4606      	mov	r6, r0
 8003f18:	d1d6      	bne.n	8003ec8 <_svfiprintf_r+0x174>
 8003f1a:	89ab      	ldrh	r3, [r5, #12]
 8003f1c:	065b      	lsls	r3, r3, #25
 8003f1e:	f53f af2d 	bmi.w	8003d7c <_svfiprintf_r+0x28>
 8003f22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003f24:	e72c      	b.n	8003d80 <_svfiprintf_r+0x2c>
 8003f26:	ab03      	add	r3, sp, #12
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	462a      	mov	r2, r5
 8003f2c:	4b05      	ldr	r3, [pc, #20]	@ (8003f44 <_svfiprintf_r+0x1f0>)
 8003f2e:	a904      	add	r1, sp, #16
 8003f30:	4638      	mov	r0, r7
 8003f32:	f000 f879 	bl	8004028 <_printf_i>
 8003f36:	e7ed      	b.n	8003f14 <_svfiprintf_r+0x1c0>
 8003f38:	0800487c 	.word	0x0800487c
 8003f3c:	08004886 	.word	0x08004886
 8003f40:	00000000 	.word	0x00000000
 8003f44:	08003c9d 	.word	0x08003c9d
 8003f48:	08004882 	.word	0x08004882

08003f4c <_printf_common>:
 8003f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f50:	4616      	mov	r6, r2
 8003f52:	4698      	mov	r8, r3
 8003f54:	688a      	ldr	r2, [r1, #8]
 8003f56:	690b      	ldr	r3, [r1, #16]
 8003f58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	bfb8      	it	lt
 8003f60:	4613      	movlt	r3, r2
 8003f62:	6033      	str	r3, [r6, #0]
 8003f64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003f68:	4607      	mov	r7, r0
 8003f6a:	460c      	mov	r4, r1
 8003f6c:	b10a      	cbz	r2, 8003f72 <_printf_common+0x26>
 8003f6e:	3301      	adds	r3, #1
 8003f70:	6033      	str	r3, [r6, #0]
 8003f72:	6823      	ldr	r3, [r4, #0]
 8003f74:	0699      	lsls	r1, r3, #26
 8003f76:	bf42      	ittt	mi
 8003f78:	6833      	ldrmi	r3, [r6, #0]
 8003f7a:	3302      	addmi	r3, #2
 8003f7c:	6033      	strmi	r3, [r6, #0]
 8003f7e:	6825      	ldr	r5, [r4, #0]
 8003f80:	f015 0506 	ands.w	r5, r5, #6
 8003f84:	d106      	bne.n	8003f94 <_printf_common+0x48>
 8003f86:	f104 0a19 	add.w	sl, r4, #25
 8003f8a:	68e3      	ldr	r3, [r4, #12]
 8003f8c:	6832      	ldr	r2, [r6, #0]
 8003f8e:	1a9b      	subs	r3, r3, r2
 8003f90:	42ab      	cmp	r3, r5
 8003f92:	dc26      	bgt.n	8003fe2 <_printf_common+0x96>
 8003f94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003f98:	6822      	ldr	r2, [r4, #0]
 8003f9a:	3b00      	subs	r3, #0
 8003f9c:	bf18      	it	ne
 8003f9e:	2301      	movne	r3, #1
 8003fa0:	0692      	lsls	r2, r2, #26
 8003fa2:	d42b      	bmi.n	8003ffc <_printf_common+0xb0>
 8003fa4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003fa8:	4641      	mov	r1, r8
 8003faa:	4638      	mov	r0, r7
 8003fac:	47c8      	blx	r9
 8003fae:	3001      	adds	r0, #1
 8003fb0:	d01e      	beq.n	8003ff0 <_printf_common+0xa4>
 8003fb2:	6823      	ldr	r3, [r4, #0]
 8003fb4:	6922      	ldr	r2, [r4, #16]
 8003fb6:	f003 0306 	and.w	r3, r3, #6
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	bf02      	ittt	eq
 8003fbe:	68e5      	ldreq	r5, [r4, #12]
 8003fc0:	6833      	ldreq	r3, [r6, #0]
 8003fc2:	1aed      	subeq	r5, r5, r3
 8003fc4:	68a3      	ldr	r3, [r4, #8]
 8003fc6:	bf0c      	ite	eq
 8003fc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fcc:	2500      	movne	r5, #0
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	bfc4      	itt	gt
 8003fd2:	1a9b      	subgt	r3, r3, r2
 8003fd4:	18ed      	addgt	r5, r5, r3
 8003fd6:	2600      	movs	r6, #0
 8003fd8:	341a      	adds	r4, #26
 8003fda:	42b5      	cmp	r5, r6
 8003fdc:	d11a      	bne.n	8004014 <_printf_common+0xc8>
 8003fde:	2000      	movs	r0, #0
 8003fe0:	e008      	b.n	8003ff4 <_printf_common+0xa8>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	4652      	mov	r2, sl
 8003fe6:	4641      	mov	r1, r8
 8003fe8:	4638      	mov	r0, r7
 8003fea:	47c8      	blx	r9
 8003fec:	3001      	adds	r0, #1
 8003fee:	d103      	bne.n	8003ff8 <_printf_common+0xac>
 8003ff0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ff8:	3501      	adds	r5, #1
 8003ffa:	e7c6      	b.n	8003f8a <_printf_common+0x3e>
 8003ffc:	18e1      	adds	r1, r4, r3
 8003ffe:	1c5a      	adds	r2, r3, #1
 8004000:	2030      	movs	r0, #48	@ 0x30
 8004002:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004006:	4422      	add	r2, r4
 8004008:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800400c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004010:	3302      	adds	r3, #2
 8004012:	e7c7      	b.n	8003fa4 <_printf_common+0x58>
 8004014:	2301      	movs	r3, #1
 8004016:	4622      	mov	r2, r4
 8004018:	4641      	mov	r1, r8
 800401a:	4638      	mov	r0, r7
 800401c:	47c8      	blx	r9
 800401e:	3001      	adds	r0, #1
 8004020:	d0e6      	beq.n	8003ff0 <_printf_common+0xa4>
 8004022:	3601      	adds	r6, #1
 8004024:	e7d9      	b.n	8003fda <_printf_common+0x8e>
	...

08004028 <_printf_i>:
 8004028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800402c:	7e0f      	ldrb	r7, [r1, #24]
 800402e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004030:	2f78      	cmp	r7, #120	@ 0x78
 8004032:	4691      	mov	r9, r2
 8004034:	4680      	mov	r8, r0
 8004036:	460c      	mov	r4, r1
 8004038:	469a      	mov	sl, r3
 800403a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800403e:	d807      	bhi.n	8004050 <_printf_i+0x28>
 8004040:	2f62      	cmp	r7, #98	@ 0x62
 8004042:	d80a      	bhi.n	800405a <_printf_i+0x32>
 8004044:	2f00      	cmp	r7, #0
 8004046:	f000 80d2 	beq.w	80041ee <_printf_i+0x1c6>
 800404a:	2f58      	cmp	r7, #88	@ 0x58
 800404c:	f000 80b9 	beq.w	80041c2 <_printf_i+0x19a>
 8004050:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004054:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004058:	e03a      	b.n	80040d0 <_printf_i+0xa8>
 800405a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800405e:	2b15      	cmp	r3, #21
 8004060:	d8f6      	bhi.n	8004050 <_printf_i+0x28>
 8004062:	a101      	add	r1, pc, #4	@ (adr r1, 8004068 <_printf_i+0x40>)
 8004064:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004068:	080040c1 	.word	0x080040c1
 800406c:	080040d5 	.word	0x080040d5
 8004070:	08004051 	.word	0x08004051
 8004074:	08004051 	.word	0x08004051
 8004078:	08004051 	.word	0x08004051
 800407c:	08004051 	.word	0x08004051
 8004080:	080040d5 	.word	0x080040d5
 8004084:	08004051 	.word	0x08004051
 8004088:	08004051 	.word	0x08004051
 800408c:	08004051 	.word	0x08004051
 8004090:	08004051 	.word	0x08004051
 8004094:	080041d5 	.word	0x080041d5
 8004098:	080040ff 	.word	0x080040ff
 800409c:	0800418f 	.word	0x0800418f
 80040a0:	08004051 	.word	0x08004051
 80040a4:	08004051 	.word	0x08004051
 80040a8:	080041f7 	.word	0x080041f7
 80040ac:	08004051 	.word	0x08004051
 80040b0:	080040ff 	.word	0x080040ff
 80040b4:	08004051 	.word	0x08004051
 80040b8:	08004051 	.word	0x08004051
 80040bc:	08004197 	.word	0x08004197
 80040c0:	6833      	ldr	r3, [r6, #0]
 80040c2:	1d1a      	adds	r2, r3, #4
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6032      	str	r2, [r6, #0]
 80040c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80040cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80040d0:	2301      	movs	r3, #1
 80040d2:	e09d      	b.n	8004210 <_printf_i+0x1e8>
 80040d4:	6833      	ldr	r3, [r6, #0]
 80040d6:	6820      	ldr	r0, [r4, #0]
 80040d8:	1d19      	adds	r1, r3, #4
 80040da:	6031      	str	r1, [r6, #0]
 80040dc:	0606      	lsls	r6, r0, #24
 80040de:	d501      	bpl.n	80040e4 <_printf_i+0xbc>
 80040e0:	681d      	ldr	r5, [r3, #0]
 80040e2:	e003      	b.n	80040ec <_printf_i+0xc4>
 80040e4:	0645      	lsls	r5, r0, #25
 80040e6:	d5fb      	bpl.n	80040e0 <_printf_i+0xb8>
 80040e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80040ec:	2d00      	cmp	r5, #0
 80040ee:	da03      	bge.n	80040f8 <_printf_i+0xd0>
 80040f0:	232d      	movs	r3, #45	@ 0x2d
 80040f2:	426d      	negs	r5, r5
 80040f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040f8:	4859      	ldr	r0, [pc, #356]	@ (8004260 <_printf_i+0x238>)
 80040fa:	230a      	movs	r3, #10
 80040fc:	e011      	b.n	8004122 <_printf_i+0xfa>
 80040fe:	6821      	ldr	r1, [r4, #0]
 8004100:	6833      	ldr	r3, [r6, #0]
 8004102:	0608      	lsls	r0, r1, #24
 8004104:	f853 5b04 	ldr.w	r5, [r3], #4
 8004108:	d402      	bmi.n	8004110 <_printf_i+0xe8>
 800410a:	0649      	lsls	r1, r1, #25
 800410c:	bf48      	it	mi
 800410e:	b2ad      	uxthmi	r5, r5
 8004110:	2f6f      	cmp	r7, #111	@ 0x6f
 8004112:	4853      	ldr	r0, [pc, #332]	@ (8004260 <_printf_i+0x238>)
 8004114:	6033      	str	r3, [r6, #0]
 8004116:	bf14      	ite	ne
 8004118:	230a      	movne	r3, #10
 800411a:	2308      	moveq	r3, #8
 800411c:	2100      	movs	r1, #0
 800411e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004122:	6866      	ldr	r6, [r4, #4]
 8004124:	60a6      	str	r6, [r4, #8]
 8004126:	2e00      	cmp	r6, #0
 8004128:	bfa2      	ittt	ge
 800412a:	6821      	ldrge	r1, [r4, #0]
 800412c:	f021 0104 	bicge.w	r1, r1, #4
 8004130:	6021      	strge	r1, [r4, #0]
 8004132:	b90d      	cbnz	r5, 8004138 <_printf_i+0x110>
 8004134:	2e00      	cmp	r6, #0
 8004136:	d04b      	beq.n	80041d0 <_printf_i+0x1a8>
 8004138:	4616      	mov	r6, r2
 800413a:	fbb5 f1f3 	udiv	r1, r5, r3
 800413e:	fb03 5711 	mls	r7, r3, r1, r5
 8004142:	5dc7      	ldrb	r7, [r0, r7]
 8004144:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004148:	462f      	mov	r7, r5
 800414a:	42bb      	cmp	r3, r7
 800414c:	460d      	mov	r5, r1
 800414e:	d9f4      	bls.n	800413a <_printf_i+0x112>
 8004150:	2b08      	cmp	r3, #8
 8004152:	d10b      	bne.n	800416c <_printf_i+0x144>
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	07df      	lsls	r7, r3, #31
 8004158:	d508      	bpl.n	800416c <_printf_i+0x144>
 800415a:	6923      	ldr	r3, [r4, #16]
 800415c:	6861      	ldr	r1, [r4, #4]
 800415e:	4299      	cmp	r1, r3
 8004160:	bfde      	ittt	le
 8004162:	2330      	movle	r3, #48	@ 0x30
 8004164:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004168:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800416c:	1b92      	subs	r2, r2, r6
 800416e:	6122      	str	r2, [r4, #16]
 8004170:	f8cd a000 	str.w	sl, [sp]
 8004174:	464b      	mov	r3, r9
 8004176:	aa03      	add	r2, sp, #12
 8004178:	4621      	mov	r1, r4
 800417a:	4640      	mov	r0, r8
 800417c:	f7ff fee6 	bl	8003f4c <_printf_common>
 8004180:	3001      	adds	r0, #1
 8004182:	d14a      	bne.n	800421a <_printf_i+0x1f2>
 8004184:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004188:	b004      	add	sp, #16
 800418a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800418e:	6823      	ldr	r3, [r4, #0]
 8004190:	f043 0320 	orr.w	r3, r3, #32
 8004194:	6023      	str	r3, [r4, #0]
 8004196:	4833      	ldr	r0, [pc, #204]	@ (8004264 <_printf_i+0x23c>)
 8004198:	2778      	movs	r7, #120	@ 0x78
 800419a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800419e:	6823      	ldr	r3, [r4, #0]
 80041a0:	6831      	ldr	r1, [r6, #0]
 80041a2:	061f      	lsls	r7, r3, #24
 80041a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80041a8:	d402      	bmi.n	80041b0 <_printf_i+0x188>
 80041aa:	065f      	lsls	r7, r3, #25
 80041ac:	bf48      	it	mi
 80041ae:	b2ad      	uxthmi	r5, r5
 80041b0:	6031      	str	r1, [r6, #0]
 80041b2:	07d9      	lsls	r1, r3, #31
 80041b4:	bf44      	itt	mi
 80041b6:	f043 0320 	orrmi.w	r3, r3, #32
 80041ba:	6023      	strmi	r3, [r4, #0]
 80041bc:	b11d      	cbz	r5, 80041c6 <_printf_i+0x19e>
 80041be:	2310      	movs	r3, #16
 80041c0:	e7ac      	b.n	800411c <_printf_i+0xf4>
 80041c2:	4827      	ldr	r0, [pc, #156]	@ (8004260 <_printf_i+0x238>)
 80041c4:	e7e9      	b.n	800419a <_printf_i+0x172>
 80041c6:	6823      	ldr	r3, [r4, #0]
 80041c8:	f023 0320 	bic.w	r3, r3, #32
 80041cc:	6023      	str	r3, [r4, #0]
 80041ce:	e7f6      	b.n	80041be <_printf_i+0x196>
 80041d0:	4616      	mov	r6, r2
 80041d2:	e7bd      	b.n	8004150 <_printf_i+0x128>
 80041d4:	6833      	ldr	r3, [r6, #0]
 80041d6:	6825      	ldr	r5, [r4, #0]
 80041d8:	6961      	ldr	r1, [r4, #20]
 80041da:	1d18      	adds	r0, r3, #4
 80041dc:	6030      	str	r0, [r6, #0]
 80041de:	062e      	lsls	r6, r5, #24
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	d501      	bpl.n	80041e8 <_printf_i+0x1c0>
 80041e4:	6019      	str	r1, [r3, #0]
 80041e6:	e002      	b.n	80041ee <_printf_i+0x1c6>
 80041e8:	0668      	lsls	r0, r5, #25
 80041ea:	d5fb      	bpl.n	80041e4 <_printf_i+0x1bc>
 80041ec:	8019      	strh	r1, [r3, #0]
 80041ee:	2300      	movs	r3, #0
 80041f0:	6123      	str	r3, [r4, #16]
 80041f2:	4616      	mov	r6, r2
 80041f4:	e7bc      	b.n	8004170 <_printf_i+0x148>
 80041f6:	6833      	ldr	r3, [r6, #0]
 80041f8:	1d1a      	adds	r2, r3, #4
 80041fa:	6032      	str	r2, [r6, #0]
 80041fc:	681e      	ldr	r6, [r3, #0]
 80041fe:	6862      	ldr	r2, [r4, #4]
 8004200:	2100      	movs	r1, #0
 8004202:	4630      	mov	r0, r6
 8004204:	f7fb ffec 	bl	80001e0 <memchr>
 8004208:	b108      	cbz	r0, 800420e <_printf_i+0x1e6>
 800420a:	1b80      	subs	r0, r0, r6
 800420c:	6060      	str	r0, [r4, #4]
 800420e:	6863      	ldr	r3, [r4, #4]
 8004210:	6123      	str	r3, [r4, #16]
 8004212:	2300      	movs	r3, #0
 8004214:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004218:	e7aa      	b.n	8004170 <_printf_i+0x148>
 800421a:	6923      	ldr	r3, [r4, #16]
 800421c:	4632      	mov	r2, r6
 800421e:	4649      	mov	r1, r9
 8004220:	4640      	mov	r0, r8
 8004222:	47d0      	blx	sl
 8004224:	3001      	adds	r0, #1
 8004226:	d0ad      	beq.n	8004184 <_printf_i+0x15c>
 8004228:	6823      	ldr	r3, [r4, #0]
 800422a:	079b      	lsls	r3, r3, #30
 800422c:	d413      	bmi.n	8004256 <_printf_i+0x22e>
 800422e:	68e0      	ldr	r0, [r4, #12]
 8004230:	9b03      	ldr	r3, [sp, #12]
 8004232:	4298      	cmp	r0, r3
 8004234:	bfb8      	it	lt
 8004236:	4618      	movlt	r0, r3
 8004238:	e7a6      	b.n	8004188 <_printf_i+0x160>
 800423a:	2301      	movs	r3, #1
 800423c:	4632      	mov	r2, r6
 800423e:	4649      	mov	r1, r9
 8004240:	4640      	mov	r0, r8
 8004242:	47d0      	blx	sl
 8004244:	3001      	adds	r0, #1
 8004246:	d09d      	beq.n	8004184 <_printf_i+0x15c>
 8004248:	3501      	adds	r5, #1
 800424a:	68e3      	ldr	r3, [r4, #12]
 800424c:	9903      	ldr	r1, [sp, #12]
 800424e:	1a5b      	subs	r3, r3, r1
 8004250:	42ab      	cmp	r3, r5
 8004252:	dcf2      	bgt.n	800423a <_printf_i+0x212>
 8004254:	e7eb      	b.n	800422e <_printf_i+0x206>
 8004256:	2500      	movs	r5, #0
 8004258:	f104 0619 	add.w	r6, r4, #25
 800425c:	e7f5      	b.n	800424a <_printf_i+0x222>
 800425e:	bf00      	nop
 8004260:	0800488d 	.word	0x0800488d
 8004264:	0800489e 	.word	0x0800489e

08004268 <__sflush_r>:
 8004268:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800426c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004270:	0716      	lsls	r6, r2, #28
 8004272:	4605      	mov	r5, r0
 8004274:	460c      	mov	r4, r1
 8004276:	d454      	bmi.n	8004322 <__sflush_r+0xba>
 8004278:	684b      	ldr	r3, [r1, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	dc02      	bgt.n	8004284 <__sflush_r+0x1c>
 800427e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004280:	2b00      	cmp	r3, #0
 8004282:	dd48      	ble.n	8004316 <__sflush_r+0xae>
 8004284:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004286:	2e00      	cmp	r6, #0
 8004288:	d045      	beq.n	8004316 <__sflush_r+0xae>
 800428a:	2300      	movs	r3, #0
 800428c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004290:	682f      	ldr	r7, [r5, #0]
 8004292:	6a21      	ldr	r1, [r4, #32]
 8004294:	602b      	str	r3, [r5, #0]
 8004296:	d030      	beq.n	80042fa <__sflush_r+0x92>
 8004298:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800429a:	89a3      	ldrh	r3, [r4, #12]
 800429c:	0759      	lsls	r1, r3, #29
 800429e:	d505      	bpl.n	80042ac <__sflush_r+0x44>
 80042a0:	6863      	ldr	r3, [r4, #4]
 80042a2:	1ad2      	subs	r2, r2, r3
 80042a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80042a6:	b10b      	cbz	r3, 80042ac <__sflush_r+0x44>
 80042a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80042aa:	1ad2      	subs	r2, r2, r3
 80042ac:	2300      	movs	r3, #0
 80042ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80042b0:	6a21      	ldr	r1, [r4, #32]
 80042b2:	4628      	mov	r0, r5
 80042b4:	47b0      	blx	r6
 80042b6:	1c43      	adds	r3, r0, #1
 80042b8:	89a3      	ldrh	r3, [r4, #12]
 80042ba:	d106      	bne.n	80042ca <__sflush_r+0x62>
 80042bc:	6829      	ldr	r1, [r5, #0]
 80042be:	291d      	cmp	r1, #29
 80042c0:	d82b      	bhi.n	800431a <__sflush_r+0xb2>
 80042c2:	4a2a      	ldr	r2, [pc, #168]	@ (800436c <__sflush_r+0x104>)
 80042c4:	410a      	asrs	r2, r1
 80042c6:	07d6      	lsls	r6, r2, #31
 80042c8:	d427      	bmi.n	800431a <__sflush_r+0xb2>
 80042ca:	2200      	movs	r2, #0
 80042cc:	6062      	str	r2, [r4, #4]
 80042ce:	04d9      	lsls	r1, r3, #19
 80042d0:	6922      	ldr	r2, [r4, #16]
 80042d2:	6022      	str	r2, [r4, #0]
 80042d4:	d504      	bpl.n	80042e0 <__sflush_r+0x78>
 80042d6:	1c42      	adds	r2, r0, #1
 80042d8:	d101      	bne.n	80042de <__sflush_r+0x76>
 80042da:	682b      	ldr	r3, [r5, #0]
 80042dc:	b903      	cbnz	r3, 80042e0 <__sflush_r+0x78>
 80042de:	6560      	str	r0, [r4, #84]	@ 0x54
 80042e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80042e2:	602f      	str	r7, [r5, #0]
 80042e4:	b1b9      	cbz	r1, 8004316 <__sflush_r+0xae>
 80042e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80042ea:	4299      	cmp	r1, r3
 80042ec:	d002      	beq.n	80042f4 <__sflush_r+0x8c>
 80042ee:	4628      	mov	r0, r5
 80042f0:	f7ff fc8a 	bl	8003c08 <_free_r>
 80042f4:	2300      	movs	r3, #0
 80042f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80042f8:	e00d      	b.n	8004316 <__sflush_r+0xae>
 80042fa:	2301      	movs	r3, #1
 80042fc:	4628      	mov	r0, r5
 80042fe:	47b0      	blx	r6
 8004300:	4602      	mov	r2, r0
 8004302:	1c50      	adds	r0, r2, #1
 8004304:	d1c9      	bne.n	800429a <__sflush_r+0x32>
 8004306:	682b      	ldr	r3, [r5, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0c6      	beq.n	800429a <__sflush_r+0x32>
 800430c:	2b1d      	cmp	r3, #29
 800430e:	d001      	beq.n	8004314 <__sflush_r+0xac>
 8004310:	2b16      	cmp	r3, #22
 8004312:	d11e      	bne.n	8004352 <__sflush_r+0xea>
 8004314:	602f      	str	r7, [r5, #0]
 8004316:	2000      	movs	r0, #0
 8004318:	e022      	b.n	8004360 <__sflush_r+0xf8>
 800431a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800431e:	b21b      	sxth	r3, r3
 8004320:	e01b      	b.n	800435a <__sflush_r+0xf2>
 8004322:	690f      	ldr	r7, [r1, #16]
 8004324:	2f00      	cmp	r7, #0
 8004326:	d0f6      	beq.n	8004316 <__sflush_r+0xae>
 8004328:	0793      	lsls	r3, r2, #30
 800432a:	680e      	ldr	r6, [r1, #0]
 800432c:	bf08      	it	eq
 800432e:	694b      	ldreq	r3, [r1, #20]
 8004330:	600f      	str	r7, [r1, #0]
 8004332:	bf18      	it	ne
 8004334:	2300      	movne	r3, #0
 8004336:	eba6 0807 	sub.w	r8, r6, r7
 800433a:	608b      	str	r3, [r1, #8]
 800433c:	f1b8 0f00 	cmp.w	r8, #0
 8004340:	dde9      	ble.n	8004316 <__sflush_r+0xae>
 8004342:	6a21      	ldr	r1, [r4, #32]
 8004344:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004346:	4643      	mov	r3, r8
 8004348:	463a      	mov	r2, r7
 800434a:	4628      	mov	r0, r5
 800434c:	47b0      	blx	r6
 800434e:	2800      	cmp	r0, #0
 8004350:	dc08      	bgt.n	8004364 <__sflush_r+0xfc>
 8004352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004356:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800435a:	81a3      	strh	r3, [r4, #12]
 800435c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004364:	4407      	add	r7, r0
 8004366:	eba8 0800 	sub.w	r8, r8, r0
 800436a:	e7e7      	b.n	800433c <__sflush_r+0xd4>
 800436c:	dfbffffe 	.word	0xdfbffffe

08004370 <_fflush_r>:
 8004370:	b538      	push	{r3, r4, r5, lr}
 8004372:	690b      	ldr	r3, [r1, #16]
 8004374:	4605      	mov	r5, r0
 8004376:	460c      	mov	r4, r1
 8004378:	b913      	cbnz	r3, 8004380 <_fflush_r+0x10>
 800437a:	2500      	movs	r5, #0
 800437c:	4628      	mov	r0, r5
 800437e:	bd38      	pop	{r3, r4, r5, pc}
 8004380:	b118      	cbz	r0, 800438a <_fflush_r+0x1a>
 8004382:	6a03      	ldr	r3, [r0, #32]
 8004384:	b90b      	cbnz	r3, 800438a <_fflush_r+0x1a>
 8004386:	f7ff fb57 	bl	8003a38 <__sinit>
 800438a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d0f3      	beq.n	800437a <_fflush_r+0xa>
 8004392:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004394:	07d0      	lsls	r0, r2, #31
 8004396:	d404      	bmi.n	80043a2 <_fflush_r+0x32>
 8004398:	0599      	lsls	r1, r3, #22
 800439a:	d402      	bmi.n	80043a2 <_fflush_r+0x32>
 800439c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800439e:	f7ff fc22 	bl	8003be6 <__retarget_lock_acquire_recursive>
 80043a2:	4628      	mov	r0, r5
 80043a4:	4621      	mov	r1, r4
 80043a6:	f7ff ff5f 	bl	8004268 <__sflush_r>
 80043aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80043ac:	07da      	lsls	r2, r3, #31
 80043ae:	4605      	mov	r5, r0
 80043b0:	d4e4      	bmi.n	800437c <_fflush_r+0xc>
 80043b2:	89a3      	ldrh	r3, [r4, #12]
 80043b4:	059b      	lsls	r3, r3, #22
 80043b6:	d4e1      	bmi.n	800437c <_fflush_r+0xc>
 80043b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80043ba:	f7ff fc15 	bl	8003be8 <__retarget_lock_release_recursive>
 80043be:	e7dd      	b.n	800437c <_fflush_r+0xc>

080043c0 <__sread>:
 80043c0:	b510      	push	{r4, lr}
 80043c2:	460c      	mov	r4, r1
 80043c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043c8:	f000 f9c0 	bl	800474c <_read_r>
 80043cc:	2800      	cmp	r0, #0
 80043ce:	bfab      	itete	ge
 80043d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80043d2:	89a3      	ldrhlt	r3, [r4, #12]
 80043d4:	181b      	addge	r3, r3, r0
 80043d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80043da:	bfac      	ite	ge
 80043dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80043de:	81a3      	strhlt	r3, [r4, #12]
 80043e0:	bd10      	pop	{r4, pc}

080043e2 <__swrite>:
 80043e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043e6:	461f      	mov	r7, r3
 80043e8:	898b      	ldrh	r3, [r1, #12]
 80043ea:	05db      	lsls	r3, r3, #23
 80043ec:	4605      	mov	r5, r0
 80043ee:	460c      	mov	r4, r1
 80043f0:	4616      	mov	r6, r2
 80043f2:	d505      	bpl.n	8004400 <__swrite+0x1e>
 80043f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043f8:	2302      	movs	r3, #2
 80043fa:	2200      	movs	r2, #0
 80043fc:	f000 f994 	bl	8004728 <_lseek_r>
 8004400:	89a3      	ldrh	r3, [r4, #12]
 8004402:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004406:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800440a:	81a3      	strh	r3, [r4, #12]
 800440c:	4632      	mov	r2, r6
 800440e:	463b      	mov	r3, r7
 8004410:	4628      	mov	r0, r5
 8004412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004416:	f000 b9ab 	b.w	8004770 <_write_r>

0800441a <__sseek>:
 800441a:	b510      	push	{r4, lr}
 800441c:	460c      	mov	r4, r1
 800441e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004422:	f000 f981 	bl	8004728 <_lseek_r>
 8004426:	1c43      	adds	r3, r0, #1
 8004428:	89a3      	ldrh	r3, [r4, #12]
 800442a:	bf15      	itete	ne
 800442c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800442e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004432:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004436:	81a3      	strheq	r3, [r4, #12]
 8004438:	bf18      	it	ne
 800443a:	81a3      	strhne	r3, [r4, #12]
 800443c:	bd10      	pop	{r4, pc}

0800443e <__sclose>:
 800443e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004442:	f000 b93f 	b.w	80046c4 <_close_r>

08004446 <_realloc_r>:
 8004446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800444a:	4680      	mov	r8, r0
 800444c:	4615      	mov	r5, r2
 800444e:	460c      	mov	r4, r1
 8004450:	b921      	cbnz	r1, 800445c <_realloc_r+0x16>
 8004452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004456:	4611      	mov	r1, r2
 8004458:	f7ff b9b6 	b.w	80037c8 <_malloc_r>
 800445c:	b92a      	cbnz	r2, 800446a <_realloc_r+0x24>
 800445e:	f7ff fbd3 	bl	8003c08 <_free_r>
 8004462:	2400      	movs	r4, #0
 8004464:	4620      	mov	r0, r4
 8004466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800446a:	f000 f993 	bl	8004794 <_malloc_usable_size_r>
 800446e:	4285      	cmp	r5, r0
 8004470:	4606      	mov	r6, r0
 8004472:	d802      	bhi.n	800447a <_realloc_r+0x34>
 8004474:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004478:	d8f4      	bhi.n	8004464 <_realloc_r+0x1e>
 800447a:	4629      	mov	r1, r5
 800447c:	4640      	mov	r0, r8
 800447e:	f7ff f9a3 	bl	80037c8 <_malloc_r>
 8004482:	4607      	mov	r7, r0
 8004484:	2800      	cmp	r0, #0
 8004486:	d0ec      	beq.n	8004462 <_realloc_r+0x1c>
 8004488:	42b5      	cmp	r5, r6
 800448a:	462a      	mov	r2, r5
 800448c:	4621      	mov	r1, r4
 800448e:	bf28      	it	cs
 8004490:	4632      	movcs	r2, r6
 8004492:	f7ff fbaa 	bl	8003bea <memcpy>
 8004496:	4621      	mov	r1, r4
 8004498:	4640      	mov	r0, r8
 800449a:	f7ff fbb5 	bl	8003c08 <_free_r>
 800449e:	463c      	mov	r4, r7
 80044a0:	e7e0      	b.n	8004464 <_realloc_r+0x1e>

080044a2 <__swbuf_r>:
 80044a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044a4:	460e      	mov	r6, r1
 80044a6:	4614      	mov	r4, r2
 80044a8:	4605      	mov	r5, r0
 80044aa:	b118      	cbz	r0, 80044b4 <__swbuf_r+0x12>
 80044ac:	6a03      	ldr	r3, [r0, #32]
 80044ae:	b90b      	cbnz	r3, 80044b4 <__swbuf_r+0x12>
 80044b0:	f7ff fac2 	bl	8003a38 <__sinit>
 80044b4:	69a3      	ldr	r3, [r4, #24]
 80044b6:	60a3      	str	r3, [r4, #8]
 80044b8:	89a3      	ldrh	r3, [r4, #12]
 80044ba:	071a      	lsls	r2, r3, #28
 80044bc:	d501      	bpl.n	80044c2 <__swbuf_r+0x20>
 80044be:	6923      	ldr	r3, [r4, #16]
 80044c0:	b943      	cbnz	r3, 80044d4 <__swbuf_r+0x32>
 80044c2:	4621      	mov	r1, r4
 80044c4:	4628      	mov	r0, r5
 80044c6:	f000 f82b 	bl	8004520 <__swsetup_r>
 80044ca:	b118      	cbz	r0, 80044d4 <__swbuf_r+0x32>
 80044cc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80044d0:	4638      	mov	r0, r7
 80044d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044d4:	6823      	ldr	r3, [r4, #0]
 80044d6:	6922      	ldr	r2, [r4, #16]
 80044d8:	1a98      	subs	r0, r3, r2
 80044da:	6963      	ldr	r3, [r4, #20]
 80044dc:	b2f6      	uxtb	r6, r6
 80044de:	4283      	cmp	r3, r0
 80044e0:	4637      	mov	r7, r6
 80044e2:	dc05      	bgt.n	80044f0 <__swbuf_r+0x4e>
 80044e4:	4621      	mov	r1, r4
 80044e6:	4628      	mov	r0, r5
 80044e8:	f7ff ff42 	bl	8004370 <_fflush_r>
 80044ec:	2800      	cmp	r0, #0
 80044ee:	d1ed      	bne.n	80044cc <__swbuf_r+0x2a>
 80044f0:	68a3      	ldr	r3, [r4, #8]
 80044f2:	3b01      	subs	r3, #1
 80044f4:	60a3      	str	r3, [r4, #8]
 80044f6:	6823      	ldr	r3, [r4, #0]
 80044f8:	1c5a      	adds	r2, r3, #1
 80044fa:	6022      	str	r2, [r4, #0]
 80044fc:	701e      	strb	r6, [r3, #0]
 80044fe:	6962      	ldr	r2, [r4, #20]
 8004500:	1c43      	adds	r3, r0, #1
 8004502:	429a      	cmp	r2, r3
 8004504:	d004      	beq.n	8004510 <__swbuf_r+0x6e>
 8004506:	89a3      	ldrh	r3, [r4, #12]
 8004508:	07db      	lsls	r3, r3, #31
 800450a:	d5e1      	bpl.n	80044d0 <__swbuf_r+0x2e>
 800450c:	2e0a      	cmp	r6, #10
 800450e:	d1df      	bne.n	80044d0 <__swbuf_r+0x2e>
 8004510:	4621      	mov	r1, r4
 8004512:	4628      	mov	r0, r5
 8004514:	f7ff ff2c 	bl	8004370 <_fflush_r>
 8004518:	2800      	cmp	r0, #0
 800451a:	d0d9      	beq.n	80044d0 <__swbuf_r+0x2e>
 800451c:	e7d6      	b.n	80044cc <__swbuf_r+0x2a>
	...

08004520 <__swsetup_r>:
 8004520:	b538      	push	{r3, r4, r5, lr}
 8004522:	4b29      	ldr	r3, [pc, #164]	@ (80045c8 <__swsetup_r+0xa8>)
 8004524:	4605      	mov	r5, r0
 8004526:	6818      	ldr	r0, [r3, #0]
 8004528:	460c      	mov	r4, r1
 800452a:	b118      	cbz	r0, 8004534 <__swsetup_r+0x14>
 800452c:	6a03      	ldr	r3, [r0, #32]
 800452e:	b90b      	cbnz	r3, 8004534 <__swsetup_r+0x14>
 8004530:	f7ff fa82 	bl	8003a38 <__sinit>
 8004534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004538:	0719      	lsls	r1, r3, #28
 800453a:	d422      	bmi.n	8004582 <__swsetup_r+0x62>
 800453c:	06da      	lsls	r2, r3, #27
 800453e:	d407      	bmi.n	8004550 <__swsetup_r+0x30>
 8004540:	2209      	movs	r2, #9
 8004542:	602a      	str	r2, [r5, #0]
 8004544:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004548:	81a3      	strh	r3, [r4, #12]
 800454a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800454e:	e033      	b.n	80045b8 <__swsetup_r+0x98>
 8004550:	0758      	lsls	r0, r3, #29
 8004552:	d512      	bpl.n	800457a <__swsetup_r+0x5a>
 8004554:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004556:	b141      	cbz	r1, 800456a <__swsetup_r+0x4a>
 8004558:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800455c:	4299      	cmp	r1, r3
 800455e:	d002      	beq.n	8004566 <__swsetup_r+0x46>
 8004560:	4628      	mov	r0, r5
 8004562:	f7ff fb51 	bl	8003c08 <_free_r>
 8004566:	2300      	movs	r3, #0
 8004568:	6363      	str	r3, [r4, #52]	@ 0x34
 800456a:	89a3      	ldrh	r3, [r4, #12]
 800456c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004570:	81a3      	strh	r3, [r4, #12]
 8004572:	2300      	movs	r3, #0
 8004574:	6063      	str	r3, [r4, #4]
 8004576:	6923      	ldr	r3, [r4, #16]
 8004578:	6023      	str	r3, [r4, #0]
 800457a:	89a3      	ldrh	r3, [r4, #12]
 800457c:	f043 0308 	orr.w	r3, r3, #8
 8004580:	81a3      	strh	r3, [r4, #12]
 8004582:	6923      	ldr	r3, [r4, #16]
 8004584:	b94b      	cbnz	r3, 800459a <__swsetup_r+0x7a>
 8004586:	89a3      	ldrh	r3, [r4, #12]
 8004588:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800458c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004590:	d003      	beq.n	800459a <__swsetup_r+0x7a>
 8004592:	4621      	mov	r1, r4
 8004594:	4628      	mov	r0, r5
 8004596:	f000 f83f 	bl	8004618 <__smakebuf_r>
 800459a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800459e:	f013 0201 	ands.w	r2, r3, #1
 80045a2:	d00a      	beq.n	80045ba <__swsetup_r+0x9a>
 80045a4:	2200      	movs	r2, #0
 80045a6:	60a2      	str	r2, [r4, #8]
 80045a8:	6962      	ldr	r2, [r4, #20]
 80045aa:	4252      	negs	r2, r2
 80045ac:	61a2      	str	r2, [r4, #24]
 80045ae:	6922      	ldr	r2, [r4, #16]
 80045b0:	b942      	cbnz	r2, 80045c4 <__swsetup_r+0xa4>
 80045b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80045b6:	d1c5      	bne.n	8004544 <__swsetup_r+0x24>
 80045b8:	bd38      	pop	{r3, r4, r5, pc}
 80045ba:	0799      	lsls	r1, r3, #30
 80045bc:	bf58      	it	pl
 80045be:	6962      	ldrpl	r2, [r4, #20]
 80045c0:	60a2      	str	r2, [r4, #8]
 80045c2:	e7f4      	b.n	80045ae <__swsetup_r+0x8e>
 80045c4:	2000      	movs	r0, #0
 80045c6:	e7f7      	b.n	80045b8 <__swsetup_r+0x98>
 80045c8:	20000170 	.word	0x20000170

080045cc <__swhatbuf_r>:
 80045cc:	b570      	push	{r4, r5, r6, lr}
 80045ce:	460c      	mov	r4, r1
 80045d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045d4:	2900      	cmp	r1, #0
 80045d6:	b096      	sub	sp, #88	@ 0x58
 80045d8:	4615      	mov	r5, r2
 80045da:	461e      	mov	r6, r3
 80045dc:	da0d      	bge.n	80045fa <__swhatbuf_r+0x2e>
 80045de:	89a3      	ldrh	r3, [r4, #12]
 80045e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80045e4:	f04f 0100 	mov.w	r1, #0
 80045e8:	bf14      	ite	ne
 80045ea:	2340      	movne	r3, #64	@ 0x40
 80045ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80045f0:	2000      	movs	r0, #0
 80045f2:	6031      	str	r1, [r6, #0]
 80045f4:	602b      	str	r3, [r5, #0]
 80045f6:	b016      	add	sp, #88	@ 0x58
 80045f8:	bd70      	pop	{r4, r5, r6, pc}
 80045fa:	466a      	mov	r2, sp
 80045fc:	f000 f872 	bl	80046e4 <_fstat_r>
 8004600:	2800      	cmp	r0, #0
 8004602:	dbec      	blt.n	80045de <__swhatbuf_r+0x12>
 8004604:	9901      	ldr	r1, [sp, #4]
 8004606:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800460a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800460e:	4259      	negs	r1, r3
 8004610:	4159      	adcs	r1, r3
 8004612:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004616:	e7eb      	b.n	80045f0 <__swhatbuf_r+0x24>

08004618 <__smakebuf_r>:
 8004618:	898b      	ldrh	r3, [r1, #12]
 800461a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800461c:	079d      	lsls	r5, r3, #30
 800461e:	4606      	mov	r6, r0
 8004620:	460c      	mov	r4, r1
 8004622:	d507      	bpl.n	8004634 <__smakebuf_r+0x1c>
 8004624:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004628:	6023      	str	r3, [r4, #0]
 800462a:	6123      	str	r3, [r4, #16]
 800462c:	2301      	movs	r3, #1
 800462e:	6163      	str	r3, [r4, #20]
 8004630:	b003      	add	sp, #12
 8004632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004634:	ab01      	add	r3, sp, #4
 8004636:	466a      	mov	r2, sp
 8004638:	f7ff ffc8 	bl	80045cc <__swhatbuf_r>
 800463c:	9f00      	ldr	r7, [sp, #0]
 800463e:	4605      	mov	r5, r0
 8004640:	4639      	mov	r1, r7
 8004642:	4630      	mov	r0, r6
 8004644:	f7ff f8c0 	bl	80037c8 <_malloc_r>
 8004648:	b948      	cbnz	r0, 800465e <__smakebuf_r+0x46>
 800464a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800464e:	059a      	lsls	r2, r3, #22
 8004650:	d4ee      	bmi.n	8004630 <__smakebuf_r+0x18>
 8004652:	f023 0303 	bic.w	r3, r3, #3
 8004656:	f043 0302 	orr.w	r3, r3, #2
 800465a:	81a3      	strh	r3, [r4, #12]
 800465c:	e7e2      	b.n	8004624 <__smakebuf_r+0xc>
 800465e:	89a3      	ldrh	r3, [r4, #12]
 8004660:	6020      	str	r0, [r4, #0]
 8004662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004666:	81a3      	strh	r3, [r4, #12]
 8004668:	9b01      	ldr	r3, [sp, #4]
 800466a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800466e:	b15b      	cbz	r3, 8004688 <__smakebuf_r+0x70>
 8004670:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004674:	4630      	mov	r0, r6
 8004676:	f000 f847 	bl	8004708 <_isatty_r>
 800467a:	b128      	cbz	r0, 8004688 <__smakebuf_r+0x70>
 800467c:	89a3      	ldrh	r3, [r4, #12]
 800467e:	f023 0303 	bic.w	r3, r3, #3
 8004682:	f043 0301 	orr.w	r3, r3, #1
 8004686:	81a3      	strh	r3, [r4, #12]
 8004688:	89a3      	ldrh	r3, [r4, #12]
 800468a:	431d      	orrs	r5, r3
 800468c:	81a5      	strh	r5, [r4, #12]
 800468e:	e7cf      	b.n	8004630 <__smakebuf_r+0x18>

08004690 <memmove>:
 8004690:	4288      	cmp	r0, r1
 8004692:	b510      	push	{r4, lr}
 8004694:	eb01 0402 	add.w	r4, r1, r2
 8004698:	d902      	bls.n	80046a0 <memmove+0x10>
 800469a:	4284      	cmp	r4, r0
 800469c:	4623      	mov	r3, r4
 800469e:	d807      	bhi.n	80046b0 <memmove+0x20>
 80046a0:	1e43      	subs	r3, r0, #1
 80046a2:	42a1      	cmp	r1, r4
 80046a4:	d008      	beq.n	80046b8 <memmove+0x28>
 80046a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80046ae:	e7f8      	b.n	80046a2 <memmove+0x12>
 80046b0:	4402      	add	r2, r0
 80046b2:	4601      	mov	r1, r0
 80046b4:	428a      	cmp	r2, r1
 80046b6:	d100      	bne.n	80046ba <memmove+0x2a>
 80046b8:	bd10      	pop	{r4, pc}
 80046ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80046c2:	e7f7      	b.n	80046b4 <memmove+0x24>

080046c4 <_close_r>:
 80046c4:	b538      	push	{r3, r4, r5, lr}
 80046c6:	4d06      	ldr	r5, [pc, #24]	@ (80046e0 <_close_r+0x1c>)
 80046c8:	2300      	movs	r3, #0
 80046ca:	4604      	mov	r4, r0
 80046cc:	4608      	mov	r0, r1
 80046ce:	602b      	str	r3, [r5, #0]
 80046d0:	f7fc ffa4 	bl	800161c <_close>
 80046d4:	1c43      	adds	r3, r0, #1
 80046d6:	d102      	bne.n	80046de <_close_r+0x1a>
 80046d8:	682b      	ldr	r3, [r5, #0]
 80046da:	b103      	cbz	r3, 80046de <_close_r+0x1a>
 80046dc:	6023      	str	r3, [r4, #0]
 80046de:	bd38      	pop	{r3, r4, r5, pc}
 80046e0:	200004c8 	.word	0x200004c8

080046e4 <_fstat_r>:
 80046e4:	b538      	push	{r3, r4, r5, lr}
 80046e6:	4d07      	ldr	r5, [pc, #28]	@ (8004704 <_fstat_r+0x20>)
 80046e8:	2300      	movs	r3, #0
 80046ea:	4604      	mov	r4, r0
 80046ec:	4608      	mov	r0, r1
 80046ee:	4611      	mov	r1, r2
 80046f0:	602b      	str	r3, [r5, #0]
 80046f2:	f7fc ff9f 	bl	8001634 <_fstat>
 80046f6:	1c43      	adds	r3, r0, #1
 80046f8:	d102      	bne.n	8004700 <_fstat_r+0x1c>
 80046fa:	682b      	ldr	r3, [r5, #0]
 80046fc:	b103      	cbz	r3, 8004700 <_fstat_r+0x1c>
 80046fe:	6023      	str	r3, [r4, #0]
 8004700:	bd38      	pop	{r3, r4, r5, pc}
 8004702:	bf00      	nop
 8004704:	200004c8 	.word	0x200004c8

08004708 <_isatty_r>:
 8004708:	b538      	push	{r3, r4, r5, lr}
 800470a:	4d06      	ldr	r5, [pc, #24]	@ (8004724 <_isatty_r+0x1c>)
 800470c:	2300      	movs	r3, #0
 800470e:	4604      	mov	r4, r0
 8004710:	4608      	mov	r0, r1
 8004712:	602b      	str	r3, [r5, #0]
 8004714:	f7fc ff9e 	bl	8001654 <_isatty>
 8004718:	1c43      	adds	r3, r0, #1
 800471a:	d102      	bne.n	8004722 <_isatty_r+0x1a>
 800471c:	682b      	ldr	r3, [r5, #0]
 800471e:	b103      	cbz	r3, 8004722 <_isatty_r+0x1a>
 8004720:	6023      	str	r3, [r4, #0]
 8004722:	bd38      	pop	{r3, r4, r5, pc}
 8004724:	200004c8 	.word	0x200004c8

08004728 <_lseek_r>:
 8004728:	b538      	push	{r3, r4, r5, lr}
 800472a:	4d07      	ldr	r5, [pc, #28]	@ (8004748 <_lseek_r+0x20>)
 800472c:	4604      	mov	r4, r0
 800472e:	4608      	mov	r0, r1
 8004730:	4611      	mov	r1, r2
 8004732:	2200      	movs	r2, #0
 8004734:	602a      	str	r2, [r5, #0]
 8004736:	461a      	mov	r2, r3
 8004738:	f7fc ff97 	bl	800166a <_lseek>
 800473c:	1c43      	adds	r3, r0, #1
 800473e:	d102      	bne.n	8004746 <_lseek_r+0x1e>
 8004740:	682b      	ldr	r3, [r5, #0]
 8004742:	b103      	cbz	r3, 8004746 <_lseek_r+0x1e>
 8004744:	6023      	str	r3, [r4, #0]
 8004746:	bd38      	pop	{r3, r4, r5, pc}
 8004748:	200004c8 	.word	0x200004c8

0800474c <_read_r>:
 800474c:	b538      	push	{r3, r4, r5, lr}
 800474e:	4d07      	ldr	r5, [pc, #28]	@ (800476c <_read_r+0x20>)
 8004750:	4604      	mov	r4, r0
 8004752:	4608      	mov	r0, r1
 8004754:	4611      	mov	r1, r2
 8004756:	2200      	movs	r2, #0
 8004758:	602a      	str	r2, [r5, #0]
 800475a:	461a      	mov	r2, r3
 800475c:	f7fc fef8 	bl	8001550 <_read>
 8004760:	1c43      	adds	r3, r0, #1
 8004762:	d102      	bne.n	800476a <_read_r+0x1e>
 8004764:	682b      	ldr	r3, [r5, #0]
 8004766:	b103      	cbz	r3, 800476a <_read_r+0x1e>
 8004768:	6023      	str	r3, [r4, #0]
 800476a:	bd38      	pop	{r3, r4, r5, pc}
 800476c:	200004c8 	.word	0x200004c8

08004770 <_write_r>:
 8004770:	b538      	push	{r3, r4, r5, lr}
 8004772:	4d07      	ldr	r5, [pc, #28]	@ (8004790 <_write_r+0x20>)
 8004774:	4604      	mov	r4, r0
 8004776:	4608      	mov	r0, r1
 8004778:	4611      	mov	r1, r2
 800477a:	2200      	movs	r2, #0
 800477c:	602a      	str	r2, [r5, #0]
 800477e:	461a      	mov	r2, r3
 8004780:	f7fc ff03 	bl	800158a <_write>
 8004784:	1c43      	adds	r3, r0, #1
 8004786:	d102      	bne.n	800478e <_write_r+0x1e>
 8004788:	682b      	ldr	r3, [r5, #0]
 800478a:	b103      	cbz	r3, 800478e <_write_r+0x1e>
 800478c:	6023      	str	r3, [r4, #0]
 800478e:	bd38      	pop	{r3, r4, r5, pc}
 8004790:	200004c8 	.word	0x200004c8

08004794 <_malloc_usable_size_r>:
 8004794:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004798:	1f18      	subs	r0, r3, #4
 800479a:	2b00      	cmp	r3, #0
 800479c:	bfbc      	itt	lt
 800479e:	580b      	ldrlt	r3, [r1, r0]
 80047a0:	18c0      	addlt	r0, r0, r3
 80047a2:	4770      	bx	lr

080047a4 <_init>:
 80047a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a6:	bf00      	nop
 80047a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047aa:	bc08      	pop	{r3}
 80047ac:	469e      	mov	lr, r3
 80047ae:	4770      	bx	lr

080047b0 <_fini>:
 80047b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b2:	bf00      	nop
 80047b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047b6:	bc08      	pop	{r3}
 80047b8:	469e      	mov	lr, r3
 80047ba:	4770      	bx	lr
