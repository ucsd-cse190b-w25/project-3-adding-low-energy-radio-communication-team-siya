
youlostit-ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f34  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080040bc  080040bc  000050bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800416c  0800416c  0000619c  2**0
                  CONTENTS
  4 .ARM          00000000  0800416c  0800416c  0000619c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800416c  0800416c  0000619c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800416c  0800416c  0000516c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004170  08004170  00005170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000019c  20000000  08004174  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  2000019c  08004310  0000619c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  08004310  000064a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000619c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a9bb  00000000  00000000  000061cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002072  00000000  00000000  00010b87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e8  00000000  00000000  00012c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000756  00000000  00000000  000135e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000275ac  00000000  00000000  00013d3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af0c  00000000  00000000  0003b2ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0e93  00000000  00000000  000461f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00137089  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cb8  00000000  00000000  001370cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a9  00000000  00000000  00139d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000019c 	.word	0x2000019c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080040a4 	.word	0x080040a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001a0 	.word	0x200001a0
 80001c4:	080040a4 	.word	0x080040a4

080001c8 <ble_init>:
int16_t connectionHandler[2] = {-1, -1}; // Little Endian Format for connection handler

/**
 * Initializes the BLE module with appropriate settings
 */
void ble_init(){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af02      	add	r7, sp, #8
	//fetching the reset event
	rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 80001ce:	2006      	movs	r0, #6
 80001d0:	f003 fa9e 	bl	8003710 <malloc>
 80001d4:	4603      	mov	r3, r0
 80001d6:	461a      	mov	r2, r3
 80001d8:	4b70      	ldr	r3, [pc, #448]	@ (800039c <ble_init+0x1d4>)
 80001da:	601a      	str	r2, [r3, #0]
	int res;

	while(!dataAvailable);
 80001dc:	bf00      	nop
 80001de:	4b70      	ldr	r3, [pc, #448]	@ (80003a0 <ble_init+0x1d8>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d0fb      	beq.n	80001de <ble_init+0x16>
	res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 80001e6:	4b6d      	ldr	r3, [pc, #436]	@ (800039c <ble_init+0x1d4>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	2106      	movs	r1, #6
 80001ec:	4618      	mov	r0, r3
 80001ee:	f000 f905 	bl	80003fc <fetchBleEvent>
 80001f2:	6078      	str	r0, [r7, #4]

	if(res==BLE_OK){
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d111      	bne.n	800021e <ble_init+0x56>
	res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 80001fa:	4b68      	ldr	r3, [pc, #416]	@ (800039c <ble_init+0x1d4>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	2206      	movs	r2, #6
 8000200:	4968      	ldr	r1, [pc, #416]	@ (80003a4 <ble_init+0x1dc>)
 8000202:	4618      	mov	r0, r3
 8000204:	f000 f984 	bl	8000510 <checkEventResp>
 8000208:	6078      	str	r0, [r7, #4]
	if(res==BLE_OK){
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d106      	bne.n	800021e <ble_init+0x56>
	   stackInitCompleteFlag|=0x01;
 8000210:	4b65      	ldr	r3, [pc, #404]	@ (80003a8 <ble_init+0x1e0>)
 8000212:	881b      	ldrh	r3, [r3, #0]
 8000214:	f043 0301 	orr.w	r3, r3, #1
 8000218:	b29a      	uxth	r2, r3
 800021a:	4b63      	ldr	r3, [pc, #396]	@ (80003a8 <ble_init+0x1e0>)
 800021c:	801a      	strh	r2, [r3, #0]
	}
	}
	HAL_Delay(10);
 800021e:	200a      	movs	r0, #10
 8000220:	f001 fb78 	bl	8001914 <HAL_Delay>
	free(rxEvent);
 8000224:	4b5d      	ldr	r3, [pc, #372]	@ (800039c <ble_init+0x1d4>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4618      	mov	r0, r3
 800022a:	f003 fa79 	bl	8003720 <free>

	//INIT GATT
	if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 800022e:	2300      	movs	r3, #0
 8000230:	9300      	str	r3, [sp, #0]
 8000232:	2307      	movs	r3, #7
 8000234:	4a5d      	ldr	r2, [pc, #372]	@ (80003ac <ble_init+0x1e4>)
 8000236:	2104      	movs	r1, #4
 8000238:	485d      	ldr	r0, [pc, #372]	@ (80003b0 <ble_init+0x1e8>)
 800023a:	f000 fa8f 	bl	800075c <BLE_command>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d106      	bne.n	8000252 <ble_init+0x8a>
	   stackInitCompleteFlag|=0x02;
 8000244:	4b58      	ldr	r3, [pc, #352]	@ (80003a8 <ble_init+0x1e0>)
 8000246:	881b      	ldrh	r3, [r3, #0]
 8000248:	f043 0302 	orr.w	r3, r3, #2
 800024c:	b29a      	uxth	r2, r3
 800024e:	4b56      	ldr	r3, [pc, #344]	@ (80003a8 <ble_init+0x1e0>)
 8000250:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000252:	4b52      	ldr	r3, [pc, #328]	@ (800039c <ble_init+0x1d4>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4618      	mov	r0, r3
 8000258:	f003 fa62 	bl	8003720 <free>

	//INIT GAP, actually the handle that i get is a GATT handle of a service, will change the name later
	if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 800025c:	2303      	movs	r3, #3
 800025e:	9300      	str	r3, [sp, #0]
 8000260:	2307      	movs	r3, #7
 8000262:	4a54      	ldr	r2, [pc, #336]	@ (80003b4 <ble_init+0x1ec>)
 8000264:	2107      	movs	r1, #7
 8000266:	4854      	ldr	r0, [pc, #336]	@ (80003b8 <ble_init+0x1f0>)
 8000268:	f000 fa78 	bl	800075c <BLE_command>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d11b      	bne.n	80002aa <ble_init+0xe2>
	   stackInitCompleteFlag|=0x04;
 8000272:	4b4d      	ldr	r3, [pc, #308]	@ (80003a8 <ble_init+0x1e0>)
 8000274:	881b      	ldrh	r3, [r3, #0]
 8000276:	f043 0304 	orr.w	r3, r3, #4
 800027a:	b29a      	uxth	r2, r3
 800027c:	4b4a      	ldr	r3, [pc, #296]	@ (80003a8 <ble_init+0x1e0>)
 800027e:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 8000280:	4b46      	ldr	r3, [pc, #280]	@ (800039c <ble_init+0x1d4>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	3307      	adds	r3, #7
 8000286:	881b      	ldrh	r3, [r3, #0]
 8000288:	b29a      	uxth	r2, r3
 800028a:	4b4c      	ldr	r3, [pc, #304]	@ (80003bc <ble_init+0x1f4>)
 800028c:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 800028e:	4b43      	ldr	r3, [pc, #268]	@ (800039c <ble_init+0x1d4>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	3309      	adds	r3, #9
 8000294:	881b      	ldrh	r3, [r3, #0]
 8000296:	b29a      	uxth	r2, r3
 8000298:	4b49      	ldr	r3, [pc, #292]	@ (80003c0 <ble_init+0x1f8>)
 800029a:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 800029c:	4b3f      	ldr	r3, [pc, #252]	@ (800039c <ble_init+0x1d4>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	330b      	adds	r3, #11
 80002a2:	881b      	ldrh	r3, [r3, #0]
 80002a4:	b29a      	uxth	r2, r3
 80002a6:	4b47      	ldr	r3, [pc, #284]	@ (80003c4 <ble_init+0x1fc>)
 80002a8:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80002aa:	4b3c      	ldr	r3, [pc, #240]	@ (800039c <ble_init+0x1d4>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4618      	mov	r0, r3
 80002b0:	f003 fa36 	bl	8003720 <free>

	//SET THE NAME OF THE BOARD IN THE SERVICE CREATED AUTOMATICALLY
	updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 80002b4:	4b44      	ldr	r3, [pc, #272]	@ (80003c8 <ble_init+0x200>)
 80002b6:	9300      	str	r3, [sp, #0]
 80002b8:	2307      	movs	r3, #7
 80002ba:	2200      	movs	r2, #0
 80002bc:	4940      	ldr	r1, [pc, #256]	@ (80003c0 <ble_init+0x1f8>)
 80002be:	483f      	ldr	r0, [pc, #252]	@ (80003bc <ble_init+0x1f4>)
 80002c0:	f000 fb12 	bl	80008e8 <updateCharValue>
	stackInitCompleteFlag|=0x08;
 80002c4:	4b38      	ldr	r3, [pc, #224]	@ (80003a8 <ble_init+0x1e0>)
 80002c6:	881b      	ldrh	r3, [r3, #0]
 80002c8:	f043 0308 	orr.w	r3, r3, #8
 80002cc:	b29a      	uxth	r2, r3
 80002ce:	4b36      	ldr	r3, [pc, #216]	@ (80003a8 <ble_init+0x1e0>)
 80002d0:	801a      	strh	r2, [r3, #0]
	free(rxEvent);
 80002d2:	4b32      	ldr	r3, [pc, #200]	@ (800039c <ble_init+0x1d4>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4618      	mov	r0, r3
 80002d8:	f003 fa22 	bl	8003720 <free>

	//INIT AUTH
	if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 80002dc:	2300      	movs	r3, #0
 80002de:	9300      	str	r3, [sp, #0]
 80002e0:	2307      	movs	r3, #7
 80002e2:	4a3a      	ldr	r2, [pc, #232]	@ (80003cc <ble_init+0x204>)
 80002e4:	2110      	movs	r1, #16
 80002e6:	483a      	ldr	r0, [pc, #232]	@ (80003d0 <ble_init+0x208>)
 80002e8:	f000 fa38 	bl	800075c <BLE_command>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d106      	bne.n	8000300 <ble_init+0x138>
	   stackInitCompleteFlag|=0x10;
 80002f2:	4b2d      	ldr	r3, [pc, #180]	@ (80003a8 <ble_init+0x1e0>)
 80002f4:	881b      	ldrh	r3, [r3, #0]
 80002f6:	f043 0310 	orr.w	r3, r3, #16
 80002fa:	b29a      	uxth	r2, r3
 80002fc:	4b2a      	ldr	r3, [pc, #168]	@ (80003a8 <ble_init+0x1e0>)
 80002fe:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000300:	4b26      	ldr	r3, [pc, #152]	@ (800039c <ble_init+0x1d4>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4618      	mov	r0, r3
 8000306:	f003 fa0b 	bl	8003720 <free>

	//SET_TX_LEVEL
	if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 800030a:	2300      	movs	r3, #0
 800030c:	9300      	str	r3, [sp, #0]
 800030e:	2307      	movs	r3, #7
 8000310:	4a30      	ldr	r2, [pc, #192]	@ (80003d4 <ble_init+0x20c>)
 8000312:	2106      	movs	r1, #6
 8000314:	4830      	ldr	r0, [pc, #192]	@ (80003d8 <ble_init+0x210>)
 8000316:	f000 fa21 	bl	800075c <BLE_command>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d106      	bne.n	800032e <ble_init+0x166>
	   stackInitCompleteFlag|=0x20;
 8000320:	4b21      	ldr	r3, [pc, #132]	@ (80003a8 <ble_init+0x1e0>)
 8000322:	881b      	ldrh	r3, [r3, #0]
 8000324:	f043 0320 	orr.w	r3, r3, #32
 8000328:	b29a      	uxth	r2, r3
 800032a:	4b1f      	ldr	r3, [pc, #124]	@ (80003a8 <ble_init+0x1e0>)
 800032c:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 800032e:	4b1b      	ldr	r3, [pc, #108]	@ (800039c <ble_init+0x1d4>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	4618      	mov	r0, r3
 8000334:	f003 f9f4 	bl	8003720 <free>

	//SET SCAN RESPONSE DATA
	if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 8000338:	2300      	movs	r3, #0
 800033a:	9300      	str	r3, [sp, #0]
 800033c:	2307      	movs	r3, #7
 800033e:	4a27      	ldr	r2, [pc, #156]	@ (80003dc <ble_init+0x214>)
 8000340:	2124      	movs	r1, #36	@ 0x24
 8000342:	4827      	ldr	r0, [pc, #156]	@ (80003e0 <ble_init+0x218>)
 8000344:	f000 fa0a 	bl	800075c <BLE_command>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d106      	bne.n	800035c <ble_init+0x194>
	   stackInitCompleteFlag|=0x40;
 800034e:	4b16      	ldr	r3, [pc, #88]	@ (80003a8 <ble_init+0x1e0>)
 8000350:	881b      	ldrh	r3, [r3, #0]
 8000352:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000356:	b29a      	uxth	r2, r3
 8000358:	4b13      	ldr	r3, [pc, #76]	@ (80003a8 <ble_init+0x1e0>)
 800035a:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 800035c:	4b0f      	ldr	r3, [pc, #60]	@ (800039c <ble_init+0x1d4>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4618      	mov	r0, r3
 8000362:	f003 f9dd 	bl	8003720 <free>

	//This will start the advertisment,
	setConnectable();
 8000366:	f000 f979 	bl	800065c <setConnectable>

	//add the nordic UART service
	addService(UUID_NORDIC_UART_SERVICE,NORDIC_UART_SERVICE_HANDLE,SET_ATTRIBUTES(7)); //SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 800036a:	2207      	movs	r2, #7
 800036c:	491d      	ldr	r1, [pc, #116]	@ (80003e4 <ble_init+0x21c>)
 800036e:	481e      	ldr	r0, [pc, #120]	@ (80003e8 <ble_init+0x220>)
 8000370:	f000 fa40 	bl	80007f4 <addService>

	//add the nordic UART charachteristics
	addCharacteristic(UUID_CHAR_READ,READ_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),NOTIFIBLE);
 8000374:	2310      	movs	r3, #16
 8000376:	9300      	str	r3, [sp, #0]
 8000378:	2314      	movs	r3, #20
 800037a:	4a1a      	ldr	r2, [pc, #104]	@ (80003e4 <ble_init+0x21c>)
 800037c:	491b      	ldr	r1, [pc, #108]	@ (80003ec <ble_init+0x224>)
 800037e:	481c      	ldr	r0, [pc, #112]	@ (80003f0 <ble_init+0x228>)
 8000380:	f000 fa70 	bl	8000864 <addCharacteristic>
	addCharacteristic(UUID_CHAR_WRITE,WRITE_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),WRITABLE);
 8000384:	2304      	movs	r3, #4
 8000386:	9300      	str	r3, [sp, #0]
 8000388:	2314      	movs	r3, #20
 800038a:	4a16      	ldr	r2, [pc, #88]	@ (80003e4 <ble_init+0x21c>)
 800038c:	4919      	ldr	r1, [pc, #100]	@ (80003f4 <ble_init+0x22c>)
 800038e:	481a      	ldr	r0, [pc, #104]	@ (80003f8 <ble_init+0x230>)
 8000390:	f000 fa68 	bl	8000864 <addCharacteristic>

	if(stackInitCompleteFlag==255){
	  //turn on led blue if everything was fine
	//  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	}
	return;
 8000394:	bf00      	nop
}
 8000396:	3708      	adds	r7, #8
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	200002d0 	.word	0x200002d0
 80003a0:	200002d4 	.word	0x200002d4
 80003a4:	20000000 	.word	0x20000000
 80003a8:	200002ce 	.word	0x200002ce
 80003ac:	2000000c 	.word	0x2000000c
 80003b0:	20000008 	.word	0x20000008
 80003b4:	2000001c 	.word	0x2000001c
 80003b8:	20000014 	.word	0x20000014
 80003bc:	200001b8 	.word	0x200001b8
 80003c0:	200001bc 	.word	0x200001bc
 80003c4:	200001c0 	.word	0x200001c0
 80003c8:	200000f4 	.word	0x200000f4
 80003cc:	20000034 	.word	0x20000034
 80003d0:	20000024 	.word	0x20000024
 80003d4:	20000044 	.word	0x20000044
 80003d8:	2000003c 	.word	0x2000003c
 80003dc:	20000070 	.word	0x20000070
 80003e0:	2000004c 	.word	0x2000004c
 80003e4:	200002c4 	.word	0x200002c4
 80003e8:	200000fc 	.word	0x200000fc
 80003ec:	200002cc 	.word	0x200002cc
 80003f0:	2000011c 	.word	0x2000011c
 80003f4:	200002c8 	.word	0x200002c8
 80003f8:	2000010c 	.word	0x2000010c

080003fc <fetchBleEvent>:
	 if(BLE_command(ACI_HAL_SET_STANDBY,sizeof(ACI_HAL_SET_STANDBY),ACI_HAL_SET_STANDBY_COMPLETE,sizeof(ACI_HAL_SET_STANDBY_COMPLETE),0)==BLE_OK){
	 }
	 free(rxEvent);
}

int fetchBleEvent(uint8_t *container, int size){
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b08c      	sub	sp, #48	@ 0x30
 8000400:	af02      	add	r7, sp, #8
 8000402:	6078      	str	r0, [r7, #4]
 8000404:	6039      	str	r1, [r7, #0]

  uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 8000406:	4a3d      	ldr	r2, [pc, #244]	@ (80004fc <fetchBleEvent+0x100>)
 8000408:	f107 0318 	add.w	r3, r7, #24
 800040c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000410:	6018      	str	r0, [r3, #0]
 8000412:	3304      	adds	r3, #4
 8000414:	7019      	strb	r1, [r3, #0]
  uint8_t slave_header[5];

  //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
  if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000416:	2140      	movs	r1, #64	@ 0x40
 8000418:	4839      	ldr	r0, [pc, #228]	@ (8000500 <fetchBleEvent+0x104>)
 800041a:	f001 fd5b 	bl	8001ed4 <HAL_GPIO_ReadPin>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d065      	beq.n	80004f0 <fetchBleEvent+0xf4>

  HAL_Delay(5);
 8000424:	2005      	movs	r0, #5
 8000426:	f001 fa75 	bl	8001914 <HAL_Delay>
  //PIN_CS of SPI2 LOW
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 800042a:	2200      	movs	r2, #0
 800042c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000430:	4834      	ldr	r0, [pc, #208]	@ (8000504 <fetchBleEvent+0x108>)
 8000432:	f001 fd67 	bl	8001f04 <HAL_GPIO_WritePin>

  //SPI2 in this case, it could change according to the board
  //we send a byte containing a request of reading followed by 4 dummy bytes
  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000436:	f107 0210 	add.w	r2, r7, #16
 800043a:	f107 0118 	add.w	r1, r7, #24
 800043e:	2301      	movs	r3, #1
 8000440:	9300      	str	r3, [sp, #0]
 8000442:	2305      	movs	r3, #5
 8000444:	4830      	ldr	r0, [pc, #192]	@ (8000508 <fetchBleEvent+0x10c>)
 8000446:	f002 fddd 	bl	8003004 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 800044a:	2201      	movs	r2, #1
 800044c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000450:	482c      	ldr	r0, [pc, #176]	@ (8000504 <fetchBleEvent+0x108>)
 8000452:	f001 fd57 	bl	8001f04 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000456:	2001      	movs	r0, #1
 8000458:	f001 fa5c 	bl	8001914 <HAL_Delay>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 800045c:	2200      	movs	r2, #0
 800045e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000462:	4828      	ldr	r0, [pc, #160]	@ (8000504 <fetchBleEvent+0x108>)
 8000464:	f001 fd4e 	bl	8001f04 <HAL_GPIO_WritePin>

  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000468:	f107 0210 	add.w	r2, r7, #16
 800046c:	f107 0118 	add.w	r1, r7, #24
 8000470:	2301      	movs	r3, #1
 8000472:	9300      	str	r3, [sp, #0]
 8000474:	2305      	movs	r3, #5
 8000476:	4824      	ldr	r0, [pc, #144]	@ (8000508 <fetchBleEvent+0x10c>)
 8000478:	f002 fdc4 	bl	8003004 <HAL_SPI_TransmitReceive>

  //let's get the size of data available
  int dataSize;
  dataSize=(slave_header[3]|slave_header[4]<<8);
 800047c:	7cfb      	ldrb	r3, [r7, #19]
 800047e:	461a      	mov	r2, r3
 8000480:	7d3b      	ldrb	r3, [r7, #20]
 8000482:	021b      	lsls	r3, r3, #8
 8000484:	4313      	orrs	r3, r2
 8000486:	627b      	str	r3, [r7, #36]	@ 0x24
  int i;
  char dummy=0xff;
 8000488:	23ff      	movs	r3, #255	@ 0xff
 800048a:	73fb      	strb	r3, [r7, #15]

  if(dataSize>size){
 800048c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	429a      	cmp	r2, r3
 8000492:	dd01      	ble.n	8000498 <fetchBleEvent+0x9c>
	  dataSize=size;
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if(dataSize>0){
 8000498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800049a:	2b00      	cmp	r3, #0
 800049c:	dd1f      	ble.n	80004de <fetchBleEvent+0xe2>
	    //let's fill the get the bytes availables and insert them into the container variable
  		for(i=0;i<dataSize;i++){
 800049e:	2300      	movs	r3, #0
 80004a0:	623b      	str	r3, [r7, #32]
 80004a2:	e00d      	b.n	80004c0 <fetchBleEvent+0xc4>
  		HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 80004a4:	6a3b      	ldr	r3, [r7, #32]
 80004a6:	687a      	ldr	r2, [r7, #4]
 80004a8:	441a      	add	r2, r3
 80004aa:	f107 010f 	add.w	r1, r7, #15
 80004ae:	2301      	movs	r3, #1
 80004b0:	9300      	str	r3, [sp, #0]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4814      	ldr	r0, [pc, #80]	@ (8000508 <fetchBleEvent+0x10c>)
 80004b6:	f002 fda5 	bl	8003004 <HAL_SPI_TransmitReceive>
  		for(i=0;i<dataSize;i++){
 80004ba:	6a3b      	ldr	r3, [r7, #32]
 80004bc:	3301      	adds	r3, #1
 80004be:	623b      	str	r3, [r7, #32]
 80004c0:	6a3a      	ldr	r2, [r7, #32]
 80004c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004c4:	429a      	cmp	r2, r3
 80004c6:	dbed      	blt.n	80004a4 <fetchBleEvent+0xa8>

  		}
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80004c8:	2201      	movs	r2, #1
 80004ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004ce:	480d      	ldr	r0, [pc, #52]	@ (8000504 <fetchBleEvent+0x108>)
 80004d0:	f001 fd18 	bl	8001f04 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
        return -1;
  	}

  //let's stop the SPI2
  dataAvailable=0;
 80004d4:	4b0d      	ldr	r3, [pc, #52]	@ (800050c <fetchBleEvent+0x110>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
  return BLE_OK;
 80004da:	2300      	movs	r3, #0
 80004dc:	e00a      	b.n	80004f4 <fetchBleEvent+0xf8>
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80004de:	2201      	movs	r2, #1
 80004e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004e4:	4807      	ldr	r0, [pc, #28]	@ (8000504 <fetchBleEvent+0x108>)
 80004e6:	f001 fd0d 	bl	8001f04 <HAL_GPIO_WritePin>
        return -1;
 80004ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004ee:	e001      	b.n	80004f4 <fetchBleEvent+0xf8>
  }else{
  return -2;
 80004f0:	f06f 0301 	mvn.w	r3, #1
  }
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3728      	adds	r7, #40	@ 0x28
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	080040bc 	.word	0x080040bc
 8000500:	48001000 	.word	0x48001000
 8000504:	48000c00 	.word	0x48000c00
 8000508:	200002d8 	.word	0x200002d8
 800050c:	200002d4 	.word	0x200002d4

08000510 <checkEventResp>:


int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 8000510:	b480      	push	{r7}
 8000512:	b087      	sub	sp, #28
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
	int j=0;
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]

	for(j=0;j<size;j++){
 8000520:	2300      	movs	r3, #0
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	e00f      	b.n	8000546 <checkEventResp+0x36>

		if(event[j]!=reference[j]){
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	68fa      	ldr	r2, [r7, #12]
 800052a:	4413      	add	r3, r2
 800052c:	781a      	ldrb	r2, [r3, #0]
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	68b9      	ldr	r1, [r7, #8]
 8000532:	440b      	add	r3, r1
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	429a      	cmp	r2, r3
 8000538:	d002      	beq.n	8000540 <checkEventResp+0x30>
			return -1;
 800053a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800053e:	e007      	b.n	8000550 <checkEventResp+0x40>
	for(j=0;j<size;j++){
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	3301      	adds	r3, #1
 8000544:	617b      	str	r3, [r7, #20]
 8000546:	697a      	ldr	r2, [r7, #20]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	429a      	cmp	r2, r3
 800054c:	dbeb      	blt.n	8000526 <checkEventResp+0x16>
		}
	}

return BLE_OK;
 800054e:	2300      	movs	r3, #0
}
 8000550:	4618      	mov	r0, r3
 8000552:	371c      	adds	r7, #28
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <sendCommand>:

void sendCommand(uint8_t *command,int size){
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	@ 0x28
 8000560:	af02      	add	r7, sp, #8
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]

	  uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 8000566:	4a1f      	ldr	r2, [pc, #124]	@ (80005e4 <sendCommand+0x88>)
 8000568:	f107 0310 	add.w	r3, r7, #16
 800056c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000570:	6018      	str	r0, [r3, #0]
 8000572:	3304      	adds	r3, #4
 8000574:	7019      	strb	r1, [r3, #0]
	  uint8_t slave_header[5];

	  int result;

	do{
	  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000576:	2200      	movs	r2, #0
 8000578:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800057c:	481a      	ldr	r0, [pc, #104]	@ (80005e8 <sendCommand+0x8c>)
 800057e:	f001 fcc1 	bl	8001f04 <HAL_GPIO_WritePin>

	  //wait until it is possible to write
	  //while(!dataAvailable);
	  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000582:	f107 0208 	add.w	r2, r7, #8
 8000586:	f107 0110 	add.w	r1, r7, #16
 800058a:	2301      	movs	r3, #1
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2305      	movs	r3, #5
 8000590:	4816      	ldr	r0, [pc, #88]	@ (80005ec <sendCommand+0x90>)
 8000592:	f002 fd37 	bl	8003004 <HAL_SPI_TransmitReceive>
	  int bufferSize=(slave_header[2]<<8|slave_header[1]);
 8000596:	7abb      	ldrb	r3, [r7, #10]
 8000598:	021b      	lsls	r3, r3, #8
 800059a:	7a7a      	ldrb	r2, [r7, #9]
 800059c:	4313      	orrs	r3, r2
 800059e:	61bb      	str	r3, [r7, #24]
	  if(bufferSize>=size){
 80005a0:	69ba      	ldr	r2, [r7, #24]
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	db09      	blt.n	80005bc <sendCommand+0x60>
		HAL_SPI_Transmit(&hspi3,command,size,1);
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	2301      	movs	r3, #1
 80005ae:	6879      	ldr	r1, [r7, #4]
 80005b0:	480e      	ldr	r0, [pc, #56]	@ (80005ec <sendCommand+0x90>)
 80005b2:	f002 fbb2 	bl	8002d1a <HAL_SPI_Transmit>
		result=0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61fb      	str	r3, [r7, #28]
 80005ba:	e002      	b.n	80005c2 <sendCommand+0x66>
	  }else{
		result=-1;
 80005bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005c0:	61fb      	str	r3, [r7, #28]
	  }
	  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80005c2:	2201      	movs	r2, #1
 80005c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005c8:	4807      	ldr	r0, [pc, #28]	@ (80005e8 <sendCommand+0x8c>)
 80005ca:	f001 fc9b 	bl	8001f04 <HAL_GPIO_WritePin>
	  dataAvailable=0;
 80005ce:	4b08      	ldr	r3, [pc, #32]	@ (80005f0 <sendCommand+0x94>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
	}while(result!=0);
 80005d4:	69fb      	ldr	r3, [r7, #28]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d1cd      	bne.n	8000576 <sendCommand+0x1a>

}
 80005da:	bf00      	nop
 80005dc:	bf00      	nop
 80005de:	3720      	adds	r7, #32
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	080040c4 	.word	0x080040c4
 80005e8:	48000c00 	.word	0x48000c00
 80005ec:	200002d8 	.word	0x200002d8
 80005f0:	200002d4 	.word	0x200002d4

080005f4 <catchBLE>:

void catchBLE(){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
      int result=fetchBleEvent(buffer,127);
 80005fa:	217f      	movs	r1, #127	@ 0x7f
 80005fc:	4813      	ldr	r0, [pc, #76]	@ (800064c <catchBLE+0x58>)
 80005fe:	f7ff fefd 	bl	80003fc <fetchBleEvent>
 8000602:	6078      	str	r0, [r7, #4]
	  if(result==BLE_OK){
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d11b      	bne.n	8000642 <catchBLE+0x4e>
		  if(checkEventResp(buffer,EVENT_DISCONNECTED,3)==BLE_OK){
 800060a:	2203      	movs	r2, #3
 800060c:	4910      	ldr	r1, [pc, #64]	@ (8000650 <catchBLE+0x5c>)
 800060e:	480f      	ldr	r0, [pc, #60]	@ (800064c <catchBLE+0x58>)
 8000610:	f7ff ff7e 	bl	8000510 <checkEventResp>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d101      	bne.n	800061e <catchBLE+0x2a>
			  // This automatically sets your device to be discoverable
			  // as soon as it disconnects from a device
			  setConnectable();
 800061a:	f000 f81f 	bl	800065c <setConnectable>
		  }
		  if(checkEventResp(buffer, EVENT_CONNECTED, 5)==BLE_OK){
 800061e:	2205      	movs	r2, #5
 8000620:	490c      	ldr	r1, [pc, #48]	@ (8000654 <catchBLE+0x60>)
 8000622:	480a      	ldr	r0, [pc, #40]	@ (800064c <catchBLE+0x58>)
 8000624:	f7ff ff74 	bl	8000510 <checkEventResp>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d109      	bne.n	8000642 <catchBLE+0x4e>
			  // Little Endian Format
			  *(connectionHandler) = buffer[5];
 800062e:	4b07      	ldr	r3, [pc, #28]	@ (800064c <catchBLE+0x58>)
 8000630:	795b      	ldrb	r3, [r3, #5]
 8000632:	b21a      	sxth	r2, r3
 8000634:	4b08      	ldr	r3, [pc, #32]	@ (8000658 <catchBLE+0x64>)
 8000636:	801a      	strh	r2, [r3, #0]
			  *(connectionHandler + 1) = buffer[6];
 8000638:	4b04      	ldr	r3, [pc, #16]	@ (800064c <catchBLE+0x58>)
 800063a:	799b      	ldrb	r3, [r3, #6]
 800063c:	b21a      	sxth	r2, r3
 800063e:	4b06      	ldr	r3, [pc, #24]	@ (8000658 <catchBLE+0x64>)
 8000640:	805a      	strh	r2, [r3, #2]
		  }
	  }else{
		  //something bad is happening if I am here
	  }
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200001c4 	.word	0x200001c4
 8000650:	200000e8 	.word	0x200000e8
 8000654:	200000ec 	.word	0x200000ec
 8000658:	2000012c 	.word	0x2000012c

0800065c <setConnectable>:

void setConnectable(){
 800065c:	b590      	push	{r4, r7, lr}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
	   uint8_t* rxEvent;
	   //Start advertising
	   uint8_t *localname;
	   int res;
	   localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 8000662:	200c      	movs	r0, #12
 8000664:	f003 f854 	bl	8003710 <malloc>
 8000668:	4603      	mov	r3, r0
 800066a:	60fb      	str	r3, [r7, #12]
	   memcpy(localname,deviceName,sizeof(deviceName));
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	4a36      	ldr	r2, [pc, #216]	@ (8000748 <setConnectable+0xec>)
 8000670:	6810      	ldr	r0, [r2, #0]
 8000672:	6018      	str	r0, [r3, #0]
 8000674:	8891      	ldrh	r1, [r2, #4]
 8000676:	7992      	ldrb	r2, [r2, #6]
 8000678:	8099      	strh	r1, [r3, #4]
 800067a:	719a      	strb	r2, [r3, #6]
	   localname[sizeof(deviceName)+1]=0x00;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	3308      	adds	r3, #8
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+2]=0x00;
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	3309      	adds	r3, #9
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+3]=0x00;
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	330a      	adds	r3, #10
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+4]=0x00;
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	330b      	adds	r3, #11
 8000698:	2200      	movs	r2, #0
 800069a:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)]=0x00;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	3307      	adds	r3, #7
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]


	   ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 80006a4:	4b29      	ldr	r3, [pc, #164]	@ (800074c <setConnectable+0xf0>)
 80006a6:	2208      	movs	r2, #8
 80006a8:	72da      	strb	r2, [r3, #11]
	   ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 80006aa:	4b28      	ldr	r3, [pc, #160]	@ (800074c <setConnectable+0xf0>)
 80006ac:	2215      	movs	r2, #21
 80006ae:	70da      	strb	r2, [r3, #3]

	   uint8_t *discoverableCommand;
	   discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 80006b0:	2019      	movs	r0, #25
 80006b2:	f003 f82d 	bl	8003710 <malloc>
 80006b6:	4603      	mov	r3, r0
 80006b8:	60bb      	str	r3, [r7, #8]
	   memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	4a23      	ldr	r2, [pc, #140]	@ (800074c <setConnectable+0xf0>)
 80006be:	461c      	mov	r4, r3
 80006c0:	4613      	mov	r3, r2
 80006c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80006c4:	6020      	str	r0, [r4, #0]
 80006c6:	6061      	str	r1, [r4, #4]
 80006c8:	60a2      	str	r2, [r4, #8]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	7323      	strb	r3, [r4, #12]
	   memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	330d      	adds	r3, #13
 80006d2:	220c      	movs	r2, #12
 80006d4:	68f9      	ldr	r1, [r7, #12]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f003 fa3d 	bl	8003b56 <memcpy>

	   sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 80006dc:	2119      	movs	r1, #25
 80006de:	68b8      	ldr	r0, [r7, #8]
 80006e0:	f7ff ff3c 	bl	800055c <sendCommand>
	   rxEvent=(uint8_t*)malloc(7);
 80006e4:	2007      	movs	r0, #7
 80006e6:	f003 f813 	bl	8003710 <malloc>
 80006ea:	4603      	mov	r3, r0
 80006ec:	607b      	str	r3, [r7, #4]
	   while(!dataAvailable);
 80006ee:	bf00      	nop
 80006f0:	4b17      	ldr	r3, [pc, #92]	@ (8000750 <setConnectable+0xf4>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d0fb      	beq.n	80006f0 <setConnectable+0x94>
	   res=fetchBleEvent(rxEvent,7);
 80006f8:	2107      	movs	r1, #7
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f7ff fe7e 	bl	80003fc <fetchBleEvent>
 8000700:	6038      	str	r0, [r7, #0]
	   if(res==BLE_OK){
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d10f      	bne.n	8000728 <setConnectable+0xcc>
	   res=checkEventResp(rxEvent,ACI_GAP_SET_DISCOVERABLE_COMPLETE,7);
 8000708:	2207      	movs	r2, #7
 800070a:	4912      	ldr	r1, [pc, #72]	@ (8000754 <setConnectable+0xf8>)
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f7ff feff 	bl	8000510 <checkEventResp>
 8000712:	6038      	str	r0, [r7, #0]
	   if(res==BLE_OK){
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d106      	bne.n	8000728 <setConnectable+0xcc>
		   stackInitCompleteFlag|=0x80;
 800071a:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <setConnectable+0xfc>)
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000722:	b29a      	uxth	r2, r3
 8000724:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <setConnectable+0xfc>)
 8000726:	801a      	strh	r2, [r3, #0]
	   }
	   }

	   free(rxEvent);
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f002 fff9 	bl	8003720 <free>
	   free(discoverableCommand);
 800072e:	68b8      	ldr	r0, [r7, #8]
 8000730:	f002 fff6 	bl	8003720 <free>
	   free(localname);
 8000734:	68f8      	ldr	r0, [r7, #12]
 8000736:	f002 fff3 	bl	8003720 <free>
	   HAL_Delay(10);
 800073a:	200a      	movs	r0, #10
 800073c:	f001 f8ea 	bl	8001914 <HAL_Delay>
}
 8000740:	bf00      	nop
 8000742:	3714      	adds	r7, #20
 8000744:	46bd      	mov	sp, r7
 8000746:	bd90      	pop	{r4, r7, pc}
 8000748:	200000f4 	.word	0x200000f4
 800074c:	20000078 	.word	0x20000078
 8000750:	200002d4 	.word	0x200002d4
 8000754:	20000088 	.word	0x20000088
 8000758:	200002ce 	.word	0x200002ce

0800075c <BLE_command>:
 * @param sizeRes Expected size of the response result.
 * @param returnHandles Number of handles expected in the response (each handle occupies 2 bytes).
 * @return int Returns BLE_OK if the command was successfully executed and the event response is valid,
 *             or an error code if something went wrong.
 */
int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
 8000768:	603b      	str	r3, [r7, #0]
	   int response;

	   sendCommand(command,size);
 800076a:	68b9      	ldr	r1, [r7, #8]
 800076c:	68f8      	ldr	r0, [r7, #12]
 800076e:	f7ff fef5 	bl	800055c <sendCommand>
	   rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 8000772:	6a3b      	ldr	r3, [r7, #32]
 8000774:	005a      	lsls	r2, r3, #1
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	4413      	add	r3, r2
 800077a:	4618      	mov	r0, r3
 800077c:	f002 ffc8 	bl	8003710 <malloc>
 8000780:	4603      	mov	r3, r0
 8000782:	461a      	mov	r2, r3
 8000784:	4b19      	ldr	r3, [pc, #100]	@ (80007ec <BLE_command+0x90>)
 8000786:	601a      	str	r2, [r3, #0]

	   long contatore=0;
 8000788:	2300      	movs	r3, #0
 800078a:	613b      	str	r3, [r7, #16]
	   while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 800078c:	e007      	b.n	800079e <BLE_command+0x42>
		   contatore++;
 800078e:	693b      	ldr	r3, [r7, #16]
 8000790:	3301      	adds	r3, #1
 8000792:	613b      	str	r3, [r7, #16]
		   if(contatore>30000){
 8000794:	693b      	ldr	r3, [r7, #16]
 8000796:	f247 5230 	movw	r2, #30000	@ 0x7530
 800079a:	4293      	cmp	r3, r2
 800079c:	dc07      	bgt.n	80007ae <BLE_command+0x52>
	   while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 800079e:	2140      	movs	r1, #64	@ 0x40
 80007a0:	4813      	ldr	r0, [pc, #76]	@ (80007f0 <BLE_command+0x94>)
 80007a2:	f001 fb97 	bl	8001ed4 <HAL_GPIO_ReadPin>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d0f0      	beq.n	800078e <BLE_command+0x32>
 80007ac:	e000      	b.n	80007b0 <BLE_command+0x54>
			   break;
 80007ae:	bf00      	nop
		   }
	   }


	   response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 80007b0:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <BLE_command+0x90>)
 80007b2:	6818      	ldr	r0, [r3, #0]
 80007b4:	6a3b      	ldr	r3, [r7, #32]
 80007b6:	005a      	lsls	r2, r3, #1
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	4413      	add	r3, r2
 80007bc:	4619      	mov	r1, r3
 80007be:	f7ff fe1d 	bl	80003fc <fetchBleEvent>
 80007c2:	6178      	str	r0, [r7, #20]
	   if(response==BLE_OK){
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d107      	bne.n	80007da <BLE_command+0x7e>
		   response=checkEventResp(rxEvent,result,sizeRes);
 80007ca:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <BLE_command+0x90>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	683a      	ldr	r2, [r7, #0]
 80007d0:	6879      	ldr	r1, [r7, #4]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff fe9c 	bl	8000510 <checkEventResp>
 80007d8:	6178      	str	r0, [r7, #20]
	   }
	   HAL_Delay(10);
 80007da:	200a      	movs	r0, #10
 80007dc:	f001 f89a 	bl	8001914 <HAL_Delay>


	return response;
 80007e0:	697b      	ldr	r3, [r7, #20]
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3718      	adds	r7, #24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200002d0 	.word	0x200002d0
 80007f0:	48001000 	.word	0x48001000

080007f4 <addService>:

void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af02      	add	r7, sp, #8
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]


	//memcpy
	memcpy(ADD_PRIMARY_SERVICE+5,UUID,16);
 8000800:	4b14      	ldr	r3, [pc, #80]	@ (8000854 <addService+0x60>)
 8000802:	2210      	movs	r2, #16
 8000804:	68f9      	ldr	r1, [r7, #12]
 8000806:	4618      	mov	r0, r3
 8000808:	f003 f9a5 	bl	8003b56 <memcpy>
    ADD_PRIMARY_SERVICE[22]=attributes;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	b2da      	uxtb	r2, r3
 8000810:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <addService+0x64>)
 8000812:	759a      	strb	r2, [r3, #22]
	   if(BLE_command(ADD_PRIMARY_SERVICE,sizeof(ADD_PRIMARY_SERVICE),ADD_PRIMARY_SERVICE_COMPLETE,sizeof(ADD_PRIMARY_SERVICE_COMPLETE),1)==BLE_OK){
 8000814:	2301      	movs	r3, #1
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	2307      	movs	r3, #7
 800081a:	4a10      	ldr	r2, [pc, #64]	@ (800085c <addService+0x68>)
 800081c:	2117      	movs	r1, #23
 800081e:	480e      	ldr	r0, [pc, #56]	@ (8000858 <addService+0x64>)
 8000820:	f7ff ff9c 	bl	800075c <BLE_command>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d10a      	bne.n	8000840 <addService+0x4c>
		   handle[0]=rxEvent[7];
 800082a:	4b0d      	ldr	r3, [pc, #52]	@ (8000860 <addService+0x6c>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	79da      	ldrb	r2, [r3, #7]
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	701a      	strb	r2, [r3, #0]
		   handle[1]=rxEvent[8];
 8000834:	4b0a      	ldr	r3, [pc, #40]	@ (8000860 <addService+0x6c>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	3301      	adds	r3, #1
 800083c:	7a12      	ldrb	r2, [r2, #8]
 800083e:	701a      	strb	r2, [r3, #0]
	    }
	   free(rxEvent);
 8000840:	4b07      	ldr	r3, [pc, #28]	@ (8000860 <addService+0x6c>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4618      	mov	r0, r3
 8000846:	f002 ff6b 	bl	8003720 <free>
}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000095 	.word	0x20000095
 8000858:	20000090 	.word	0x20000090
 800085c:	200000a8 	.word	0x200000a8
 8000860:	200002d0 	.word	0x200002d0

08000864 <addCharacteristic>:

void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af02      	add	r7, sp, #8
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
 8000870:	70fb      	strb	r3, [r7, #3]
    memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 8000872:	4b19      	ldr	r3, [pc, #100]	@ (80008d8 <addCharacteristic+0x74>)
 8000874:	2210      	movs	r2, #16
 8000876:	68f9      	ldr	r1, [r7, #12]
 8000878:	4618      	mov	r0, r3
 800087a:	f003 f96c 	bl	8003b56 <memcpy>

	ADD_CUSTOM_CHAR[4]= handleService[0];
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	781a      	ldrb	r2, [r3, #0]
 8000882:	4b16      	ldr	r3, [pc, #88]	@ (80008dc <addCharacteristic+0x78>)
 8000884:	711a      	strb	r2, [r3, #4]
	ADD_CUSTOM_CHAR[5]= handleService[1];
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	785a      	ldrb	r2, [r3, #1]
 800088a:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <addCharacteristic+0x78>)
 800088c:	715a      	strb	r2, [r3, #5]
	ADD_CUSTOM_CHAR[23]= maxsize;
 800088e:	4a13      	ldr	r2, [pc, #76]	@ (80008dc <addCharacteristic+0x78>)
 8000890:	78fb      	ldrb	r3, [r7, #3]
 8000892:	75d3      	strb	r3, [r2, #23]
	ADD_CUSTOM_CHAR[25]= proprieties;
 8000894:	4a11      	ldr	r2, [pc, #68]	@ (80008dc <addCharacteristic+0x78>)
 8000896:	7e3b      	ldrb	r3, [r7, #24]
 8000898:	7653      	strb	r3, [r2, #25]
	if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 800089a:	2301      	movs	r3, #1
 800089c:	9300      	str	r3, [sp, #0]
 800089e:	2307      	movs	r3, #7
 80008a0:	4a0f      	ldr	r2, [pc, #60]	@ (80008e0 <addCharacteristic+0x7c>)
 80008a2:	211e      	movs	r1, #30
 80008a4:	480d      	ldr	r0, [pc, #52]	@ (80008dc <addCharacteristic+0x78>)
 80008a6:	f7ff ff59 	bl	800075c <BLE_command>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d10a      	bne.n	80008c6 <addCharacteristic+0x62>
        handleChar[0]=rxEvent[7];
 80008b0:	4b0c      	ldr	r3, [pc, #48]	@ (80008e4 <addCharacteristic+0x80>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	79da      	ldrb	r2, [r3, #7]
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	701a      	strb	r2, [r3, #0]
	    handleChar[1]=rxEvent[8];
 80008ba:	4b0a      	ldr	r3, [pc, #40]	@ (80008e4 <addCharacteristic+0x80>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	3301      	adds	r3, #1
 80008c2:	7a12      	ldrb	r2, [r2, #8]
 80008c4:	701a      	strb	r2, [r3, #0]
	}
	free(rxEvent);
 80008c6:	4b07      	ldr	r3, [pc, #28]	@ (80008e4 <addCharacteristic+0x80>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f002 ff28 	bl	8003720 <free>
}
 80008d0:	bf00      	nop
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	200000b7 	.word	0x200000b7
 80008dc:	200000b0 	.word	0x200000b0
 80008e0:	200000d0 	.word	0x200000d0
 80008e4:	200002d0 	.word	0x200002d0

080008e8 <updateCharValue>:

void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b088      	sub	sp, #32
 80008ec:	af02      	add	r7, sp, #8
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
 80008f4:	603b      	str	r3, [r7, #0]
	UPDATE_CHAR[3]=size+6;
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	3306      	adds	r3, #6
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	4b21      	ldr	r3, [pc, #132]	@ (8000984 <updateCharValue+0x9c>)
 8000900:	70da      	strb	r2, [r3, #3]
	UPDATE_CHAR[4]=handleService[0];
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	781a      	ldrb	r2, [r3, #0]
 8000906:	4b1f      	ldr	r3, [pc, #124]	@ (8000984 <updateCharValue+0x9c>)
 8000908:	711a      	strb	r2, [r3, #4]
	UPDATE_CHAR[5]=handleService[1];
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	785a      	ldrb	r2, [r3, #1]
 800090e:	4b1d      	ldr	r3, [pc, #116]	@ (8000984 <updateCharValue+0x9c>)
 8000910:	715a      	strb	r2, [r3, #5]
	UPDATE_CHAR[6]=handleChar[0];
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	781a      	ldrb	r2, [r3, #0]
 8000916:	4b1b      	ldr	r3, [pc, #108]	@ (8000984 <updateCharValue+0x9c>)
 8000918:	719a      	strb	r2, [r3, #6]
	UPDATE_CHAR[7]=handleChar[1];
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	785a      	ldrb	r2, [r3, #1]
 800091e:	4b19      	ldr	r3, [pc, #100]	@ (8000984 <updateCharValue+0x9c>)
 8000920:	71da      	strb	r2, [r3, #7]
	UPDATE_CHAR[8]=offset;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	b2da      	uxtb	r2, r3
 8000926:	4b17      	ldr	r3, [pc, #92]	@ (8000984 <updateCharValue+0x9c>)
 8000928:	721a      	strb	r2, [r3, #8]
	UPDATE_CHAR[9]=size;
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4b15      	ldr	r3, [pc, #84]	@ (8000984 <updateCharValue+0x9c>)
 8000930:	725a      	strb	r2, [r3, #9]

	uint8_t* commandComplete;
	commandComplete=(uint8_t*)malloc(10+size);
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	330a      	adds	r3, #10
 8000936:	4618      	mov	r0, r3
 8000938:	f002 feea 	bl	8003710 <malloc>
 800093c:	4603      	mov	r3, r0
 800093e:	617b      	str	r3, [r7, #20]
	memcpy(commandComplete,UPDATE_CHAR,10);
 8000940:	220a      	movs	r2, #10
 8000942:	4910      	ldr	r1, [pc, #64]	@ (8000984 <updateCharValue+0x9c>)
 8000944:	6978      	ldr	r0, [r7, #20]
 8000946:	f003 f906 	bl	8003b56 <memcpy>
	memcpy(commandComplete+10,data,size);
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	330a      	adds	r3, #10
 800094e:	683a      	ldr	r2, [r7, #0]
 8000950:	6a39      	ldr	r1, [r7, #32]
 8000952:	4618      	mov	r0, r3
 8000954:	f003 f8ff 	bl	8003b56 <memcpy>

	BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	f103 010a 	add.w	r1, r3, #10
 800095e:	2300      	movs	r3, #0
 8000960:	9300      	str	r3, [sp, #0]
 8000962:	2307      	movs	r3, #7
 8000964:	4a08      	ldr	r2, [pc, #32]	@ (8000988 <updateCharValue+0xa0>)
 8000966:	6978      	ldr	r0, [r7, #20]
 8000968:	f7ff fef8 	bl	800075c <BLE_command>

	free(commandComplete);
 800096c:	6978      	ldr	r0, [r7, #20]
 800096e:	f002 fed7 	bl	8003720 <free>
	free(rxEvent);
 8000972:	4b06      	ldr	r3, [pc, #24]	@ (800098c <updateCharValue+0xa4>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4618      	mov	r0, r3
 8000978:	f002 fed2 	bl	8003720 <free>
}
 800097c:	bf00      	nop
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	200000d8 	.word	0x200000d8
 8000988:	200000d0 	.word	0x200000d0
 800098c:	200002d0 	.word	0x200002d0

08000990 <i2c_init>:
 *      Author: Dionisio
 */

#include <i2c.h>

void i2c_init(){
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
	// Enable I2C Clock
	RCC->APB1ENR1 |= RCC_APB1ENR1_I2C2EN;
 8000994:	4b39      	ldr	r3, [pc, #228]	@ (8000a7c <i2c_init+0xec>)
 8000996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000998:	4a38      	ldr	r2, [pc, #224]	@ (8000a7c <i2c_init+0xec>)
 800099a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800099e:	6593      	str	r3, [r2, #88]	@ 0x58
	//Enable Clock for GPIO B
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 80009a0:	4b36      	ldr	r3, [pc, #216]	@ (8000a7c <i2c_init+0xec>)
 80009a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a4:	4a35      	ldr	r2, [pc, #212]	@ (8000a7c <i2c_init+0xec>)
 80009a6:	f043 0302 	orr.w	r3, r3, #2
 80009aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
	/* Configure PB10 and PB11 as an output by clearing all bits and setting the mode */
	GPIOB->MODER &= ~GPIO_MODER_MODE10;
 80009ac:	4b34      	ldr	r3, [pc, #208]	@ (8000a80 <i2c_init+0xf0>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a33      	ldr	r2, [pc, #204]	@ (8000a80 <i2c_init+0xf0>)
 80009b2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80009b6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODE10_1;
 80009b8:	4b31      	ldr	r3, [pc, #196]	@ (8000a80 <i2c_init+0xf0>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a30      	ldr	r2, [pc, #192]	@ (8000a80 <i2c_init+0xf0>)
 80009be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009c2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~GPIO_MODER_MODE11;
 80009c4:	4b2e      	ldr	r3, [pc, #184]	@ (8000a80 <i2c_init+0xf0>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a2d      	ldr	r2, [pc, #180]	@ (8000a80 <i2c_init+0xf0>)
 80009ca:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80009ce:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODE11_1;
 80009d0:	4b2b      	ldr	r3, [pc, #172]	@ (8000a80 <i2c_init+0xf0>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a2a      	ldr	r2, [pc, #168]	@ (8000a80 <i2c_init+0xf0>)
 80009d6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80009da:	6013      	str	r3, [r2, #0]

	/* Configure the GPIO with open drain mode */
	GPIOB->OTYPER |= GPIO_OTYPER_OT10;
 80009dc:	4b28      	ldr	r3, [pc, #160]	@ (8000a80 <i2c_init+0xf0>)
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	4a27      	ldr	r2, [pc, #156]	@ (8000a80 <i2c_init+0xf0>)
 80009e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009e6:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= GPIO_OTYPER_OT11;
 80009e8:	4b25      	ldr	r3, [pc, #148]	@ (8000a80 <i2c_init+0xf0>)
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	4a24      	ldr	r2, [pc, #144]	@ (8000a80 <i2c_init+0xf0>)
 80009ee:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009f2:	6053      	str	r3, [r2, #4]
	/*Configure the GPIO with high speed mode */
	GPIOB->OSPEEDR |= GPIO_OSPEEDR_OSPEED10_Msk;
 80009f4:	4b22      	ldr	r3, [pc, #136]	@ (8000a80 <i2c_init+0xf0>)
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	4a21      	ldr	r2, [pc, #132]	@ (8000a80 <i2c_init+0xf0>)
 80009fa:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80009fe:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= GPIO_OSPEEDR_OSPEED11_Msk;
 8000a00:	4b1f      	ldr	r3, [pc, #124]	@ (8000a80 <i2c_init+0xf0>)
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	4a1e      	ldr	r2, [pc, #120]	@ (8000a80 <i2c_init+0xf0>)
 8000a06:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 8000a0a:	6093      	str	r3, [r2, #8]
	/*Enable Pull up resistors*/
	GPIOB->PUPDR |= GPIO_PUPDR_PUPD10_0;
 8000a0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a80 <i2c_init+0xf0>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	4a1b      	ldr	r2, [pc, #108]	@ (8000a80 <i2c_init+0xf0>)
 8000a12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000a16:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= GPIO_PUPDR_PUPD11_0;
 8000a18:	4b19      	ldr	r3, [pc, #100]	@ (8000a80 <i2c_init+0xf0>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	4a18      	ldr	r2, [pc, #96]	@ (8000a80 <i2c_init+0xf0>)
 8000a1e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a22:	60d3      	str	r3, [r2, #12]
	/*Set alternate function mapping*/
	GPIOB->AFR[1] |= GPIO_AFRH_AFSEL10_2;
 8000a24:	4b16      	ldr	r3, [pc, #88]	@ (8000a80 <i2c_init+0xf0>)
 8000a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a28:	4a15      	ldr	r2, [pc, #84]	@ (8000a80 <i2c_init+0xf0>)
 8000a2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a2e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= GPIO_AFRH_AFSEL11_2;
 8000a30:	4b13      	ldr	r3, [pc, #76]	@ (8000a80 <i2c_init+0xf0>)
 8000a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a34:	4a12      	ldr	r2, [pc, #72]	@ (8000a80 <i2c_init+0xf0>)
 8000a36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a3a:	6253      	str	r3, [r2, #36]	@ 0x24

	/* I2C configuration*/
	// Hardware Reset
	I2C2->CR1 |= I2C_CR1_SWRST;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	@ (8000a84 <i2c_init+0xf4>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a10      	ldr	r2, [pc, #64]	@ (8000a84 <i2c_init+0xf4>)
 8000a42:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a46:	6013      	str	r3, [r2, #0]
	I2C2->CR1 &= ~I2C_CR1_SWRST;
 8000a48:	4b0e      	ldr	r3, [pc, #56]	@ (8000a84 <i2c_init+0xf4>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a84 <i2c_init+0xf4>)
 8000a4e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000a52:	6013      	str	r3, [r2, #0]
	//turn the peripheral off
	I2C2->CR1 &= ~I2C_CR1_PE;
 8000a54:	4b0b      	ldr	r3, [pc, #44]	@ (8000a84 <i2c_init+0xf4>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0a      	ldr	r2, [pc, #40]	@ (8000a84 <i2c_init+0xf4>)
 8000a5a:	f023 0301 	bic.w	r3, r3, #1
 8000a5e:	6013      	str	r3, [r2, #0]

	// Set BAUD RATE to ~20-21 kHz
	I2C2->TIMINGR = (7 << 28) |  // PRESC = 7
 8000a60:	4b08      	ldr	r3, [pc, #32]	@ (8000a84 <i2c_init+0xf4>)
 8000a62:	4a09      	ldr	r2, [pc, #36]	@ (8000a88 <i2c_init+0xf8>)
 8000a64:	611a      	str	r2, [r3, #16]
	                (11 << 8) |  // SCLH = 11
	                (11 << 0);   // SCLL = 11


	// Enabling I2C2 peripheral
	I2C2->CR1 |= I2C_CR1_PE;
 8000a66:	4b07      	ldr	r3, [pc, #28]	@ (8000a84 <i2c_init+0xf4>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a06      	ldr	r2, [pc, #24]	@ (8000a84 <i2c_init+0xf4>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6013      	str	r3, [r2, #0]
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	48000400 	.word	0x48000400
 8000a84:	40005800 	.word	0x40005800
 8000a88:	72100b0b 	.word	0x72100b0b

08000a8c <i2c_transaction>:

uint8_t i2c_transaction(uint8_t address, uint8_t dir, uint8_t* data, uint8_t len) {
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	603a      	str	r2, [r7, #0]
 8000a94:	461a      	mov	r2, r3
 8000a96:	4603      	mov	r3, r0
 8000a98:	71fb      	strb	r3, [r7, #7]
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	71bb      	strb	r3, [r7, #6]
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	717b      	strb	r3, [r7, #5]
	while (I2C2->ISR & I2C_ISR_BUSY);
 8000aa2:	bf00      	nop
 8000aa4:	4b5c      	ldr	r3, [pc, #368]	@ (8000c18 <i2c_transaction+0x18c>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d1f9      	bne.n	8000aa4 <i2c_transaction+0x18>
	I2C2->CR2 &= ~I2C_CR2_SADD;
 8000ab0:	4b59      	ldr	r3, [pc, #356]	@ (8000c18 <i2c_transaction+0x18c>)
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	4a58      	ldr	r2, [pc, #352]	@ (8000c18 <i2c_transaction+0x18c>)
 8000ab6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8000aba:	f023 0303 	bic.w	r3, r3, #3
 8000abe:	6053      	str	r3, [r2, #4]
	I2C2->CR2 &= ~I2C_CR2_RD_WRN;
 8000ac0:	4b55      	ldr	r3, [pc, #340]	@ (8000c18 <i2c_transaction+0x18c>)
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	4a54      	ldr	r2, [pc, #336]	@ (8000c18 <i2c_transaction+0x18c>)
 8000ac6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000aca:	6053      	str	r3, [r2, #4]
	I2C2->CR2 &= ~I2C_CR2_NBYTES_Msk;
 8000acc:	4b52      	ldr	r3, [pc, #328]	@ (8000c18 <i2c_transaction+0x18c>)
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	4a51      	ldr	r2, [pc, #324]	@ (8000c18 <i2c_transaction+0x18c>)
 8000ad2:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8000ad6:	6053      	str	r3, [r2, #4]
	if(dir){ //do a read transaction
 8000ad8:	79bb      	ldrb	r3, [r7, #6]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d04c      	beq.n	8000b78 <i2c_transaction+0xec>
		//configure CR2 register
		I2C2->CR2 |= (address << 1) | (1<< 10) | (len << 16);
 8000ade:	4b4e      	ldr	r3, [pc, #312]	@ (8000c18 <i2c_transaction+0x18c>)
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	79fa      	ldrb	r2, [r7, #7]
 8000ae4:	0052      	lsls	r2, r2, #1
 8000ae6:	f442 6180 	orr.w	r1, r2, #1024	@ 0x400
 8000aea:	797a      	ldrb	r2, [r7, #5]
 8000aec:	0412      	lsls	r2, r2, #16
 8000aee:	430a      	orrs	r2, r1
 8000af0:	4611      	mov	r1, r2
 8000af2:	4a49      	ldr	r2, [pc, #292]	@ (8000c18 <i2c_transaction+0x18c>)
 8000af4:	430b      	orrs	r3, r1
 8000af6:	6053      	str	r3, [r2, #4]
		I2C2->CR2 |= I2C_CR2_START;
 8000af8:	4b47      	ldr	r3, [pc, #284]	@ (8000c18 <i2c_transaction+0x18c>)
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	4a46      	ldr	r2, [pc, #280]	@ (8000c18 <i2c_transaction+0x18c>)
 8000afe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b02:	6053      	str	r3, [r2, #4]


		for (uint8_t i = 0; i < len; i++) {
 8000b04:	2300      	movs	r3, #0
 8000b06:	73fb      	strb	r3, [r7, #15]
 8000b08:	e023      	b.n	8000b52 <i2c_transaction+0xc6>

			while (!(I2C2->ISR & I2C_ISR_RXNE)){
				if (I2C2->ISR & I2C_ISR_NACKF) {
 8000b0a:	4b43      	ldr	r3, [pc, #268]	@ (8000c18 <i2c_transaction+0x18c>)
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	f003 0310 	and.w	r3, r3, #16
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d00d      	beq.n	8000b32 <i2c_transaction+0xa6>
					I2C2->ICR |= I2C_ICR_NACKCF;
 8000b16:	4b40      	ldr	r3, [pc, #256]	@ (8000c18 <i2c_transaction+0x18c>)
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	4a3f      	ldr	r2, [pc, #252]	@ (8000c18 <i2c_transaction+0x18c>)
 8000b1c:	f043 0310 	orr.w	r3, r3, #16
 8000b20:	61d3      	str	r3, [r2, #28]
					I2C2->CR2 |= I2C_CR2_STOP;
 8000b22:	4b3d      	ldr	r3, [pc, #244]	@ (8000c18 <i2c_transaction+0x18c>)
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	4a3c      	ldr	r2, [pc, #240]	@ (8000c18 <i2c_transaction+0x18c>)
 8000b28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b2c:	6053      	str	r3, [r2, #4]
					return 0; // NACK received
 8000b2e:	2300      	movs	r3, #0
 8000b30:	e06b      	b.n	8000c0a <i2c_transaction+0x17e>
			while (!(I2C2->ISR & I2C_ISR_RXNE)){
 8000b32:	4b39      	ldr	r3, [pc, #228]	@ (8000c18 <i2c_transaction+0x18c>)
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	f003 0304 	and.w	r3, r3, #4
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d0e5      	beq.n	8000b0a <i2c_transaction+0x7e>
				}
			}
			data[i] = I2C2->RXDR;
 8000b3e:	4b36      	ldr	r3, [pc, #216]	@ (8000c18 <i2c_transaction+0x18c>)
 8000b40:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000b42:	7bfb      	ldrb	r3, [r7, #15]
 8000b44:	683a      	ldr	r2, [r7, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	b2ca      	uxtb	r2, r1
 8000b4a:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < len; i++) {
 8000b4c:	7bfb      	ldrb	r3, [r7, #15]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	73fb      	strb	r3, [r7, #15]
 8000b52:	7bfa      	ldrb	r2, [r7, #15]
 8000b54:	797b      	ldrb	r3, [r7, #5]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d3eb      	bcc.n	8000b32 <i2c_transaction+0xa6>
		}


		//check if transfer is complete
		while (!(I2C2->ISR & I2C_ISR_TC));
 8000b5a:	bf00      	nop
 8000b5c:	4b2e      	ldr	r3, [pc, #184]	@ (8000c18 <i2c_transaction+0x18c>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d0f9      	beq.n	8000b5c <i2c_transaction+0xd0>
		I2C2->CR2 |= I2C_CR2_STOP;
 8000b68:	4b2b      	ldr	r3, [pc, #172]	@ (8000c18 <i2c_transaction+0x18c>)
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	4a2a      	ldr	r2, [pc, #168]	@ (8000c18 <i2c_transaction+0x18c>)
 8000b6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b72:	6053      	str	r3, [r2, #4]
		return 1;
 8000b74:	2301      	movs	r3, #1
 8000b76:	e048      	b.n	8000c0a <i2c_transaction+0x17e>

	} else { //do a write transaction
		// Set the address and direction
		I2C2->CR2 |= (address << 1) | (0<< 10) | (len << 16);
 8000b78:	4b27      	ldr	r3, [pc, #156]	@ (8000c18 <i2c_transaction+0x18c>)
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	79fa      	ldrb	r2, [r7, #7]
 8000b7e:	0051      	lsls	r1, r2, #1
 8000b80:	797a      	ldrb	r2, [r7, #5]
 8000b82:	0412      	lsls	r2, r2, #16
 8000b84:	430a      	orrs	r2, r1
 8000b86:	4611      	mov	r1, r2
 8000b88:	4a23      	ldr	r2, [pc, #140]	@ (8000c18 <i2c_transaction+0x18c>)
 8000b8a:	430b      	orrs	r3, r1
 8000b8c:	6053      	str	r3, [r2, #4]
		I2C2->CR2 |= I2C_CR2_START;
 8000b8e:	4b22      	ldr	r3, [pc, #136]	@ (8000c18 <i2c_transaction+0x18c>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	4a21      	ldr	r2, [pc, #132]	@ (8000c18 <i2c_transaction+0x18c>)
 8000b94:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b98:	6053      	str	r3, [r2, #4]


		for (uint8_t i = 0; i < len; i++) {
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	73bb      	strb	r3, [r7, #14]
 8000b9e:	e022      	b.n	8000be6 <i2c_transaction+0x15a>
			while (!(I2C2->ISR & I2C_ISR_TXIS)) {
				if (I2C2->ISR & I2C_ISR_NACKF) {//Check NACK flag
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c18 <i2c_transaction+0x18c>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	f003 0310 	and.w	r3, r3, #16
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d00d      	beq.n	8000bc8 <i2c_transaction+0x13c>
					I2C2->ICR |= I2C_ICR_NACKCF;
 8000bac:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <i2c_transaction+0x18c>)
 8000bae:	69db      	ldr	r3, [r3, #28]
 8000bb0:	4a19      	ldr	r2, [pc, #100]	@ (8000c18 <i2c_transaction+0x18c>)
 8000bb2:	f043 0310 	orr.w	r3, r3, #16
 8000bb6:	61d3      	str	r3, [r2, #28]
					I2C2->CR2 |= I2C_CR2_STOP;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	@ (8000c18 <i2c_transaction+0x18c>)
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	4a16      	ldr	r2, [pc, #88]	@ (8000c18 <i2c_transaction+0x18c>)
 8000bbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bc2:	6053      	str	r3, [r2, #4]
					return 0; // NACK received
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	e020      	b.n	8000c0a <i2c_transaction+0x17e>
			while (!(I2C2->ISR & I2C_ISR_TXIS)) {
 8000bc8:	4b13      	ldr	r3, [pc, #76]	@ (8000c18 <i2c_transaction+0x18c>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f003 0302 	and.w	r3, r3, #2
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d0e5      	beq.n	8000ba0 <i2c_transaction+0x114>
				}
			}

			I2C2->TXDR = data[i];
 8000bd4:	7bbb      	ldrb	r3, [r7, #14]
 8000bd6:	683a      	ldr	r2, [r7, #0]
 8000bd8:	4413      	add	r3, r2
 8000bda:	781a      	ldrb	r2, [r3, #0]
 8000bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8000c18 <i2c_transaction+0x18c>)
 8000bde:	629a      	str	r2, [r3, #40]	@ 0x28
		for (uint8_t i = 0; i < len; i++) {
 8000be0:	7bbb      	ldrb	r3, [r7, #14]
 8000be2:	3301      	adds	r3, #1
 8000be4:	73bb      	strb	r3, [r7, #14]
 8000be6:	7bba      	ldrb	r2, [r7, #14]
 8000be8:	797b      	ldrb	r3, [r7, #5]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d3ec      	bcc.n	8000bc8 <i2c_transaction+0x13c>
		}
		//check if transfer is complete
		while (!(I2C2->ISR & I2C_ISR_TC));
 8000bee:	bf00      	nop
 8000bf0:	4b09      	ldr	r3, [pc, #36]	@ (8000c18 <i2c_transaction+0x18c>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d0f9      	beq.n	8000bf0 <i2c_transaction+0x164>
		I2C2->CR2 |= I2C_CR2_STOP;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <i2c_transaction+0x18c>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	4a05      	ldr	r2, [pc, #20]	@ (8000c18 <i2c_transaction+0x18c>)
 8000c02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c06:	6053      	str	r3, [r2, #4]

		return 1;
 8000c08:	2301      	movs	r3, #1
	}

}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3714      	adds	r7, #20
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	40005800 	.word	0x40005800

08000c1c <leds_init>:

/* Include memory map of our MCU */
#include <stm32l475xx.h>

void leds_init()
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
	// We need to enable clocks for GPIO A and B
  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000c20:	4b4a      	ldr	r3, [pc, #296]	@ (8000d4c <leds_init+0x130>)
 8000c22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c24:	4a49      	ldr	r2, [pc, #292]	@ (8000d4c <leds_init+0x130>)
 8000c26:	f043 0301 	orr.w	r3, r3, #1
 8000c2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000c2c:	4b47      	ldr	r3, [pc, #284]	@ (8000d4c <leds_init+0x130>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c30:	4a46      	ldr	r2, [pc, #280]	@ (8000d4c <leds_init+0x130>)
 8000c32:	f043 0302 	orr.w	r3, r3, #2
 8000c36:	64d3      	str	r3, [r2, #76]	@ 0x4c
	// We need to enable clocks for GPIO A and B
  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000c38:	4b44      	ldr	r3, [pc, #272]	@ (8000d4c <leds_init+0x130>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c3c:	4a43      	ldr	r2, [pc, #268]	@ (8000d4c <leds_init+0x130>)
 8000c3e:	f043 0301 	orr.w	r3, r3, #1
 8000c42:	64d3      	str	r3, [r2, #76]	@ 0x4c
  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000c44:	4b41      	ldr	r3, [pc, #260]	@ (8000d4c <leds_init+0x130>)
 8000c46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c48:	4a40      	ldr	r2, [pc, #256]	@ (8000d4c <leds_init+0x130>)
 8000c4a:	f043 0302 	orr.w	r3, r3, #2
 8000c4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* Configure PA5 as an output by clearing all bits and setting the mode */
  GPIOA->MODER &= ~GPIO_MODER_MODE5;
 8000c50:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c5a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000c5e:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= GPIO_MODER_MODE5_0;
 8000c60:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c6e:	6013      	str	r3, [r2, #0]

  /* Configure the GPIO output as push pull (transistor for high and low) */
  GPIOA->OTYPER &= ~GPIO_OTYPER_OT5;
 8000c70:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c7a:	f023 0320 	bic.w	r3, r3, #32
 8000c7e:	6053      	str	r3, [r2, #4]

  /* Disable the internal pull-up and pull-down resistors */
  GPIOA->PUPDR &= GPIO_PUPDR_PUPD5;
 8000c80:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c8a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000c8e:	60d3      	str	r3, [r2, #12]

  /* Configure the GPIO to use low speed mode */
  GPIOA->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED5_Pos);
 8000c90:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c9a:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000c9e:	6093      	str	r3, [r2, #8]

  /* Turn off the LED */
  GPIOA->ODR &= ~GPIO_ODR_OD5;
 8000ca0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ca4:	695b      	ldr	r3, [r3, #20]
 8000ca6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000caa:	f023 0320 	bic.w	r3, r3, #32
 8000cae:	6153      	str	r3, [r2, #20]

  /* Configure PA14 as an output by clearing all bits and setting the mode */
  GPIOB->MODER &= ~GPIO_MODER_MODE14;
 8000cb0:	4b27      	ldr	r3, [pc, #156]	@ (8000d50 <leds_init+0x134>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a26      	ldr	r2, [pc, #152]	@ (8000d50 <leds_init+0x134>)
 8000cb6:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000cba:	6013      	str	r3, [r2, #0]
  GPIOB->MODER |= GPIO_MODER_MODE14_0;
 8000cbc:	4b24      	ldr	r3, [pc, #144]	@ (8000d50 <leds_init+0x134>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a23      	ldr	r2, [pc, #140]	@ (8000d50 <leds_init+0x134>)
 8000cc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc6:	6013      	str	r3, [r2, #0]

  /* Configure the GPIO output as push pull (transistor for high and low) */
  GPIOB->OTYPER &= ~GPIO_OTYPER_OT14;
 8000cc8:	4b21      	ldr	r3, [pc, #132]	@ (8000d50 <leds_init+0x134>)
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	4a20      	ldr	r2, [pc, #128]	@ (8000d50 <leds_init+0x134>)
 8000cce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000cd2:	6053      	str	r3, [r2, #4]

  /* Disable the internal pull-up and pull-down resistors */
  GPIOB->PUPDR &= GPIO_PUPDR_PUPD14;
 8000cd4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d50 <leds_init+0x134>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8000d50 <leds_init+0x134>)
 8000cda:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000cde:	60d3      	str	r3, [r2, #12]

  /* Configure the GPIO to use low speed mode */
  GPIOB->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED14_Pos);
 8000ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d50 <leds_init+0x134>)
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	4a1a      	ldr	r2, [pc, #104]	@ (8000d50 <leds_init+0x134>)
 8000ce6:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8000cea:	6093      	str	r3, [r2, #8]

  /* Turn off the LED */
  GPIOB->ODR &= ~GPIO_ODR_OD14;
 8000cec:	4b18      	ldr	r3, [pc, #96]	@ (8000d50 <leds_init+0x134>)
 8000cee:	695b      	ldr	r3, [r3, #20]
 8000cf0:	4a17      	ldr	r2, [pc, #92]	@ (8000d50 <leds_init+0x134>)
 8000cf2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000cf6:	6153      	str	r3, [r2, #20]

  /* Configure PA14 as an output by clearing all bits and setting the mode */
  GPIOB->MODER &= ~GPIO_MODER_MODE14;
 8000cf8:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <leds_init+0x134>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a14      	ldr	r2, [pc, #80]	@ (8000d50 <leds_init+0x134>)
 8000cfe:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000d02:	6013      	str	r3, [r2, #0]
  GPIOB->MODER |= GPIO_MODER_MODE14_0;
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <leds_init+0x134>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a11      	ldr	r2, [pc, #68]	@ (8000d50 <leds_init+0x134>)
 8000d0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d0e:	6013      	str	r3, [r2, #0]

  /* Configure the GPIO output as push pull (transistor for high and low) */
  GPIOB->OTYPER &= ~GPIO_OTYPER_OT14;
 8000d10:	4b0f      	ldr	r3, [pc, #60]	@ (8000d50 <leds_init+0x134>)
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	4a0e      	ldr	r2, [pc, #56]	@ (8000d50 <leds_init+0x134>)
 8000d16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000d1a:	6053      	str	r3, [r2, #4]

  /* Disable the internal pull-up and pull-down resistors */
  GPIOB->PUPDR &= GPIO_PUPDR_PUPD14;
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <leds_init+0x134>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	4a0b      	ldr	r2, [pc, #44]	@ (8000d50 <leds_init+0x134>)
 8000d22:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000d26:	60d3      	str	r3, [r2, #12]

  /* Configure the GPIO to use low speed mode */
  GPIOB->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED14_Pos);
 8000d28:	4b09      	ldr	r3, [pc, #36]	@ (8000d50 <leds_init+0x134>)
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	4a08      	ldr	r2, [pc, #32]	@ (8000d50 <leds_init+0x134>)
 8000d2e:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8000d32:	6093      	str	r3, [r2, #8]

  /* Turn off the LED */
  GPIOB->ODR &= ~GPIO_ODR_OD14;
 8000d34:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <leds_init+0x134>)
 8000d36:	695b      	ldr	r3, [r3, #20]
 8000d38:	4a05      	ldr	r2, [pc, #20]	@ (8000d50 <leds_init+0x134>)
 8000d3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000d3e:	6153      	str	r3, [r2, #20]
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	48000400 	.word	0x48000400

08000d54 <write_to_reg>:
#include <i2c.h>
#include <stdio.h>
#include <stdint.h>


uint8_t write_to_reg(uint8_t address, uint8_t subaddress, uint8_t val){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
 8000d5e:	460b      	mov	r3, r1
 8000d60:	71bb      	strb	r3, [r7, #6]
 8000d62:	4613      	mov	r3, r2
 8000d64:	717b      	strb	r3, [r7, #5]
	uint8_t data[2] = {subaddress, val};
 8000d66:	79bb      	ldrb	r3, [r7, #6]
 8000d68:	733b      	strb	r3, [r7, #12]
 8000d6a:	797b      	ldrb	r3, [r7, #5]
 8000d6c:	737b      	strb	r3, [r7, #13]
	return i2c_transaction(address,0, data, 2);
 8000d6e:	f107 020c 	add.w	r2, r7, #12
 8000d72:	79f8      	ldrb	r0, [r7, #7]
 8000d74:	2302      	movs	r3, #2
 8000d76:	2100      	movs	r1, #0
 8000d78:	f7ff fe88 	bl	8000a8c <i2c_transaction>
 8000d7c:	4603      	mov	r3, r0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <read_from_reg>:
uint8_t read_from_reg(uint8_t address, uint8_t *subaddress, uint8_t *val, uint8_t len){
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b084      	sub	sp, #16
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
 8000d90:	461a      	mov	r2, r3
 8000d92:	4603      	mov	r3, r0
 8000d94:	73fb      	strb	r3, [r7, #15]
 8000d96:	4613      	mov	r3, r2
 8000d98:	73bb      	strb	r3, [r7, #14]
	i2c_transaction(address, 0, subaddress, 1);
 8000d9a:	7bf8      	ldrb	r0, [r7, #15]
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	2100      	movs	r1, #0
 8000da2:	f7ff fe73 	bl	8000a8c <i2c_transaction>
	return i2c_transaction(address, 1, val, len);
 8000da6:	7bbb      	ldrb	r3, [r7, #14]
 8000da8:	7bf8      	ldrb	r0, [r7, #15]
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	2101      	movs	r1, #1
 8000dae:	f7ff fe6d 	bl	8000a8c <i2c_transaction>
 8000db2:	4603      	mov	r3, r0
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <lsm6dsl_init>:
void lsm6dsl_init(){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
	uint8_t err;
	/* Enable accelerometer*/
	err = write_to_reg(LSM6DSL_ADDR, CTRL1_XL, ODR_XL);
 8000dc2:	2260      	movs	r2, #96	@ 0x60
 8000dc4:	2110      	movs	r1, #16
 8000dc6:	206a      	movs	r0, #106	@ 0x6a
 8000dc8:	f7ff ffc4 	bl	8000d54 <write_to_reg>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	71fb      	strb	r3, [r7, #7]
	if(err== 0){
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d102      	bne.n	8000ddc <lsm6dsl_init+0x20>
		printf("Error with enabling accelerometer\n");
 8000dd6:	480a      	ldr	r0, [pc, #40]	@ (8000e00 <lsm6dsl_init+0x44>)
 8000dd8:	f002 fe70 	bl	8003abc <puts>
	}
	/*Enable auto-increment on accelerometer for i2c*/
	err = write_to_reg(LSM6DSL_ADDR, CTRL3_C, IF_INC);
 8000ddc:	2204      	movs	r2, #4
 8000dde:	2112      	movs	r1, #18
 8000de0:	206a      	movs	r0, #106	@ 0x6a
 8000de2:	f7ff ffb7 	bl	8000d54 <write_to_reg>
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
	if(err == 0){
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d102      	bne.n	8000df6 <lsm6dsl_init+0x3a>
		printf("Error with auto-increment for accelerometer\n");
 8000df0:	4804      	ldr	r0, [pc, #16]	@ (8000e04 <lsm6dsl_init+0x48>)
 8000df2:	f002 fe63 	bl	8003abc <puts>
	}
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	080040cc 	.word	0x080040cc
 8000e04:	080040f0 	.word	0x080040f0

08000e08 <lsm6dsl_read_xyz>:

void lsm6dsl_read_xyz(int16_t* x, int16_t* y, int16_t* z){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b088      	sub	sp, #32
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
	uint8_t data[6];
	uint8_t reg = OUTX_L_XL;
 8000e14:	2328      	movs	r3, #40	@ 0x28
 8000e16:	75fb      	strb	r3, [r7, #23]
	read_from_reg(LSM6DSL_ADDR, &reg, data, 6);
 8000e18:	f107 0218 	add.w	r2, r7, #24
 8000e1c:	f107 0117 	add.w	r1, r7, #23
 8000e20:	2306      	movs	r3, #6
 8000e22:	206a      	movs	r0, #106	@ 0x6a
 8000e24:	f7ff ffaf 	bl	8000d86 <read_from_reg>
	//Getting value of x
	*x = (int16_t)(data[1] << 8 | data[0]);
 8000e28:	7e7b      	ldrb	r3, [r7, #25]
 8000e2a:	021b      	lsls	r3, r3, #8
 8000e2c:	b21a      	sxth	r2, r3
 8000e2e:	7e3b      	ldrb	r3, [r7, #24]
 8000e30:	b21b      	sxth	r3, r3
 8000e32:	4313      	orrs	r3, r2
 8000e34:	b21a      	sxth	r2, r3
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	801a      	strh	r2, [r3, #0]
	//Getting value of y
	*y = (int16_t)(data[3] << 8 | data[2]);
 8000e3a:	7efb      	ldrb	r3, [r7, #27]
 8000e3c:	021b      	lsls	r3, r3, #8
 8000e3e:	b21a      	sxth	r2, r3
 8000e40:	7ebb      	ldrb	r3, [r7, #26]
 8000e42:	b21b      	sxth	r3, r3
 8000e44:	4313      	orrs	r3, r2
 8000e46:	b21a      	sxth	r2, r3
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	801a      	strh	r2, [r3, #0]
	//Getting value of z
	*z = (int16_t)(data[5] << 8 | data[4]);
 8000e4c:	7f7b      	ldrb	r3, [r7, #29]
 8000e4e:	021b      	lsls	r3, r3, #8
 8000e50:	b21a      	sxth	r2, r3
 8000e52:	7f3b      	ldrb	r3, [r7, #28]
 8000e54:	b21b      	sxth	r3, r3
 8000e56:	4313      	orrs	r3, r2
 8000e58:	b21a      	sxth	r2, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	801a      	strh	r2, [r3, #0]
}
 8000e5e:	bf00      	nop
 8000e60:	3720      	adds	r7, #32
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000e66:	b480      	push	{r7}
 8000e68:	b083      	sub	sp, #12
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e6e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e72:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d013      	beq.n	8000ea6 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000e7e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e82:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000e86:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d00b      	beq.n	8000ea6 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000e8e:	e000      	b.n	8000e92 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000e90:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000e92:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d0f9      	beq.n	8000e90 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000e9c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ea6:	687b      	ldr	r3, [r7, #4]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <update_transmission_data>:

int16_t x, y, z;
int16_t px, py, pz; // Previous accelerometer values

// Concenates minutes the device has been in lost mode to the transmission to be displayed
void update_transmission_data() {
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
    transmission_data[1] = (0x23D5 & 0xFF00) | (min_lost & 0x00FF); // Preserve ID, update minutes lost
 8000eb8:	4b07      	ldr	r3, [pc, #28]	@ (8000ed8 <update_transmission_data+0x24>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	b21b      	sxth	r3, r3
 8000ec0:	f443 530c 	orr.w	r3, r3, #8960	@ 0x2300
 8000ec4:	b21b      	sxth	r3, r3
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	4b04      	ldr	r3, [pc, #16]	@ (8000edc <update_transmission_data+0x28>)
 8000eca:	805a      	strh	r2, [r3, #2]
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	2000033c 	.word	0x2000033c
 8000edc:	20000130 	.word	0x20000130

08000ee0 <cycles_to_minutes>:

int cycles_to_minutes() {
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
    return cycles_still / TIME_LIMIT;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <cycles_to_minutes+0x20>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a06      	ldr	r2, [pc, #24]	@ (8000f04 <cycles_to_minutes+0x24>)
 8000eea:	fb82 1203 	smull	r1, r2, r2, r3
 8000eee:	11d2      	asrs	r2, r2, #7
 8000ef0:	17db      	asrs	r3, r3, #31
 8000ef2:	1ad3      	subs	r3, r2, r3
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000340 	.word	0x20000340
 8000f04:	1b4e81b5 	.word	0x1b4e81b5

08000f08 <update_minutes_lost>:

void update_minutes_lost() {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
    min_lost = cycles_to_minutes();
 8000f0c:	f7ff ffe8 	bl	8000ee0 <cycles_to_minutes>
 8000f10:	4603      	mov	r3, r0
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	4b02      	ldr	r3, [pc, #8]	@ (8000f20 <update_minutes_lost+0x18>)
 8000f16:	701a      	strb	r2, [r3, #0]
    update_transmission_data();
 8000f18:	f7ff ffcc 	bl	8000eb4 <update_transmission_data>
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	2000033c 	.word	0x2000033c

08000f24 <lost_mode>:

// Displaying pattern on LED lights when in lost mode
void lost_mode() {
 8000f24:	b590      	push	{r4, r7, lr}
 8000f26:	b087      	sub	sp, #28
 8000f28:	af02      	add	r7, sp, #8
//    bit_index++;
//    if (bit_index >= 8) {
//        bit_index = 0;
//        data_set_index = (data_set_index + 1) % 2;
//    }
	if(cycles_still/20 % 10 == 0){
 8000f2a:	4b13      	ldr	r3, [pc, #76]	@ (8000f78 <lost_mode+0x54>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a13      	ldr	r2, [pc, #76]	@ (8000f7c <lost_mode+0x58>)
 8000f30:	fb82 1203 	smull	r1, r2, r2, r3
 8000f34:	10d2      	asrs	r2, r2, #3
 8000f36:	17db      	asrs	r3, r3, #31
 8000f38:	1ad1      	subs	r1, r2, r3
 8000f3a:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <lost_mode+0x58>)
 8000f3c:	fb83 2301 	smull	r2, r3, r3, r1
 8000f40:	109a      	asrs	r2, r3, #2
 8000f42:	17cb      	asrs	r3, r1, #31
 8000f44:	1ad2      	subs	r2, r2, r3
 8000f46:	4613      	mov	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	4413      	add	r3, r2
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	1aca      	subs	r2, r1, r3
 8000f50:	2a00      	cmp	r2, #0
 8000f52:	d10c      	bne.n	8000f6e <lost_mode+0x4a>
		unsigned char test_str[] = "You are lost";
 8000f54:	4b0a      	ldr	r3, [pc, #40]	@ (8000f80 <lost_mode+0x5c>)
 8000f56:	463c      	mov	r4, r7
 8000f58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f5a:	c407      	stmia	r4!, {r0, r1, r2}
 8000f5c:	7023      	strb	r3, [r4, #0]
		updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, sizeof(test_str)-1, test_str);
 8000f5e:	463b      	mov	r3, r7
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	230c      	movs	r3, #12
 8000f64:	2200      	movs	r2, #0
 8000f66:	4907      	ldr	r1, [pc, #28]	@ (8000f84 <lost_mode+0x60>)
 8000f68:	4807      	ldr	r0, [pc, #28]	@ (8000f88 <lost_mode+0x64>)
 8000f6a:	f7ff fcbd 	bl	80008e8 <updateCharValue>
	}

}
 8000f6e:	bf00      	nop
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd90      	pop	{r4, r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000340 	.word	0x20000340
 8000f7c:	66666667 	.word	0x66666667
 8000f80:	0800411c 	.word	0x0800411c
 8000f84:	200002cc 	.word	0x200002cc
 8000f88:	200002c4 	.word	0x200002c4

08000f8c <TIM2_IRQHandler>:

void TIM2_IRQHandler() {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) {
 8000f92:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f96:	691b      	ldr	r3, [r3, #16]
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d076      	beq.n	800108e <TIM2_IRQHandler+0x102>
        TIM2->SR &= ~TIM_SR_UIF;
 8000fa0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fa4:	691b      	ldr	r3, [r3, #16]
 8000fa6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000faa:	f023 0301 	bic.w	r3, r3, #1
 8000fae:	6113      	str	r3, [r2, #16]

        lsm6dsl_read_xyz(&x, &y, &z);
 8000fb0:	4a39      	ldr	r2, [pc, #228]	@ (8001098 <TIM2_IRQHandler+0x10c>)
 8000fb2:	493a      	ldr	r1, [pc, #232]	@ (800109c <TIM2_IRQHandler+0x110>)
 8000fb4:	483a      	ldr	r0, [pc, #232]	@ (80010a0 <TIM2_IRQHandler+0x114>)
 8000fb6:	f7ff ff27 	bl	8000e08 <lsm6dsl_read_xyz>

        // Setting variance of x,y,z values
        int vx = (x - px) * (x - px);
 8000fba:	4b39      	ldr	r3, [pc, #228]	@ (80010a0 <TIM2_IRQHandler+0x114>)
 8000fbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b38      	ldr	r3, [pc, #224]	@ (80010a4 <TIM2_IRQHandler+0x118>)
 8000fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	4a35      	ldr	r2, [pc, #212]	@ (80010a0 <TIM2_IRQHandler+0x114>)
 8000fcc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000fd0:	4611      	mov	r1, r2
 8000fd2:	4a34      	ldr	r2, [pc, #208]	@ (80010a4 <TIM2_IRQHandler+0x118>)
 8000fd4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000fd8:	1a8a      	subs	r2, r1, r2
 8000fda:	fb02 f303 	mul.w	r3, r2, r3
 8000fde:	60fb      	str	r3, [r7, #12]
        int vy = (y - py) * (y - py);
 8000fe0:	4b2e      	ldr	r3, [pc, #184]	@ (800109c <TIM2_IRQHandler+0x110>)
 8000fe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	4b2f      	ldr	r3, [pc, #188]	@ (80010a8 <TIM2_IRQHandler+0x11c>)
 8000fea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	4a2a      	ldr	r2, [pc, #168]	@ (800109c <TIM2_IRQHandler+0x110>)
 8000ff2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	4a2b      	ldr	r2, [pc, #172]	@ (80010a8 <TIM2_IRQHandler+0x11c>)
 8000ffa:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ffe:	1a8a      	subs	r2, r1, r2
 8001000:	fb02 f303 	mul.w	r3, r2, r3
 8001004:	60bb      	str	r3, [r7, #8]
        int vz = (z - pz) * (z - pz);
 8001006:	4b24      	ldr	r3, [pc, #144]	@ (8001098 <TIM2_IRQHandler+0x10c>)
 8001008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100c:	461a      	mov	r2, r3
 800100e:	4b27      	ldr	r3, [pc, #156]	@ (80010ac <TIM2_IRQHandler+0x120>)
 8001010:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	4a20      	ldr	r2, [pc, #128]	@ (8001098 <TIM2_IRQHandler+0x10c>)
 8001018:	f9b2 2000 	ldrsh.w	r2, [r2]
 800101c:	4611      	mov	r1, r2
 800101e:	4a23      	ldr	r2, [pc, #140]	@ (80010ac <TIM2_IRQHandler+0x120>)
 8001020:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001024:	1a8a      	subs	r2, r1, r2
 8001026:	fb02 f303 	mul.w	r3, r2, r3
 800102a:	607b      	str	r3, [r7, #4]

        if (vx < THRESHOLD && vy < THRESHOLD && vz < THRESHOLD) {
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4a20      	ldr	r2, [pc, #128]	@ (80010b0 <TIM2_IRQHandler+0x124>)
 8001030:	4293      	cmp	r3, r2
 8001032:	dc17      	bgt.n	8001064 <TIM2_IRQHandler+0xd8>
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	4a1e      	ldr	r2, [pc, #120]	@ (80010b0 <TIM2_IRQHandler+0x124>)
 8001038:	4293      	cmp	r3, r2
 800103a:	dc13      	bgt.n	8001064 <TIM2_IRQHandler+0xd8>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a1c      	ldr	r2, [pc, #112]	@ (80010b0 <TIM2_IRQHandler+0x124>)
 8001040:	4293      	cmp	r3, r2
 8001042:	dc0f      	bgt.n	8001064 <TIM2_IRQHandler+0xd8>
            cycles_still++;
 8001044:	4b1b      	ldr	r3, [pc, #108]	@ (80010b4 <TIM2_IRQHandler+0x128>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	3301      	adds	r3, #1
 800104a:	4a1a      	ldr	r2, [pc, #104]	@ (80010b4 <TIM2_IRQHandler+0x128>)
 800104c:	6013      	str	r3, [r2, #0]
            if (cycles_still > TIME_LIMIT) {
 800104e:	4b19      	ldr	r3, [pc, #100]	@ (80010b4 <TIM2_IRQHandler+0x128>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8001056:	dd0b      	ble.n	8001070 <TIM2_IRQHandler+0xe4>
                lost = true;
 8001058:	4b17      	ldr	r3, [pc, #92]	@ (80010b8 <TIM2_IRQHandler+0x12c>)
 800105a:	2201      	movs	r2, #1
 800105c:	701a      	strb	r2, [r3, #0]
                update_minutes_lost();
 800105e:	f7ff ff53 	bl	8000f08 <update_minutes_lost>
            if (cycles_still > TIME_LIMIT) {
 8001062:	e005      	b.n	8001070 <TIM2_IRQHandler+0xe4>
            }
        } else {
            cycles_still = 0;
 8001064:	4b13      	ldr	r3, [pc, #76]	@ (80010b4 <TIM2_IRQHandler+0x128>)
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
            lost = false;
 800106a:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <TIM2_IRQHandler+0x12c>)
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]
        }

        px = x;
 8001070:	4b0b      	ldr	r3, [pc, #44]	@ (80010a0 <TIM2_IRQHandler+0x114>)
 8001072:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001076:	4b0b      	ldr	r3, [pc, #44]	@ (80010a4 <TIM2_IRQHandler+0x118>)
 8001078:	801a      	strh	r2, [r3, #0]
        py = y;
 800107a:	4b08      	ldr	r3, [pc, #32]	@ (800109c <TIM2_IRQHandler+0x110>)
 800107c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001080:	4b09      	ldr	r3, [pc, #36]	@ (80010a8 <TIM2_IRQHandler+0x11c>)
 8001082:	801a      	strh	r2, [r3, #0]
        pz = z;
 8001084:	4b04      	ldr	r3, [pc, #16]	@ (8001098 <TIM2_IRQHandler+0x10c>)
 8001086:	f9b3 2000 	ldrsh.w	r2, [r3]
 800108a:	4b08      	ldr	r3, [pc, #32]	@ (80010ac <TIM2_IRQHandler+0x120>)
 800108c:	801a      	strh	r2, [r3, #0]
    }
}
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	2000034a 	.word	0x2000034a
 800109c:	20000348 	.word	0x20000348
 80010a0:	20000346 	.word	0x20000346
 80010a4:	2000034c 	.word	0x2000034c
 80010a8:	2000034e 	.word	0x2000034e
 80010ac:	20000350 	.word	0x20000350
 80010b0:	000f423f 	.word	0x000f423f
 80010b4:	20000340 	.word	0x20000340
 80010b8:	20000344 	.word	0x20000344

080010bc <_write>:

// Redefine the libc _write() function so you can use printf in your code
int _write(int file, char *ptr, int len) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
	int i = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len; i++) {
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	e009      	b.n	80010e6 <_write+0x2a>
		ITM_SendChar(*ptr++);
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	1c5a      	adds	r2, r3, #1
 80010d6:	60ba      	str	r2, [r7, #8]
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fec3 	bl	8000e66 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	3301      	adds	r3, #1
 80010e4:	617b      	str	r3, [r7, #20]
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	dbf1      	blt.n	80010d2 <_write+0x16>
	}
	return len;
 80010ee:	687b      	ldr	r3, [r7, #4]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010fe:	f000 fb94 	bl	800182a <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8001102:	f000 f84f 	bl	80011a4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001106:	f000 f8d1 	bl	80012ac <MX_GPIO_Init>
  MX_SPI3_Init();
 800110a:	f000 f891 	bl	8001230 <MX_SPI3_Init>

  //RESET BLE MODULE
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_RESET);
 800110e:	2200      	movs	r2, #0
 8001110:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001114:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001118:	f000 fef4 	bl	8001f04 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800111c:	200a      	movs	r0, #10
 800111e:	f000 fbf9 	bl	8001914 <HAL_Delay>
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_SET);
 8001122:	2201      	movs	r2, #1
 8001124:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001128:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800112c:	f000 feea 	bl	8001f04 <HAL_GPIO_WritePin>

  ble_init();
 8001130:	f7ff f84a 	bl	80001c8 <ble_init>

  HAL_Delay(10);
 8001134:	200a      	movs	r0, #10
 8001136:	f000 fbed 	bl	8001914 <HAL_Delay>

  uint8_t nonDiscoverable = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	71fb      	strb	r3, [r7, #7]
//	  }
//	  // Wait for interrupt, only uncomment if low power is needed
//	  //__WFI();
//  }

  leds_init();
 800113e:	f7ff fd6d 	bl	8000c1c <leds_init>

  i2c_init();
 8001142:	f7ff fc25 	bl	8000990 <i2c_init>
  lsm6dsl_init();
 8001146:	f7ff fe39 	bl	8000dbc <lsm6dsl_init>

  timer_init(TIM2);
 800114a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800114e:	f000 faeb 	bl	8001728 <timer_init>
  timer_set_ms(TIM2, 50);
 8001152:	2132      	movs	r1, #50	@ 0x32
 8001154:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001158:	f000 fb2b 	bl	80017b2 <timer_set_ms>

  timer_init(TIM3);
 800115c:	480e      	ldr	r0, [pc, #56]	@ (8001198 <main+0xa0>)
 800115e:	f000 fae3 	bl	8001728 <timer_init>
  timer_set_ms(TIM3, 10000);
 8001162:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001166:	480c      	ldr	r0, [pc, #48]	@ (8001198 <main+0xa0>)
 8001168:	f000 fb23 	bl	80017b2 <timer_set_ms>

  while (1) {
	  if (lost) {
 800116c:	4b0b      	ldr	r3, [pc, #44]	@ (800119c <main+0xa4>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d002      	beq.n	800117c <main+0x84>
		  lost_mode();
 8001176:	f7ff fed5 	bl	8000f24 <lost_mode>
 800117a:	e001      	b.n	8001180 <main+0x88>
	  }
	  else {
		  catchBLE();
 800117c:	f7ff fa3a 	bl	80005f4 <catchBLE>
	  }
	  for (volatile int i = 0; i< 1000000; i++);
 8001180:	2300      	movs	r3, #0
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	e002      	b.n	800118c <main+0x94>
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	3301      	adds	r3, #1
 800118a:	603b      	str	r3, [r7, #0]
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	4a04      	ldr	r2, [pc, #16]	@ (80011a0 <main+0xa8>)
 8001190:	4293      	cmp	r3, r2
 8001192:	ddf8      	ble.n	8001186 <main+0x8e>
	  if (lost) {
 8001194:	e7ea      	b.n	800116c <main+0x74>
 8001196:	bf00      	nop
 8001198:	40000400 	.word	0x40000400
 800119c:	20000344 	.word	0x20000344
 80011a0:	000f423f 	.word	0x000f423f

080011a4 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @attention This changes the System clock frequency, make sure you reflect that change in your timer
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b096      	sub	sp, #88	@ 0x58
 80011a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	2244      	movs	r2, #68	@ 0x44
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f002 fc8a 	bl	8003acc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b8:	463b      	mov	r3, r7
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011c6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011ca:	f000 fee5 	bl	8001f98 <HAL_PWREx_ControlVoltageScaling>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011d4:	f000 f902 	bl	80013dc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80011d8:	2310      	movs	r3, #16
 80011da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011dc:	2301      	movs	r3, #1
 80011de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	633b      	str	r3, [r7, #48]	@ 0x30
  // This lines changes system clock frequency
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 80011e4:	2370      	movs	r3, #112	@ 0x70
 80011e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	4618      	mov	r0, r3
 80011f2:	f000 ff27 	bl	8002044 <HAL_RCC_OscConfig>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80011fc:	f000 f8ee 	bl	80013dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001200:	230f      	movs	r3, #15
 8001202:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001204:	2300      	movs	r3, #0
 8001206:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001208:	2300      	movs	r3, #0
 800120a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001210:	2300      	movs	r3, #0
 8001212:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001214:	463b      	mov	r3, r7
 8001216:	2100      	movs	r1, #0
 8001218:	4618      	mov	r0, r3
 800121a:	f001 faef 	bl	80027fc <HAL_RCC_ClockConfig>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001224:	f000 f8da 	bl	80013dc <Error_Handler>
  }
}
 8001228:	bf00      	nop
 800122a:	3758      	adds	r7, #88	@ 0x58
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001234:	4b1b      	ldr	r3, [pc, #108]	@ (80012a4 <MX_SPI3_Init+0x74>)
 8001236:	4a1c      	ldr	r2, [pc, #112]	@ (80012a8 <MX_SPI3_Init+0x78>)
 8001238:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800123a:	4b1a      	ldr	r3, [pc, #104]	@ (80012a4 <MX_SPI3_Init+0x74>)
 800123c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001240:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001242:	4b18      	ldr	r3, [pc, #96]	@ (80012a4 <MX_SPI3_Init+0x74>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001248:	4b16      	ldr	r3, [pc, #88]	@ (80012a4 <MX_SPI3_Init+0x74>)
 800124a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800124e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001250:	4b14      	ldr	r3, [pc, #80]	@ (80012a4 <MX_SPI3_Init+0x74>)
 8001252:	2200      	movs	r2, #0
 8001254:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001256:	4b13      	ldr	r3, [pc, #76]	@ (80012a4 <MX_SPI3_Init+0x74>)
 8001258:	2200      	movs	r2, #0
 800125a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800125c:	4b11      	ldr	r3, [pc, #68]	@ (80012a4 <MX_SPI3_Init+0x74>)
 800125e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001262:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001264:	4b0f      	ldr	r3, [pc, #60]	@ (80012a4 <MX_SPI3_Init+0x74>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800126a:	4b0e      	ldr	r3, [pc, #56]	@ (80012a4 <MX_SPI3_Init+0x74>)
 800126c:	2200      	movs	r2, #0
 800126e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001270:	4b0c      	ldr	r3, [pc, #48]	@ (80012a4 <MX_SPI3_Init+0x74>)
 8001272:	2200      	movs	r2, #0
 8001274:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001276:	4b0b      	ldr	r3, [pc, #44]	@ (80012a4 <MX_SPI3_Init+0x74>)
 8001278:	2200      	movs	r2, #0
 800127a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800127c:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <MX_SPI3_Init+0x74>)
 800127e:	2207      	movs	r2, #7
 8001280:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001282:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <MX_SPI3_Init+0x74>)
 8001284:	2200      	movs	r2, #0
 8001286:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001288:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <MX_SPI3_Init+0x74>)
 800128a:	2208      	movs	r2, #8
 800128c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800128e:	4805      	ldr	r0, [pc, #20]	@ (80012a4 <MX_SPI3_Init+0x74>)
 8001290:	f001 fca0 	bl	8002bd4 <HAL_SPI_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800129a:	f000 f89f 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200002d8 	.word	0x200002d8
 80012a8:	40003c00 	.word	0x40003c00

080012ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	@ 0x28
 80012b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012c2:	4b43      	ldr	r3, [pc, #268]	@ (80013d0 <MX_GPIO_Init+0x124>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c6:	4a42      	ldr	r2, [pc, #264]	@ (80013d0 <MX_GPIO_Init+0x124>)
 80012c8:	f043 0310 	orr.w	r3, r3, #16
 80012cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ce:	4b40      	ldr	r3, [pc, #256]	@ (80013d0 <MX_GPIO_Init+0x124>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d2:	f003 0310 	and.w	r3, r3, #16
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	4b3d      	ldr	r3, [pc, #244]	@ (80013d0 <MX_GPIO_Init+0x124>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012de:	4a3c      	ldr	r2, [pc, #240]	@ (80013d0 <MX_GPIO_Init+0x124>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012e6:	4b3a      	ldr	r3, [pc, #232]	@ (80013d0 <MX_GPIO_Init+0x124>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f2:	4b37      	ldr	r3, [pc, #220]	@ (80013d0 <MX_GPIO_Init+0x124>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f6:	4a36      	ldr	r2, [pc, #216]	@ (80013d0 <MX_GPIO_Init+0x124>)
 80012f8:	f043 0302 	orr.w	r3, r3, #2
 80012fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012fe:	4b34      	ldr	r3, [pc, #208]	@ (80013d0 <MX_GPIO_Init+0x124>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800130a:	4b31      	ldr	r3, [pc, #196]	@ (80013d0 <MX_GPIO_Init+0x124>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130e:	4a30      	ldr	r2, [pc, #192]	@ (80013d0 <MX_GPIO_Init+0x124>)
 8001310:	f043 0308 	orr.w	r3, r3, #8
 8001314:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001316:	4b2e      	ldr	r3, [pc, #184]	@ (80013d0 <MX_GPIO_Init+0x124>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001322:	4b2b      	ldr	r3, [pc, #172]	@ (80013d0 <MX_GPIO_Init+0x124>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001326:	4a2a      	ldr	r2, [pc, #168]	@ (80013d0 <MX_GPIO_Init+0x124>)
 8001328:	f043 0304 	orr.w	r3, r3, #4
 800132c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800132e:	4b28      	ldr	r3, [pc, #160]	@ (80013d0 <MX_GPIO_Init+0x124>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001332:	f003 0304 	and.w	r3, r3, #4
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED1_GPIO_Port, GPIO_LED1_Pin, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	2120      	movs	r1, #32
 800133e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001342:	f000 fddf 	bl	8001f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 8001346:	2201      	movs	r2, #1
 8001348:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800134c:	4821      	ldr	r0, [pc, #132]	@ (80013d4 <MX_GPIO_Init+0x128>)
 800134e:	f000 fdd9 	bl	8001f04 <HAL_GPIO_WritePin>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 8001352:	2201      	movs	r2, #1
 8001354:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001358:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800135c:	f000 fdd2 	bl	8001f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 8001360:	2340      	movs	r3, #64	@ 0x40
 8001362:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001364:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001368:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4619      	mov	r1, r3
 8001374:	4818      	ldr	r0, [pc, #96]	@ (80013d8 <MX_GPIO_Init+0x12c>)
 8001376:	f000 fc03 	bl	8001b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin BLE_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|BLE_RESET_Pin;
 800137a:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800137e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001380:	2301      	movs	r3, #1
 8001382:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	4619      	mov	r1, r3
 8001392:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001396:	f000 fbf3 	bl	8001b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_CS_Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin;
 800139a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800139e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a0:	2301      	movs	r3, #1
 80013a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a8:	2303      	movs	r3, #3
 80013aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	4619      	mov	r1, r3
 80013b2:	4808      	ldr	r0, [pc, #32]	@ (80013d4 <MX_GPIO_Init+0x128>)
 80013b4:	f000 fbe4 	bl	8001b80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2100      	movs	r1, #0
 80013bc:	2017      	movs	r0, #23
 80013be:	f000 fba8 	bl	8001b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013c2:	2017      	movs	r0, #23
 80013c4:	f000 fbc1 	bl	8001b4a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013c8:	bf00      	nop
 80013ca:	3728      	adds	r7, #40	@ 0x28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40021000 	.word	0x40021000
 80013d4:	48000c00 	.word	0x48000c00
 80013d8:	48001000 	.word	0x48001000

080013dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e0:	b672      	cpsid	i
}
 80013e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <Error_Handler+0x8>

080013e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ee:	4b0f      	ldr	r3, [pc, #60]	@ (800142c <HAL_MspInit+0x44>)
 80013f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013f2:	4a0e      	ldr	r2, [pc, #56]	@ (800142c <HAL_MspInit+0x44>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80013fa:	4b0c      	ldr	r3, [pc, #48]	@ (800142c <HAL_MspInit+0x44>)
 80013fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001406:	4b09      	ldr	r3, [pc, #36]	@ (800142c <HAL_MspInit+0x44>)
 8001408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800140a:	4a08      	ldr	r2, [pc, #32]	@ (800142c <HAL_MspInit+0x44>)
 800140c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001410:	6593      	str	r3, [r2, #88]	@ 0x58
 8001412:	4b06      	ldr	r3, [pc, #24]	@ (800142c <HAL_MspInit+0x44>)
 8001414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40021000 	.word	0x40021000

08001430 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	@ 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a17      	ldr	r2, [pc, #92]	@ (80014ac <HAL_SPI_MspInit+0x7c>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d128      	bne.n	80014a4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001452:	4b17      	ldr	r3, [pc, #92]	@ (80014b0 <HAL_SPI_MspInit+0x80>)
 8001454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001456:	4a16      	ldr	r2, [pc, #88]	@ (80014b0 <HAL_SPI_MspInit+0x80>)
 8001458:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800145c:	6593      	str	r3, [r2, #88]	@ 0x58
 800145e:	4b14      	ldr	r3, [pc, #80]	@ (80014b0 <HAL_SPI_MspInit+0x80>)
 8001460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001462:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800146a:	4b11      	ldr	r3, [pc, #68]	@ (80014b0 <HAL_SPI_MspInit+0x80>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146e:	4a10      	ldr	r2, [pc, #64]	@ (80014b0 <HAL_SPI_MspInit+0x80>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001476:	4b0e      	ldr	r3, [pc, #56]	@ (80014b0 <HAL_SPI_MspInit+0x80>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001482:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	2302      	movs	r3, #2
 800148a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001490:	2303      	movs	r3, #3
 8001492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001494:	2306      	movs	r3, #6
 8001496:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	4805      	ldr	r0, [pc, #20]	@ (80014b4 <HAL_SPI_MspInit+0x84>)
 80014a0:	f000 fb6e 	bl	8001b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80014a4:	bf00      	nop
 80014a6:	3728      	adds	r7, #40	@ 0x28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40003c00 	.word	0x40003c00
 80014b0:	40021000 	.word	0x40021000
 80014b4:	48000800 	.word	0x48000800

080014b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <NMI_Handler+0x4>

080014c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <HardFault_Handler+0x4>

080014c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <MemManage_Handler+0x4>

080014d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <BusFault_Handler+0x4>

080014d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <UsageFault_Handler+0x4>

080014e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800150e:	f000 f9e1 	bl	80018d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  dataAvailable=1;
 800151c:	4b03      	ldr	r3, [pc, #12]	@ (800152c <EXTI9_5_IRQHandler+0x14>)
 800151e:	2201      	movs	r2, #1
 8001520:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 8001522:	2040      	movs	r0, #64	@ 0x40
 8001524:	f000 fd06 	bl	8001f34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}
 800152c:	200002d4 	.word	0x200002d4

08001530 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	e00a      	b.n	8001558 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001542:	f3af 8000 	nop.w
 8001546:	4601      	mov	r1, r0
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	1c5a      	adds	r2, r3, #1
 800154c:	60ba      	str	r2, [r7, #8]
 800154e:	b2ca      	uxtb	r2, r1
 8001550:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	3301      	adds	r3, #1
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	429a      	cmp	r2, r3
 800155e:	dbf0      	blt.n	8001542 <_read+0x12>
	}

return len;
 8001560:	687b      	ldr	r3, [r7, #4]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001574:	4b11      	ldr	r3, [pc, #68]	@ (80015bc <_sbrk+0x50>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d102      	bne.n	8001582 <_sbrk+0x16>
		heap_end = &end;
 800157c:	4b0f      	ldr	r3, [pc, #60]	@ (80015bc <_sbrk+0x50>)
 800157e:	4a10      	ldr	r2, [pc, #64]	@ (80015c0 <_sbrk+0x54>)
 8001580:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001582:	4b0e      	ldr	r3, [pc, #56]	@ (80015bc <_sbrk+0x50>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001588:	4b0c      	ldr	r3, [pc, #48]	@ (80015bc <_sbrk+0x50>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4413      	add	r3, r2
 8001590:	466a      	mov	r2, sp
 8001592:	4293      	cmp	r3, r2
 8001594:	d907      	bls.n	80015a6 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001596:	f002 fab1 	bl	8003afc <__errno>
 800159a:	4603      	mov	r3, r0
 800159c:	220c      	movs	r2, #12
 800159e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80015a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015a4:	e006      	b.n	80015b4 <_sbrk+0x48>
	}

	heap_end += incr;
 80015a6:	4b05      	ldr	r3, [pc, #20]	@ (80015bc <_sbrk+0x50>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	4a03      	ldr	r2, [pc, #12]	@ (80015bc <_sbrk+0x50>)
 80015b0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80015b2:	68fb      	ldr	r3, [r7, #12]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000354 	.word	0x20000354
 80015c0:	200004a8 	.word	0x200004a8

080015c4 <_close>:

int _close(int file)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
	return -1;
 80015cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015ec:	605a      	str	r2, [r3, #4]
	return 0;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <_isatty>:

int _isatty(int file)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	return 1;
 8001604:	2301      	movs	r3, #1
}
 8001606:	4618      	mov	r0, r3
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001612:	b480      	push	{r7}
 8001614:	b085      	sub	sp, #20
 8001616:	af00      	add	r7, sp, #0
 8001618:	60f8      	str	r0, [r7, #12]
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
	return 0;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001630:	4b17      	ldr	r3, [pc, #92]	@ (8001690 <SystemInit+0x64>)
 8001632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001636:	4a16      	ldr	r2, [pc, #88]	@ (8001690 <SystemInit+0x64>)
 8001638:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800163c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001640:	4b14      	ldr	r3, [pc, #80]	@ (8001694 <SystemInit+0x68>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a13      	ldr	r2, [pc, #76]	@ (8001694 <SystemInit+0x68>)
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800164c:	4b11      	ldr	r3, [pc, #68]	@ (8001694 <SystemInit+0x68>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001652:	4b10      	ldr	r3, [pc, #64]	@ (8001694 <SystemInit+0x68>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a0f      	ldr	r2, [pc, #60]	@ (8001694 <SystemInit+0x68>)
 8001658:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800165c:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001660:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001662:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <SystemInit+0x68>)
 8001664:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001668:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800166a:	4b0a      	ldr	r3, [pc, #40]	@ (8001694 <SystemInit+0x68>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a09      	ldr	r2, [pc, #36]	@ (8001694 <SystemInit+0x68>)
 8001670:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001674:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001676:	4b07      	ldr	r3, [pc, #28]	@ (8001694 <SystemInit+0x68>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800167c:	4b04      	ldr	r3, [pc, #16]	@ (8001690 <SystemInit+0x64>)
 800167e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001682:	609a      	str	r2, [r3, #8]
#endif
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000ed00 	.word	0xe000ed00
 8001694:	40021000 	.word	0x40021000

08001698 <__NVIC_EnableIRQ>:
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	db0b      	blt.n	80016c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	f003 021f 	and.w	r2, r3, #31
 80016b0:	4907      	ldr	r1, [pc, #28]	@ (80016d0 <__NVIC_EnableIRQ+0x38>)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	095b      	lsrs	r3, r3, #5
 80016b8:	2001      	movs	r0, #1
 80016ba:	fa00 f202 	lsl.w	r2, r0, r2
 80016be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000e100 	.word	0xe000e100

080016d4 <__NVIC_SetPriority>:
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	6039      	str	r1, [r7, #0]
 80016de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	db0a      	blt.n	80016fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	490c      	ldr	r1, [pc, #48]	@ (8001720 <__NVIC_SetPriority+0x4c>)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	0112      	lsls	r2, r2, #4
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	440b      	add	r3, r1
 80016f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80016fc:	e00a      	b.n	8001714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	b2da      	uxtb	r2, r3
 8001702:	4908      	ldr	r1, [pc, #32]	@ (8001724 <__NVIC_SetPriority+0x50>)
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	3b04      	subs	r3, #4
 800170c:	0112      	lsls	r2, r2, #4
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	440b      	add	r3, r1
 8001712:	761a      	strb	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000e100 	.word	0xe000e100
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <timer_init>:
 */

#include "timer.h"


void timer_init(TIM_TypeDef *timer) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
    // Enable clock for TIM2
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 8001730:	4b18      	ldr	r3, [pc, #96]	@ (8001794 <timer_init+0x6c>)
 8001732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001734:	4a17      	ldr	r2, [pc, #92]	@ (8001794 <timer_init+0x6c>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	6593      	str	r3, [r2, #88]	@ 0x58

	// Step 1:
    // Reset timer
	timer->CR1 &= ~TIM_CR1_CEN;     // Stop the timer and reset control register
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f023 0201 	bic.w	r2, r3, #1
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	601a      	str	r2, [r3, #0]
    timer->SR = 0;	    			// Reset status register
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	611a      	str	r2, [r3, #16]
    timer->CNT = 0;     			// Reset counter
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	625a      	str	r2, [r3, #36]	@ 0x24

    // Step 2:
    // Set auto-reload to max initially (will be configured in timer_set_ms)
    timer->ARR = 0xFFFFFFFF;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800175a:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Step 3:
    // Enable interrupt for update event
    timer->DIER |= TIM_DIER_UIE;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	f043 0201 	orr.w	r2, r3, #1
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	60da      	str	r2, [r3, #12]

    // Enable TIM2 interrupt in NVIC
    NVIC_EnableIRQ(TIM2_IRQn);
 8001768:	201c      	movs	r0, #28
 800176a:	f7ff ff95 	bl	8001698 <__NVIC_EnableIRQ>
    NVIC_SetPriority(TIM2_IRQn, 1);
 800176e:	2101      	movs	r1, #1
 8001770:	201c      	movs	r0, #28
 8001772:	f7ff ffaf 	bl	80016d4 <__NVIC_SetPriority>

    // Step 4:
    // Prescaler for a 1 kHz clock (4 MHz / 4000)
    timer->PSC = 3999;  // Prescaler is off by 1 because it’s 0-based
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f640 729f 	movw	r2, #3999	@ 0xf9f
 800177c:	629a      	str	r2, [r3, #40]	@ 0x28

    // Step 5:
    // Enable the timer
    timer->CR1 |= TIM_CR1_CEN;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f043 0201 	orr.w	r2, r3, #1
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	601a      	str	r2, [r3, #0]
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000

08001798 <timer_reset>:

void timer_reset(TIM_TypeDef *timer) {
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
    timer->CNT = 0;  // Reset counter to 0
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <timer_set_ms>:

void timer_set_ms(TIM_TypeDef *timer, uint16_t period_ms) {
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
 80017ba:	460b      	mov	r3, r1
 80017bc:	807b      	strh	r3, [r7, #2]

	timer_reset(timer);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff ffea 	bl	8001798 <timer_reset>

    // Set the auto-reload value for the desired period (1 kHz clock, so period = ms)
    timer->ARR = period_ms - 1;
 80017c4:	887b      	ldrh	r3, [r7, #2]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	461a      	mov	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001810 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017dc:	f7ff ff26 	bl	800162c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017e0:	480c      	ldr	r0, [pc, #48]	@ (8001814 <LoopForever+0x6>)
  ldr r1, =_edata
 80017e2:	490d      	ldr	r1, [pc, #52]	@ (8001818 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017e4:	4a0d      	ldr	r2, [pc, #52]	@ (800181c <LoopForever+0xe>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e8:	e002      	b.n	80017f0 <LoopCopyDataInit>

080017ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ee:	3304      	adds	r3, #4

080017f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f4:	d3f9      	bcc.n	80017ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001820 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001824 <LoopForever+0x16>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017fc:	e001      	b.n	8001802 <LoopFillZerobss>

080017fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001800:	3204      	adds	r2, #4

08001802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001804:	d3fb      	bcc.n	80017fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001806:	f002 f97f 	bl	8003b08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800180a:	f7ff fc75 	bl	80010f8 <main>

0800180e <LoopForever>:

LoopForever:
    b LoopForever
 800180e:	e7fe      	b.n	800180e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001810:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001818:	2000019c 	.word	0x2000019c
  ldr r2, =_sidata
 800181c:	08004174 	.word	0x08004174
  ldr r2, =_sbss
 8001820:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 8001824:	200004a8 	.word	0x200004a8

08001828 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001828:	e7fe      	b.n	8001828 <ADC1_2_IRQHandler>

0800182a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001830:	2300      	movs	r3, #0
 8001832:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001834:	2003      	movs	r0, #3
 8001836:	f000 f961 	bl	8001afc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800183a:	2000      	movs	r0, #0
 800183c:	f000 f80e 	bl	800185c <HAL_InitTick>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d002      	beq.n	800184c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	71fb      	strb	r3, [r7, #7]
 800184a:	e001      	b.n	8001850 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800184c:	f7ff fdcc 	bl	80013e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001850:	79fb      	ldrb	r3, [r7, #7]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001864:	2300      	movs	r3, #0
 8001866:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001868:	4b17      	ldr	r3, [pc, #92]	@ (80018c8 <HAL_InitTick+0x6c>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d023      	beq.n	80018b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001870:	4b16      	ldr	r3, [pc, #88]	@ (80018cc <HAL_InitTick+0x70>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b14      	ldr	r3, [pc, #80]	@ (80018c8 <HAL_InitTick+0x6c>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800187e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001882:	fbb2 f3f3 	udiv	r3, r2, r3
 8001886:	4618      	mov	r0, r3
 8001888:	f000 f96d 	bl	8001b66 <HAL_SYSTICK_Config>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10f      	bne.n	80018b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b0f      	cmp	r3, #15
 8001896:	d809      	bhi.n	80018ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001898:	2200      	movs	r2, #0
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018a0:	f000 f937 	bl	8001b12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018a4:	4a0a      	ldr	r2, [pc, #40]	@ (80018d0 <HAL_InitTick+0x74>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	e007      	b.n	80018bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	73fb      	strb	r3, [r7, #15]
 80018b0:	e004      	b.n	80018bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	73fb      	strb	r3, [r7, #15]
 80018b6:	e001      	b.n	80018bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	2000013c 	.word	0x2000013c
 80018cc:	20000134 	.word	0x20000134
 80018d0:	20000138 	.word	0x20000138

080018d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018d8:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <HAL_IncTick+0x20>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	4b06      	ldr	r3, [pc, #24]	@ (80018f8 <HAL_IncTick+0x24>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4413      	add	r3, r2
 80018e4:	4a04      	ldr	r2, [pc, #16]	@ (80018f8 <HAL_IncTick+0x24>)
 80018e6:	6013      	str	r3, [r2, #0]
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	2000013c 	.word	0x2000013c
 80018f8:	20000358 	.word	0x20000358

080018fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001900:	4b03      	ldr	r3, [pc, #12]	@ (8001910 <HAL_GetTick+0x14>)
 8001902:	681b      	ldr	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	20000358 	.word	0x20000358

08001914 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800191c:	f7ff ffee 	bl	80018fc <HAL_GetTick>
 8001920:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800192c:	d005      	beq.n	800193a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800192e:	4b0a      	ldr	r3, [pc, #40]	@ (8001958 <HAL_Delay+0x44>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4413      	add	r3, r2
 8001938:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800193a:	bf00      	nop
 800193c:	f7ff ffde 	bl	80018fc <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	429a      	cmp	r2, r3
 800194a:	d8f7      	bhi.n	800193c <HAL_Delay+0x28>
  {
  }
}
 800194c:	bf00      	nop
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	2000013c 	.word	0x2000013c

0800195c <__NVIC_SetPriorityGrouping>:
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800196c:	4b0c      	ldr	r3, [pc, #48]	@ (80019a0 <__NVIC_SetPriorityGrouping+0x44>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001978:	4013      	ands	r3, r2
 800197a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001984:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001988:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800198c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800198e:	4a04      	ldr	r2, [pc, #16]	@ (80019a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	60d3      	str	r3, [r2, #12]
}
 8001994:	bf00      	nop
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <__NVIC_GetPriorityGrouping>:
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a8:	4b04      	ldr	r3, [pc, #16]	@ (80019bc <__NVIC_GetPriorityGrouping+0x18>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	0a1b      	lsrs	r3, r3, #8
 80019ae:	f003 0307 	and.w	r3, r3, #7
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <__NVIC_EnableIRQ>:
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	db0b      	blt.n	80019ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	f003 021f 	and.w	r2, r3, #31
 80019d8:	4907      	ldr	r1, [pc, #28]	@ (80019f8 <__NVIC_EnableIRQ+0x38>)
 80019da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019de:	095b      	lsrs	r3, r3, #5
 80019e0:	2001      	movs	r0, #1
 80019e2:	fa00 f202 	lsl.w	r2, r0, r2
 80019e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	e000e100 	.word	0xe000e100

080019fc <__NVIC_SetPriority>:
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	6039      	str	r1, [r7, #0]
 8001a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	db0a      	blt.n	8001a26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	490c      	ldr	r1, [pc, #48]	@ (8001a48 <__NVIC_SetPriority+0x4c>)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	0112      	lsls	r2, r2, #4
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	440b      	add	r3, r1
 8001a20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001a24:	e00a      	b.n	8001a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	4908      	ldr	r1, [pc, #32]	@ (8001a4c <__NVIC_SetPriority+0x50>)
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	3b04      	subs	r3, #4
 8001a34:	0112      	lsls	r2, r2, #4
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	440b      	add	r3, r1
 8001a3a:	761a      	strb	r2, [r3, #24]
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000e100 	.word	0xe000e100
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <NVIC_EncodePriority>:
{
 8001a50:	b480      	push	{r7}
 8001a52:	b089      	sub	sp, #36	@ 0x24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f1c3 0307 	rsb	r3, r3, #7
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	bf28      	it	cs
 8001a6e:	2304      	movcs	r3, #4
 8001a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3304      	adds	r3, #4
 8001a76:	2b06      	cmp	r3, #6
 8001a78:	d902      	bls.n	8001a80 <NVIC_EncodePriority+0x30>
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3b03      	subs	r3, #3
 8001a7e:	e000      	b.n	8001a82 <NVIC_EncodePriority+0x32>
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43da      	mvns	r2, r3
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	401a      	ands	r2, r3
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a98:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa2:	43d9      	mvns	r1, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa8:	4313      	orrs	r3, r2
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3724      	adds	r7, #36	@ 0x24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
	...

08001ab8 <SysTick_Config>:
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ac8:	d301      	bcc.n	8001ace <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001aca:	2301      	movs	r3, #1
 8001acc:	e00f      	b.n	8001aee <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ace:	4a0a      	ldr	r2, [pc, #40]	@ (8001af8 <SysTick_Config+0x40>)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ad6:	210f      	movs	r1, #15
 8001ad8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001adc:	f7ff ff8e 	bl	80019fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae0:	4b05      	ldr	r3, [pc, #20]	@ (8001af8 <SysTick_Config+0x40>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ae6:	4b04      	ldr	r3, [pc, #16]	@ (8001af8 <SysTick_Config+0x40>)
 8001ae8:	2207      	movs	r2, #7
 8001aea:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	e000e010 	.word	0xe000e010

08001afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff ff29 	bl	800195c <__NVIC_SetPriorityGrouping>
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b086      	sub	sp, #24
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	4603      	mov	r3, r0
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
 8001b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b24:	f7ff ff3e 	bl	80019a4 <__NVIC_GetPriorityGrouping>
 8001b28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	68b9      	ldr	r1, [r7, #8]
 8001b2e:	6978      	ldr	r0, [r7, #20]
 8001b30:	f7ff ff8e 	bl	8001a50 <NVIC_EncodePriority>
 8001b34:	4602      	mov	r2, r0
 8001b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b3a:	4611      	mov	r1, r2
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff5d 	bl	80019fc <__NVIC_SetPriority>
}
 8001b42:	bf00      	nop
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	4603      	mov	r3, r0
 8001b52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff ff31 	bl	80019c0 <__NVIC_EnableIRQ>
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff ffa2 	bl	8001ab8 <SysTick_Config>
 8001b74:	4603      	mov	r3, r0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b087      	sub	sp, #28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b8e:	e17f      	b.n	8001e90 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	2101      	movs	r1, #1
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 8171 	beq.w	8001e8a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d005      	beq.n	8001bc0 <HAL_GPIO_Init+0x40>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d130      	bne.n	8001c22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	2203      	movs	r2, #3
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	68da      	ldr	r2, [r3, #12]
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4013      	ands	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	091b      	lsrs	r3, r3, #4
 8001c0c:	f003 0201 	and.w	r2, r3, #1
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d118      	bne.n	8001c60 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c34:	2201      	movs	r2, #1
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4013      	ands	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	08db      	lsrs	r3, r3, #3
 8001c4a:	f003 0201 	and.w	r2, r3, #1
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	d017      	beq.n	8001c9c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	2203      	movs	r2, #3
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 0303 	and.w	r3, r3, #3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d123      	bne.n	8001cf0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	08da      	lsrs	r2, r3, #3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3208      	adds	r2, #8
 8001cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	220f      	movs	r2, #15
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	691a      	ldr	r2, [r3, #16]
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	08da      	lsrs	r2, r3, #3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	3208      	adds	r2, #8
 8001cea:	6939      	ldr	r1, [r7, #16]
 8001cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4013      	ands	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 0203 	and.w	r2, r3, #3
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 80ac 	beq.w	8001e8a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d32:	4b5f      	ldr	r3, [pc, #380]	@ (8001eb0 <HAL_GPIO_Init+0x330>)
 8001d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d36:	4a5e      	ldr	r2, [pc, #376]	@ (8001eb0 <HAL_GPIO_Init+0x330>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d3e:	4b5c      	ldr	r3, [pc, #368]	@ (8001eb0 <HAL_GPIO_Init+0x330>)
 8001d40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d4a:	4a5a      	ldr	r2, [pc, #360]	@ (8001eb4 <HAL_GPIO_Init+0x334>)
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	089b      	lsrs	r3, r3, #2
 8001d50:	3302      	adds	r3, #2
 8001d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d56:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	220f      	movs	r2, #15
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d74:	d025      	beq.n	8001dc2 <HAL_GPIO_Init+0x242>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a4f      	ldr	r2, [pc, #316]	@ (8001eb8 <HAL_GPIO_Init+0x338>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d01f      	beq.n	8001dbe <HAL_GPIO_Init+0x23e>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a4e      	ldr	r2, [pc, #312]	@ (8001ebc <HAL_GPIO_Init+0x33c>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d019      	beq.n	8001dba <HAL_GPIO_Init+0x23a>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a4d      	ldr	r2, [pc, #308]	@ (8001ec0 <HAL_GPIO_Init+0x340>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d013      	beq.n	8001db6 <HAL_GPIO_Init+0x236>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a4c      	ldr	r2, [pc, #304]	@ (8001ec4 <HAL_GPIO_Init+0x344>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d00d      	beq.n	8001db2 <HAL_GPIO_Init+0x232>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a4b      	ldr	r2, [pc, #300]	@ (8001ec8 <HAL_GPIO_Init+0x348>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d007      	beq.n	8001dae <HAL_GPIO_Init+0x22e>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a4a      	ldr	r2, [pc, #296]	@ (8001ecc <HAL_GPIO_Init+0x34c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d101      	bne.n	8001daa <HAL_GPIO_Init+0x22a>
 8001da6:	2306      	movs	r3, #6
 8001da8:	e00c      	b.n	8001dc4 <HAL_GPIO_Init+0x244>
 8001daa:	2307      	movs	r3, #7
 8001dac:	e00a      	b.n	8001dc4 <HAL_GPIO_Init+0x244>
 8001dae:	2305      	movs	r3, #5
 8001db0:	e008      	b.n	8001dc4 <HAL_GPIO_Init+0x244>
 8001db2:	2304      	movs	r3, #4
 8001db4:	e006      	b.n	8001dc4 <HAL_GPIO_Init+0x244>
 8001db6:	2303      	movs	r3, #3
 8001db8:	e004      	b.n	8001dc4 <HAL_GPIO_Init+0x244>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e002      	b.n	8001dc4 <HAL_GPIO_Init+0x244>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <HAL_GPIO_Init+0x244>
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	f002 0203 	and.w	r2, r2, #3
 8001dca:	0092      	lsls	r2, r2, #2
 8001dcc:	4093      	lsls	r3, r2
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dd4:	4937      	ldr	r1, [pc, #220]	@ (8001eb4 <HAL_GPIO_Init+0x334>)
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	089b      	lsrs	r3, r3, #2
 8001dda:	3302      	adds	r3, #2
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001de2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ed0 <HAL_GPIO_Init+0x350>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	43db      	mvns	r3, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e06:	4a32      	ldr	r2, [pc, #200]	@ (8001ed0 <HAL_GPIO_Init+0x350>)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e0c:	4b30      	ldr	r3, [pc, #192]	@ (8001ed0 <HAL_GPIO_Init+0x350>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e30:	4a27      	ldr	r2, [pc, #156]	@ (8001ed0 <HAL_GPIO_Init+0x350>)
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e36:	4b26      	ldr	r3, [pc, #152]	@ (8001ed0 <HAL_GPIO_Init+0x350>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4013      	ands	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e5a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ed0 <HAL_GPIO_Init+0x350>)
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e60:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed0 <HAL_GPIO_Init+0x350>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e84:	4a12      	ldr	r2, [pc, #72]	@ (8001ed0 <HAL_GPIO_Init+0x350>)
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f47f ae78 	bne.w	8001b90 <HAL_GPIO_Init+0x10>
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	bf00      	nop
 8001ea4:	371c      	adds	r7, #28
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40010000 	.word	0x40010000
 8001eb8:	48000400 	.word	0x48000400
 8001ebc:	48000800 	.word	0x48000800
 8001ec0:	48000c00 	.word	0x48000c00
 8001ec4:	48001000 	.word	0x48001000
 8001ec8:	48001400 	.word	0x48001400
 8001ecc:	48001800 	.word	0x48001800
 8001ed0:	40010400 	.word	0x40010400

08001ed4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	887b      	ldrh	r3, [r7, #2]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d002      	beq.n	8001ef2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001eec:	2301      	movs	r3, #1
 8001eee:	73fb      	strb	r3, [r7, #15]
 8001ef0:	e001      	b.n	8001ef6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	807b      	strh	r3, [r7, #2]
 8001f10:	4613      	mov	r3, r2
 8001f12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f14:	787b      	ldrb	r3, [r7, #1]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f1a:	887a      	ldrh	r2, [r7, #2]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f20:	e002      	b.n	8001f28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f22:	887a      	ldrh	r2, [r7, #2]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f3e:	4b08      	ldr	r3, [pc, #32]	@ (8001f60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f40:	695a      	ldr	r2, [r3, #20]
 8001f42:	88fb      	ldrh	r3, [r7, #6]
 8001f44:	4013      	ands	r3, r2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d006      	beq.n	8001f58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f4a:	4a05      	ldr	r2, [pc, #20]	@ (8001f60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f4c:	88fb      	ldrh	r3, [r7, #6]
 8001f4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f50:	88fb      	ldrh	r3, [r7, #6]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 f806 	bl	8001f64 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f58:	bf00      	nop
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40010400 	.word	0x40010400

08001f64 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f80:	4b04      	ldr	r3, [pc, #16]	@ (8001f94 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40007000 	.word	0x40007000

08001f98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fa6:	d130      	bne.n	800200a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fa8:	4b23      	ldr	r3, [pc, #140]	@ (8002038 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fb4:	d038      	beq.n	8002028 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fb6:	4b20      	ldr	r3, [pc, #128]	@ (8002038 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fbe:	4a1e      	ldr	r2, [pc, #120]	@ (8002038 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fc0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fc4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	@ (800203c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2232      	movs	r2, #50	@ 0x32
 8001fcc:	fb02 f303 	mul.w	r3, r2, r3
 8001fd0:	4a1b      	ldr	r2, [pc, #108]	@ (8002040 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd6:	0c9b      	lsrs	r3, r3, #18
 8001fd8:	3301      	adds	r3, #1
 8001fda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fdc:	e002      	b.n	8001fe4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fe4:	4b14      	ldr	r3, [pc, #80]	@ (8002038 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ff0:	d102      	bne.n	8001ff8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1f2      	bne.n	8001fde <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8002038 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002000:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002004:	d110      	bne.n	8002028 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e00f      	b.n	800202a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800200a:	4b0b      	ldr	r3, [pc, #44]	@ (8002038 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002012:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002016:	d007      	beq.n	8002028 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002018:	4b07      	ldr	r3, [pc, #28]	@ (8002038 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002020:	4a05      	ldr	r2, [pc, #20]	@ (8002038 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002022:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002026:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40007000 	.word	0x40007000
 800203c:	20000134 	.word	0x20000134
 8002040:	431bde83 	.word	0x431bde83

08002044 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e3ca      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002056:	4b97      	ldr	r3, [pc, #604]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 030c 	and.w	r3, r3, #12
 800205e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002060:	4b94      	ldr	r3, [pc, #592]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f003 0303 	and.w	r3, r3, #3
 8002068:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0310 	and.w	r3, r3, #16
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 80e4 	beq.w	8002240 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d007      	beq.n	800208e <HAL_RCC_OscConfig+0x4a>
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	2b0c      	cmp	r3, #12
 8002082:	f040 808b 	bne.w	800219c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	2b01      	cmp	r3, #1
 800208a:	f040 8087 	bne.w	800219c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800208e:	4b89      	ldr	r3, [pc, #548]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d005      	beq.n	80020a6 <HAL_RCC_OscConfig+0x62>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e3a2      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a1a      	ldr	r2, [r3, #32]
 80020aa:	4b82      	ldr	r3, [pc, #520]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d004      	beq.n	80020c0 <HAL_RCC_OscConfig+0x7c>
 80020b6:	4b7f      	ldr	r3, [pc, #508]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020be:	e005      	b.n	80020cc <HAL_RCC_OscConfig+0x88>
 80020c0:	4b7c      	ldr	r3, [pc, #496]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 80020c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020c6:	091b      	lsrs	r3, r3, #4
 80020c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d223      	bcs.n	8002118 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f000 fd1d 	bl	8002b14 <RCC_SetFlashLatencyFromMSIRange>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e383      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020e4:	4b73      	ldr	r3, [pc, #460]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a72      	ldr	r2, [pc, #456]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 80020ea:	f043 0308 	orr.w	r3, r3, #8
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	4b70      	ldr	r3, [pc, #448]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	496d      	ldr	r1, [pc, #436]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002102:	4b6c      	ldr	r3, [pc, #432]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	021b      	lsls	r3, r3, #8
 8002110:	4968      	ldr	r1, [pc, #416]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 8002112:	4313      	orrs	r3, r2
 8002114:	604b      	str	r3, [r1, #4]
 8002116:	e025      	b.n	8002164 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002118:	4b66      	ldr	r3, [pc, #408]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a65      	ldr	r2, [pc, #404]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 800211e:	f043 0308 	orr.w	r3, r3, #8
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	4b63      	ldr	r3, [pc, #396]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	4960      	ldr	r1, [pc, #384]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 8002132:	4313      	orrs	r3, r2
 8002134:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002136:	4b5f      	ldr	r3, [pc, #380]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	021b      	lsls	r3, r3, #8
 8002144:	495b      	ldr	r1, [pc, #364]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 8002146:	4313      	orrs	r3, r2
 8002148:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d109      	bne.n	8002164 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	4618      	mov	r0, r3
 8002156:	f000 fcdd 	bl	8002b14 <RCC_SetFlashLatencyFromMSIRange>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e343      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002164:	f000 fc4a 	bl	80029fc <HAL_RCC_GetSysClockFreq>
 8002168:	4602      	mov	r2, r0
 800216a:	4b52      	ldr	r3, [pc, #328]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	091b      	lsrs	r3, r3, #4
 8002170:	f003 030f 	and.w	r3, r3, #15
 8002174:	4950      	ldr	r1, [pc, #320]	@ (80022b8 <HAL_RCC_OscConfig+0x274>)
 8002176:	5ccb      	ldrb	r3, [r1, r3]
 8002178:	f003 031f 	and.w	r3, r3, #31
 800217c:	fa22 f303 	lsr.w	r3, r2, r3
 8002180:	4a4e      	ldr	r2, [pc, #312]	@ (80022bc <HAL_RCC_OscConfig+0x278>)
 8002182:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002184:	4b4e      	ldr	r3, [pc, #312]	@ (80022c0 <HAL_RCC_OscConfig+0x27c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff fb67 	bl	800185c <HAL_InitTick>
 800218e:	4603      	mov	r3, r0
 8002190:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002192:	7bfb      	ldrb	r3, [r7, #15]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d052      	beq.n	800223e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002198:	7bfb      	ldrb	r3, [r7, #15]
 800219a:	e327      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d032      	beq.n	800220a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021a4:	4b43      	ldr	r3, [pc, #268]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a42      	ldr	r2, [pc, #264]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021b0:	f7ff fba4 	bl	80018fc <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021b8:	f7ff fba0 	bl	80018fc <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e310      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021ca:	4b3a      	ldr	r3, [pc, #232]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021d6:	4b37      	ldr	r3, [pc, #220]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a36      	ldr	r2, [pc, #216]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 80021dc:	f043 0308 	orr.w	r3, r3, #8
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	4b34      	ldr	r3, [pc, #208]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	4931      	ldr	r1, [pc, #196]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021f4:	4b2f      	ldr	r3, [pc, #188]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	021b      	lsls	r3, r3, #8
 8002202:	492c      	ldr	r1, [pc, #176]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 8002204:	4313      	orrs	r3, r2
 8002206:	604b      	str	r3, [r1, #4]
 8002208:	e01a      	b.n	8002240 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800220a:	4b2a      	ldr	r3, [pc, #168]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a29      	ldr	r2, [pc, #164]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 8002210:	f023 0301 	bic.w	r3, r3, #1
 8002214:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002216:	f7ff fb71 	bl	80018fc <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800221e:	f7ff fb6d 	bl	80018fc <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e2dd      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002230:	4b20      	ldr	r3, [pc, #128]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1f0      	bne.n	800221e <HAL_RCC_OscConfig+0x1da>
 800223c:	e000      	b.n	8002240 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800223e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b00      	cmp	r3, #0
 800224a:	d074      	beq.n	8002336 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	2b08      	cmp	r3, #8
 8002250:	d005      	beq.n	800225e <HAL_RCC_OscConfig+0x21a>
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	2b0c      	cmp	r3, #12
 8002256:	d10e      	bne.n	8002276 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	2b03      	cmp	r3, #3
 800225c:	d10b      	bne.n	8002276 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800225e:	4b15      	ldr	r3, [pc, #84]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d064      	beq.n	8002334 <HAL_RCC_OscConfig+0x2f0>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d160      	bne.n	8002334 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e2ba      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800227e:	d106      	bne.n	800228e <HAL_RCC_OscConfig+0x24a>
 8002280:	4b0c      	ldr	r3, [pc, #48]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a0b      	ldr	r2, [pc, #44]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 8002286:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	e026      	b.n	80022dc <HAL_RCC_OscConfig+0x298>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002296:	d115      	bne.n	80022c4 <HAL_RCC_OscConfig+0x280>
 8002298:	4b06      	ldr	r3, [pc, #24]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a05      	ldr	r2, [pc, #20]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 800229e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	4b03      	ldr	r3, [pc, #12]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a02      	ldr	r2, [pc, #8]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 80022aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ae:	6013      	str	r3, [r2, #0]
 80022b0:	e014      	b.n	80022dc <HAL_RCC_OscConfig+0x298>
 80022b2:	bf00      	nop
 80022b4:	40021000 	.word	0x40021000
 80022b8:	0800412c 	.word	0x0800412c
 80022bc:	20000134 	.word	0x20000134
 80022c0:	20000138 	.word	0x20000138
 80022c4:	4ba0      	ldr	r3, [pc, #640]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a9f      	ldr	r2, [pc, #636]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 80022ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	4b9d      	ldr	r3, [pc, #628]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a9c      	ldr	r2, [pc, #624]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 80022d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d013      	beq.n	800230c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e4:	f7ff fb0a 	bl	80018fc <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022ec:	f7ff fb06 	bl	80018fc <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b64      	cmp	r3, #100	@ 0x64
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e276      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022fe:	4b92      	ldr	r3, [pc, #584]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f0      	beq.n	80022ec <HAL_RCC_OscConfig+0x2a8>
 800230a:	e014      	b.n	8002336 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230c:	f7ff faf6 	bl	80018fc <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002314:	f7ff faf2 	bl	80018fc <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b64      	cmp	r3, #100	@ 0x64
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e262      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002326:	4b88      	ldr	r3, [pc, #544]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0x2d0>
 8002332:	e000      	b.n	8002336 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d060      	beq.n	8002404 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	2b04      	cmp	r3, #4
 8002346:	d005      	beq.n	8002354 <HAL_RCC_OscConfig+0x310>
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	2b0c      	cmp	r3, #12
 800234c:	d119      	bne.n	8002382 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	2b02      	cmp	r3, #2
 8002352:	d116      	bne.n	8002382 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002354:	4b7c      	ldr	r3, [pc, #496]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800235c:	2b00      	cmp	r3, #0
 800235e:	d005      	beq.n	800236c <HAL_RCC_OscConfig+0x328>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e23f      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236c:	4b76      	ldr	r3, [pc, #472]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	061b      	lsls	r3, r3, #24
 800237a:	4973      	ldr	r1, [pc, #460]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 800237c:	4313      	orrs	r3, r2
 800237e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002380:	e040      	b.n	8002404 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d023      	beq.n	80023d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800238a:	4b6f      	ldr	r3, [pc, #444]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a6e      	ldr	r2, [pc, #440]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 8002390:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002394:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002396:	f7ff fab1 	bl	80018fc <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239e:	f7ff faad 	bl	80018fc <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e21d      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b0:	4b65      	ldr	r3, [pc, #404]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0f0      	beq.n	800239e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023bc:	4b62      	ldr	r3, [pc, #392]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	061b      	lsls	r3, r3, #24
 80023ca:	495f      	ldr	r1, [pc, #380]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]
 80023d0:	e018      	b.n	8002404 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023d2:	4b5d      	ldr	r3, [pc, #372]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a5c      	ldr	r2, [pc, #368]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 80023d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023de:	f7ff fa8d 	bl	80018fc <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e6:	f7ff fa89 	bl	80018fc <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e1f9      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023f8:	4b53      	ldr	r3, [pc, #332]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1f0      	bne.n	80023e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0308 	and.w	r3, r3, #8
 800240c:	2b00      	cmp	r3, #0
 800240e:	d03c      	beq.n	800248a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d01c      	beq.n	8002452 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002418:	4b4b      	ldr	r3, [pc, #300]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 800241a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800241e:	4a4a      	ldr	r2, [pc, #296]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002428:	f7ff fa68 	bl	80018fc <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002430:	f7ff fa64 	bl	80018fc <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e1d4      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002442:	4b41      	ldr	r3, [pc, #260]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 8002444:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0ef      	beq.n	8002430 <HAL_RCC_OscConfig+0x3ec>
 8002450:	e01b      	b.n	800248a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002452:	4b3d      	ldr	r3, [pc, #244]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 8002454:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002458:	4a3b      	ldr	r2, [pc, #236]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 800245a:	f023 0301 	bic.w	r3, r3, #1
 800245e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002462:	f7ff fa4b 	bl	80018fc <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800246a:	f7ff fa47 	bl	80018fc <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e1b7      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800247c:	4b32      	ldr	r3, [pc, #200]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 800247e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1ef      	bne.n	800246a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0304 	and.w	r3, r3, #4
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 80a6 	beq.w	80025e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002498:	2300      	movs	r3, #0
 800249a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800249c:	4b2a      	ldr	r3, [pc, #168]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 800249e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10d      	bne.n	80024c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a8:	4b27      	ldr	r3, [pc, #156]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 80024aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ac:	4a26      	ldr	r2, [pc, #152]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 80024ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80024b4:	4b24      	ldr	r3, [pc, #144]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 80024b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024bc:	60bb      	str	r3, [r7, #8]
 80024be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024c0:	2301      	movs	r3, #1
 80024c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c4:	4b21      	ldr	r3, [pc, #132]	@ (800254c <HAL_RCC_OscConfig+0x508>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d118      	bne.n	8002502 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024d0:	4b1e      	ldr	r3, [pc, #120]	@ (800254c <HAL_RCC_OscConfig+0x508>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a1d      	ldr	r2, [pc, #116]	@ (800254c <HAL_RCC_OscConfig+0x508>)
 80024d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024dc:	f7ff fa0e 	bl	80018fc <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e4:	f7ff fa0a 	bl	80018fc <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e17a      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024f6:	4b15      	ldr	r3, [pc, #84]	@ (800254c <HAL_RCC_OscConfig+0x508>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f0      	beq.n	80024e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d108      	bne.n	800251c <HAL_RCC_OscConfig+0x4d8>
 800250a:	4b0f      	ldr	r3, [pc, #60]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 800250c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002510:	4a0d      	ldr	r2, [pc, #52]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800251a:	e029      	b.n	8002570 <HAL_RCC_OscConfig+0x52c>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2b05      	cmp	r3, #5
 8002522:	d115      	bne.n	8002550 <HAL_RCC_OscConfig+0x50c>
 8002524:	4b08      	ldr	r3, [pc, #32]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 8002526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800252a:	4a07      	ldr	r2, [pc, #28]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 800252c:	f043 0304 	orr.w	r3, r3, #4
 8002530:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002534:	4b04      	ldr	r3, [pc, #16]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 8002536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800253a:	4a03      	ldr	r2, [pc, #12]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002544:	e014      	b.n	8002570 <HAL_RCC_OscConfig+0x52c>
 8002546:	bf00      	nop
 8002548:	40021000 	.word	0x40021000
 800254c:	40007000 	.word	0x40007000
 8002550:	4b9c      	ldr	r3, [pc, #624]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 8002552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002556:	4a9b      	ldr	r2, [pc, #620]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 8002558:	f023 0301 	bic.w	r3, r3, #1
 800255c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002560:	4b98      	ldr	r3, [pc, #608]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 8002562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002566:	4a97      	ldr	r2, [pc, #604]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 8002568:	f023 0304 	bic.w	r3, r3, #4
 800256c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d016      	beq.n	80025a6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002578:	f7ff f9c0 	bl	80018fc <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800257e:	e00a      	b.n	8002596 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002580:	f7ff f9bc 	bl	80018fc <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800258e:	4293      	cmp	r3, r2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e12a      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002596:	4b8b      	ldr	r3, [pc, #556]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 8002598:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0ed      	beq.n	8002580 <HAL_RCC_OscConfig+0x53c>
 80025a4:	e015      	b.n	80025d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a6:	f7ff f9a9 	bl	80018fc <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025ac:	e00a      	b.n	80025c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ae:	f7ff f9a5 	bl	80018fc <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025bc:	4293      	cmp	r3, r2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e113      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025c4:	4b7f      	ldr	r3, [pc, #508]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 80025c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1ed      	bne.n	80025ae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025d2:	7ffb      	ldrb	r3, [r7, #31]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d105      	bne.n	80025e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d8:	4b7a      	ldr	r3, [pc, #488]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 80025da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025dc:	4a79      	ldr	r2, [pc, #484]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 80025de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025e2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80fe 	beq.w	80027ea <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	f040 80d0 	bne.w	8002798 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80025f8:	4b72      	ldr	r3, [pc, #456]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f003 0203 	and.w	r2, r3, #3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002608:	429a      	cmp	r2, r3
 800260a:	d130      	bne.n	800266e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002616:	3b01      	subs	r3, #1
 8002618:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800261a:	429a      	cmp	r2, r3
 800261c:	d127      	bne.n	800266e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002628:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800262a:	429a      	cmp	r2, r3
 800262c:	d11f      	bne.n	800266e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002638:	2a07      	cmp	r2, #7
 800263a:	bf14      	ite	ne
 800263c:	2201      	movne	r2, #1
 800263e:	2200      	moveq	r2, #0
 8002640:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002642:	4293      	cmp	r3, r2
 8002644:	d113      	bne.n	800266e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002650:	085b      	lsrs	r3, r3, #1
 8002652:	3b01      	subs	r3, #1
 8002654:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002656:	429a      	cmp	r2, r3
 8002658:	d109      	bne.n	800266e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002664:	085b      	lsrs	r3, r3, #1
 8002666:	3b01      	subs	r3, #1
 8002668:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800266a:	429a      	cmp	r2, r3
 800266c:	d06e      	beq.n	800274c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	2b0c      	cmp	r3, #12
 8002672:	d069      	beq.n	8002748 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002674:	4b53      	ldr	r3, [pc, #332]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d105      	bne.n	800268c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002680:	4b50      	ldr	r3, [pc, #320]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e0ad      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002690:	4b4c      	ldr	r3, [pc, #304]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a4b      	ldr	r2, [pc, #300]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 8002696:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800269a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800269c:	f7ff f92e 	bl	80018fc <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a4:	f7ff f92a 	bl	80018fc <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e09a      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026b6:	4b43      	ldr	r3, [pc, #268]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f0      	bne.n	80026a4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026c2:	4b40      	ldr	r3, [pc, #256]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	4b40      	ldr	r3, [pc, #256]	@ (80027c8 <HAL_RCC_OscConfig+0x784>)
 80026c8:	4013      	ands	r3, r2
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80026d2:	3a01      	subs	r2, #1
 80026d4:	0112      	lsls	r2, r2, #4
 80026d6:	4311      	orrs	r1, r2
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80026dc:	0212      	lsls	r2, r2, #8
 80026de:	4311      	orrs	r1, r2
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80026e4:	0852      	lsrs	r2, r2, #1
 80026e6:	3a01      	subs	r2, #1
 80026e8:	0552      	lsls	r2, r2, #21
 80026ea:	4311      	orrs	r1, r2
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80026f0:	0852      	lsrs	r2, r2, #1
 80026f2:	3a01      	subs	r2, #1
 80026f4:	0652      	lsls	r2, r2, #25
 80026f6:	4311      	orrs	r1, r2
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80026fc:	0912      	lsrs	r2, r2, #4
 80026fe:	0452      	lsls	r2, r2, #17
 8002700:	430a      	orrs	r2, r1
 8002702:	4930      	ldr	r1, [pc, #192]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 8002704:	4313      	orrs	r3, r2
 8002706:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002708:	4b2e      	ldr	r3, [pc, #184]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a2d      	ldr	r2, [pc, #180]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 800270e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002712:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002714:	4b2b      	ldr	r3, [pc, #172]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4a2a      	ldr	r2, [pc, #168]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 800271a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800271e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002720:	f7ff f8ec 	bl	80018fc <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002728:	f7ff f8e8 	bl	80018fc <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e058      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800273a:	4b22      	ldr	r3, [pc, #136]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0f0      	beq.n	8002728 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002746:	e050      	b.n	80027ea <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e04f      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800274c:	4b1d      	ldr	r3, [pc, #116]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d148      	bne.n	80027ea <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002758:	4b1a      	ldr	r3, [pc, #104]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a19      	ldr	r2, [pc, #100]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 800275e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002762:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002764:	4b17      	ldr	r3, [pc, #92]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	4a16      	ldr	r2, [pc, #88]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 800276a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800276e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002770:	f7ff f8c4 	bl	80018fc <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002778:	f7ff f8c0 	bl	80018fc <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e030      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800278a:	4b0e      	ldr	r3, [pc, #56]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f0      	beq.n	8002778 <HAL_RCC_OscConfig+0x734>
 8002796:	e028      	b.n	80027ea <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	2b0c      	cmp	r3, #12
 800279c:	d023      	beq.n	80027e6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800279e:	4b09      	ldr	r3, [pc, #36]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a08      	ldr	r2, [pc, #32]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 80027a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027aa:	f7ff f8a7 	bl	80018fc <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027b0:	e00c      	b.n	80027cc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b2:	f7ff f8a3 	bl	80018fc <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d905      	bls.n	80027cc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e013      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
 80027c4:	40021000 	.word	0x40021000
 80027c8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027cc:	4b09      	ldr	r3, [pc, #36]	@ (80027f4 <HAL_RCC_OscConfig+0x7b0>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1ec      	bne.n	80027b2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80027d8:	4b06      	ldr	r3, [pc, #24]	@ (80027f4 <HAL_RCC_OscConfig+0x7b0>)
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	4905      	ldr	r1, [pc, #20]	@ (80027f4 <HAL_RCC_OscConfig+0x7b0>)
 80027de:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <HAL_RCC_OscConfig+0x7b4>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	60cb      	str	r3, [r1, #12]
 80027e4:	e001      	b.n	80027ea <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e000      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3720      	adds	r7, #32
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40021000 	.word	0x40021000
 80027f8:	feeefffc 	.word	0xfeeefffc

080027fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e0e7      	b.n	80029e0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002810:	4b75      	ldr	r3, [pc, #468]	@ (80029e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d910      	bls.n	8002840 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281e:	4b72      	ldr	r3, [pc, #456]	@ (80029e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f023 0207 	bic.w	r2, r3, #7
 8002826:	4970      	ldr	r1, [pc, #448]	@ (80029e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	4313      	orrs	r3, r2
 800282c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800282e:	4b6e      	ldr	r3, [pc, #440]	@ (80029e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d001      	beq.n	8002840 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e0cf      	b.n	80029e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d010      	beq.n	800286e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	4b66      	ldr	r3, [pc, #408]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002858:	429a      	cmp	r2, r3
 800285a:	d908      	bls.n	800286e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800285c:	4b63      	ldr	r3, [pc, #396]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	4960      	ldr	r1, [pc, #384]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 800286a:	4313      	orrs	r3, r2
 800286c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d04c      	beq.n	8002914 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b03      	cmp	r3, #3
 8002880:	d107      	bne.n	8002892 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002882:	4b5a      	ldr	r3, [pc, #360]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d121      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e0a6      	b.n	80029e0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d107      	bne.n	80028aa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800289a:	4b54      	ldr	r3, [pc, #336]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d115      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e09a      	b.n	80029e0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d107      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028b2:	4b4e      	ldr	r3, [pc, #312]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d109      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e08e      	b.n	80029e0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028c2:	4b4a      	ldr	r3, [pc, #296]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e086      	b.n	80029e0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028d2:	4b46      	ldr	r3, [pc, #280]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f023 0203 	bic.w	r2, r3, #3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	4943      	ldr	r1, [pc, #268]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028e4:	f7ff f80a 	bl	80018fc <HAL_GetTick>
 80028e8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ea:	e00a      	b.n	8002902 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ec:	f7ff f806 	bl	80018fc <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e06e      	b.n	80029e0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002902:	4b3a      	ldr	r3, [pc, #232]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 020c 	and.w	r2, r3, #12
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	429a      	cmp	r2, r3
 8002912:	d1eb      	bne.n	80028ec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d010      	beq.n	8002942 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	4b31      	ldr	r3, [pc, #196]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800292c:	429a      	cmp	r2, r3
 800292e:	d208      	bcs.n	8002942 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002930:	4b2e      	ldr	r3, [pc, #184]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	492b      	ldr	r1, [pc, #172]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 800293e:	4313      	orrs	r3, r2
 8002940:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002942:	4b29      	ldr	r3, [pc, #164]	@ (80029e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	429a      	cmp	r2, r3
 800294e:	d210      	bcs.n	8002972 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002950:	4b25      	ldr	r3, [pc, #148]	@ (80029e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f023 0207 	bic.w	r2, r3, #7
 8002958:	4923      	ldr	r1, [pc, #140]	@ (80029e8 <HAL_RCC_ClockConfig+0x1ec>)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	4313      	orrs	r3, r2
 800295e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002960:	4b21      	ldr	r3, [pc, #132]	@ (80029e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	429a      	cmp	r2, r3
 800296c:	d001      	beq.n	8002972 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e036      	b.n	80029e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b00      	cmp	r3, #0
 800297c:	d008      	beq.n	8002990 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800297e:	4b1b      	ldr	r3, [pc, #108]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	4918      	ldr	r1, [pc, #96]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 800298c:	4313      	orrs	r3, r2
 800298e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0308 	and.w	r3, r3, #8
 8002998:	2b00      	cmp	r3, #0
 800299a:	d009      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800299c:	4b13      	ldr	r3, [pc, #76]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	4910      	ldr	r1, [pc, #64]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029b0:	f000 f824 	bl	80029fc <HAL_RCC_GetSysClockFreq>
 80029b4:	4602      	mov	r2, r0
 80029b6:	4b0d      	ldr	r3, [pc, #52]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	091b      	lsrs	r3, r3, #4
 80029bc:	f003 030f 	and.w	r3, r3, #15
 80029c0:	490b      	ldr	r1, [pc, #44]	@ (80029f0 <HAL_RCC_ClockConfig+0x1f4>)
 80029c2:	5ccb      	ldrb	r3, [r1, r3]
 80029c4:	f003 031f 	and.w	r3, r3, #31
 80029c8:	fa22 f303 	lsr.w	r3, r2, r3
 80029cc:	4a09      	ldr	r2, [pc, #36]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f8>)
 80029ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80029d0:	4b09      	ldr	r3, [pc, #36]	@ (80029f8 <HAL_RCC_ClockConfig+0x1fc>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fe ff41 	bl	800185c <HAL_InitTick>
 80029da:	4603      	mov	r3, r0
 80029dc:	72fb      	strb	r3, [r7, #11]

  return status;
 80029de:	7afb      	ldrb	r3, [r7, #11]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40022000 	.word	0x40022000
 80029ec:	40021000 	.word	0x40021000
 80029f0:	0800412c 	.word	0x0800412c
 80029f4:	20000134 	.word	0x20000134
 80029f8:	20000138 	.word	0x20000138

080029fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b089      	sub	sp, #36	@ 0x24
 8002a00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	61fb      	str	r3, [r7, #28]
 8002a06:	2300      	movs	r3, #0
 8002a08:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a0a:	4b3e      	ldr	r3, [pc, #248]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
 8002a12:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a14:	4b3b      	ldr	r3, [pc, #236]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f003 0303 	and.w	r3, r3, #3
 8002a1c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_RCC_GetSysClockFreq+0x34>
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	2b0c      	cmp	r3, #12
 8002a28:	d121      	bne.n	8002a6e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d11e      	bne.n	8002a6e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a30:	4b34      	ldr	r3, [pc, #208]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d107      	bne.n	8002a4c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a3c:	4b31      	ldr	r3, [pc, #196]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a42:	0a1b      	lsrs	r3, r3, #8
 8002a44:	f003 030f 	and.w	r3, r3, #15
 8002a48:	61fb      	str	r3, [r7, #28]
 8002a4a:	e005      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a4c:	4b2d      	ldr	r3, [pc, #180]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	091b      	lsrs	r3, r3, #4
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a58:	4a2b      	ldr	r2, [pc, #172]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a60:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10d      	bne.n	8002a84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a6c:	e00a      	b.n	8002a84 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	2b04      	cmp	r3, #4
 8002a72:	d102      	bne.n	8002a7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a74:	4b25      	ldr	r3, [pc, #148]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x110>)
 8002a76:	61bb      	str	r3, [r7, #24]
 8002a78:	e004      	b.n	8002a84 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d101      	bne.n	8002a84 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a80:	4b23      	ldr	r3, [pc, #140]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a82:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	2b0c      	cmp	r3, #12
 8002a88:	d134      	bne.n	8002af4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d003      	beq.n	8002aa2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d003      	beq.n	8002aa8 <HAL_RCC_GetSysClockFreq+0xac>
 8002aa0:	e005      	b.n	8002aae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x110>)
 8002aa4:	617b      	str	r3, [r7, #20]
      break;
 8002aa6:	e005      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002aa8:	4b19      	ldr	r3, [pc, #100]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0x114>)
 8002aaa:	617b      	str	r3, [r7, #20]
      break;
 8002aac:	e002      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	617b      	str	r3, [r7, #20]
      break;
 8002ab2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ab4:	4b13      	ldr	r3, [pc, #76]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	091b      	lsrs	r3, r3, #4
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	3301      	adds	r3, #1
 8002ac0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ac2:	4b10      	ldr	r3, [pc, #64]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	0a1b      	lsrs	r3, r3, #8
 8002ac8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	fb03 f202 	mul.w	r2, r3, r2
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ada:	4b0a      	ldr	r3, [pc, #40]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	0e5b      	lsrs	r3, r3, #25
 8002ae0:	f003 0303 	and.w	r3, r3, #3
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002af4:	69bb      	ldr	r3, [r7, #24]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3724      	adds	r7, #36	@ 0x24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40021000 	.word	0x40021000
 8002b08:	0800413c 	.word	0x0800413c
 8002b0c:	00f42400 	.word	0x00f42400
 8002b10:	007a1200 	.word	0x007a1200

08002b14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b20:	4b2a      	ldr	r3, [pc, #168]	@ (8002bcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b2c:	f7ff fa26 	bl	8001f7c <HAL_PWREx_GetVoltageRange>
 8002b30:	6178      	str	r0, [r7, #20]
 8002b32:	e014      	b.n	8002b5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b34:	4b25      	ldr	r3, [pc, #148]	@ (8002bcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b38:	4a24      	ldr	r2, [pc, #144]	@ (8002bcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b40:	4b22      	ldr	r3, [pc, #136]	@ (8002bcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b4c:	f7ff fa16 	bl	8001f7c <HAL_PWREx_GetVoltageRange>
 8002b50:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b52:	4b1e      	ldr	r3, [pc, #120]	@ (8002bcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b56:	4a1d      	ldr	r2, [pc, #116]	@ (8002bcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b5c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b64:	d10b      	bne.n	8002b7e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b80      	cmp	r3, #128	@ 0x80
 8002b6a:	d919      	bls.n	8002ba0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002b70:	d902      	bls.n	8002b78 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b72:	2302      	movs	r3, #2
 8002b74:	613b      	str	r3, [r7, #16]
 8002b76:	e013      	b.n	8002ba0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b78:	2301      	movs	r3, #1
 8002b7a:	613b      	str	r3, [r7, #16]
 8002b7c:	e010      	b.n	8002ba0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b80      	cmp	r3, #128	@ 0x80
 8002b82:	d902      	bls.n	8002b8a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b84:	2303      	movs	r3, #3
 8002b86:	613b      	str	r3, [r7, #16]
 8002b88:	e00a      	b.n	8002ba0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b80      	cmp	r3, #128	@ 0x80
 8002b8e:	d102      	bne.n	8002b96 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b90:	2302      	movs	r3, #2
 8002b92:	613b      	str	r3, [r7, #16]
 8002b94:	e004      	b.n	8002ba0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b70      	cmp	r3, #112	@ 0x70
 8002b9a:	d101      	bne.n	8002ba0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f023 0207 	bic.w	r2, r3, #7
 8002ba8:	4909      	ldr	r1, [pc, #36]	@ (8002bd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002bb0:	4b07      	ldr	r3, [pc, #28]	@ (8002bd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d001      	beq.n	8002bc2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3718      	adds	r7, #24
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	40022000 	.word	0x40022000

08002bd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e095      	b.n	8002d12 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d108      	bne.n	8002c00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bf6:	d009      	beq.n	8002c0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	61da      	str	r2, [r3, #28]
 8002bfe:	e005      	b.n	8002c0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d106      	bne.n	8002c2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7fe fc02 	bl	8001430 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2202      	movs	r2, #2
 8002c30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c4c:	d902      	bls.n	8002c54 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	e002      	b.n	8002c5a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c58:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002c62:	d007      	beq.n	8002c74 <HAL_SPI_Init+0xa0>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c6c:	d002      	beq.n	8002c74 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002c84:	431a      	orrs	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002cac:	431a      	orrs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cb6:	ea42 0103 	orr.w	r1, r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cbe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	0c1b      	lsrs	r3, r3, #16
 8002cd0:	f003 0204 	and.w	r2, r3, #4
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd8:	f003 0310 	and.w	r3, r3, #16
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002cf0:	ea42 0103 	orr.w	r1, r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b088      	sub	sp, #32
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	60f8      	str	r0, [r7, #12]
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	603b      	str	r3, [r7, #0]
 8002d26:	4613      	mov	r3, r2
 8002d28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d101      	bne.n	8002d3c <HAL_SPI_Transmit+0x22>
 8002d38:	2302      	movs	r3, #2
 8002d3a:	e15f      	b.n	8002ffc <HAL_SPI_Transmit+0x2e2>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d44:	f7fe fdda 	bl	80018fc <HAL_GetTick>
 8002d48:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d4a:	88fb      	ldrh	r3, [r7, #6]
 8002d4c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d002      	beq.n	8002d60 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d5e:	e148      	b.n	8002ff2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d002      	beq.n	8002d6c <HAL_SPI_Transmit+0x52>
 8002d66:	88fb      	ldrh	r3, [r7, #6]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d102      	bne.n	8002d72 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d70:	e13f      	b.n	8002ff2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2203      	movs	r2, #3
 8002d76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	88fa      	ldrh	r2, [r7, #6]
 8002d8a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	88fa      	ldrh	r2, [r7, #6]
 8002d90:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002dbc:	d10f      	bne.n	8002dde <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dcc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ddc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002de8:	2b40      	cmp	r3, #64	@ 0x40
 8002dea:	d007      	beq.n	8002dfc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002dfa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e04:	d94f      	bls.n	8002ea6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d002      	beq.n	8002e14 <HAL_SPI_Transmit+0xfa>
 8002e0e:	8afb      	ldrh	r3, [r7, #22]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d142      	bne.n	8002e9a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e18:	881a      	ldrh	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e24:	1c9a      	adds	r2, r3, #2
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e38:	e02f      	b.n	8002e9a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d112      	bne.n	8002e6e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e4c:	881a      	ldrh	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e58:	1c9a      	adds	r2, r3, #2
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e6c:	e015      	b.n	8002e9a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e6e:	f7fe fd45 	bl	80018fc <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d803      	bhi.n	8002e86 <HAL_SPI_Transmit+0x16c>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e84:	d102      	bne.n	8002e8c <HAL_SPI_Transmit+0x172>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d106      	bne.n	8002e9a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002e98:	e0ab      	b.n	8002ff2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1ca      	bne.n	8002e3a <HAL_SPI_Transmit+0x120>
 8002ea4:	e080      	b.n	8002fa8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d002      	beq.n	8002eb4 <HAL_SPI_Transmit+0x19a>
 8002eae:	8afb      	ldrh	r3, [r7, #22]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d174      	bne.n	8002f9e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d912      	bls.n	8002ee4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec2:	881a      	ldrh	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ece:	1c9a      	adds	r2, r3, #2
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	3b02      	subs	r3, #2
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ee2:	e05c      	b.n	8002f9e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	330c      	adds	r3, #12
 8002eee:	7812      	ldrb	r2, [r2, #0]
 8002ef0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002f0a:	e048      	b.n	8002f9e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d12b      	bne.n	8002f72 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d912      	bls.n	8002f4a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f28:	881a      	ldrh	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f34:	1c9a      	adds	r2, r3, #2
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	3b02      	subs	r3, #2
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f48:	e029      	b.n	8002f9e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	330c      	adds	r3, #12
 8002f54:	7812      	ldrb	r2, [r2, #0]
 8002f56:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f70:	e015      	b.n	8002f9e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f72:	f7fe fcc3 	bl	80018fc <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d803      	bhi.n	8002f8a <HAL_SPI_Transmit+0x270>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f88:	d102      	bne.n	8002f90 <HAL_SPI_Transmit+0x276>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d106      	bne.n	8002f9e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002f9c:	e029      	b.n	8002ff2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1b1      	bne.n	8002f0c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	6839      	ldr	r1, [r7, #0]
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 fb69 	bl	8003684 <SPI_EndRxTxTransaction>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10a      	bne.n	8002fdc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	613b      	str	r3, [r7, #16]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d002      	beq.n	8002fea <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	77fb      	strb	r3, [r7, #31]
 8002fe8:	e003      	b.n	8002ff2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002ffa:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3720      	adds	r7, #32
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08a      	sub	sp, #40	@ 0x28
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
 8003010:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003012:	2301      	movs	r3, #1
 8003014:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003016:	2300      	movs	r3, #0
 8003018:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003022:	2b01      	cmp	r3, #1
 8003024:	d101      	bne.n	800302a <HAL_SPI_TransmitReceive+0x26>
 8003026:	2302      	movs	r3, #2
 8003028:	e20a      	b.n	8003440 <HAL_SPI_TransmitReceive+0x43c>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003032:	f7fe fc63 	bl	80018fc <HAL_GetTick>
 8003036:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800303e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003046:	887b      	ldrh	r3, [r7, #2]
 8003048:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800304a:	887b      	ldrh	r3, [r7, #2]
 800304c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800304e:	7efb      	ldrb	r3, [r7, #27]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d00e      	beq.n	8003072 <HAL_SPI_TransmitReceive+0x6e>
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800305a:	d106      	bne.n	800306a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d102      	bne.n	800306a <HAL_SPI_TransmitReceive+0x66>
 8003064:	7efb      	ldrb	r3, [r7, #27]
 8003066:	2b04      	cmp	r3, #4
 8003068:	d003      	beq.n	8003072 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800306a:	2302      	movs	r3, #2
 800306c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003070:	e1e0      	b.n	8003434 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d005      	beq.n	8003084 <HAL_SPI_TransmitReceive+0x80>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <HAL_SPI_TransmitReceive+0x80>
 800307e:	887b      	ldrh	r3, [r7, #2]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d103      	bne.n	800308c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800308a:	e1d3      	b.n	8003434 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b04      	cmp	r3, #4
 8003096:	d003      	beq.n	80030a0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2205      	movs	r2, #5
 800309c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	887a      	ldrh	r2, [r7, #2]
 80030b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	887a      	ldrh	r2, [r7, #2]
 80030b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	887a      	ldrh	r2, [r7, #2]
 80030c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	887a      	ldrh	r2, [r7, #2]
 80030cc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80030e2:	d802      	bhi.n	80030ea <HAL_SPI_TransmitReceive+0xe6>
 80030e4:	8a3b      	ldrh	r3, [r7, #16]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d908      	bls.n	80030fc <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80030f8:	605a      	str	r2, [r3, #4]
 80030fa:	e007      	b.n	800310c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800310a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003116:	2b40      	cmp	r3, #64	@ 0x40
 8003118:	d007      	beq.n	800312a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003128:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003132:	f240 8081 	bls.w	8003238 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d002      	beq.n	8003144 <HAL_SPI_TransmitReceive+0x140>
 800313e:	8a7b      	ldrh	r3, [r7, #18]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d16d      	bne.n	8003220 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003148:	881a      	ldrh	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003154:	1c9a      	adds	r2, r3, #2
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800315e:	b29b      	uxth	r3, r3
 8003160:	3b01      	subs	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003168:	e05a      	b.n	8003220 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b02      	cmp	r3, #2
 8003176:	d11b      	bne.n	80031b0 <HAL_SPI_TransmitReceive+0x1ac>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800317c:	b29b      	uxth	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d016      	beq.n	80031b0 <HAL_SPI_TransmitReceive+0x1ac>
 8003182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003184:	2b01      	cmp	r3, #1
 8003186:	d113      	bne.n	80031b0 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800318c:	881a      	ldrh	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003198:	1c9a      	adds	r2, r3, #2
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d11c      	bne.n	80031f8 <HAL_SPI_TransmitReceive+0x1f4>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d016      	beq.n	80031f8 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68da      	ldr	r2, [r3, #12]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d4:	b292      	uxth	r2, r2
 80031d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031dc:	1c9a      	adds	r2, r3, #2
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031f4:	2301      	movs	r3, #1
 80031f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80031f8:	f7fe fb80 	bl	80018fc <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003204:	429a      	cmp	r2, r3
 8003206:	d80b      	bhi.n	8003220 <HAL_SPI_TransmitReceive+0x21c>
 8003208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800320a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800320e:	d007      	beq.n	8003220 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800321e:	e109      	b.n	8003434 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003224:	b29b      	uxth	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d19f      	bne.n	800316a <HAL_SPI_TransmitReceive+0x166>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003230:	b29b      	uxth	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d199      	bne.n	800316a <HAL_SPI_TransmitReceive+0x166>
 8003236:	e0e3      	b.n	8003400 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_SPI_TransmitReceive+0x244>
 8003240:	8a7b      	ldrh	r3, [r7, #18]
 8003242:	2b01      	cmp	r3, #1
 8003244:	f040 80cf 	bne.w	80033e6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800324c:	b29b      	uxth	r3, r3
 800324e:	2b01      	cmp	r3, #1
 8003250:	d912      	bls.n	8003278 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003256:	881a      	ldrh	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003262:	1c9a      	adds	r2, r3, #2
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800326c:	b29b      	uxth	r3, r3
 800326e:	3b02      	subs	r3, #2
 8003270:	b29a      	uxth	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003276:	e0b6      	b.n	80033e6 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	330c      	adds	r3, #12
 8003282:	7812      	ldrb	r2, [r2, #0]
 8003284:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800328a:	1c5a      	adds	r2, r3, #1
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003294:	b29b      	uxth	r3, r3
 8003296:	3b01      	subs	r3, #1
 8003298:	b29a      	uxth	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800329e:	e0a2      	b.n	80033e6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d134      	bne.n	8003318 <HAL_SPI_TransmitReceive+0x314>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d02f      	beq.n	8003318 <HAL_SPI_TransmitReceive+0x314>
 80032b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d12c      	bne.n	8003318 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d912      	bls.n	80032ee <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032cc:	881a      	ldrh	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d8:	1c9a      	adds	r2, r3, #2
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	3b02      	subs	r3, #2
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80032ec:	e012      	b.n	8003314 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	330c      	adds	r3, #12
 80032f8:	7812      	ldrb	r2, [r2, #0]
 80032fa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003300:	1c5a      	adds	r2, r3, #1
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800330a:	b29b      	uxth	r3, r3
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003314:	2300      	movs	r3, #0
 8003316:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b01      	cmp	r3, #1
 8003324:	d148      	bne.n	80033b8 <HAL_SPI_TransmitReceive+0x3b4>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800332c:	b29b      	uxth	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d042      	beq.n	80033b8 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003338:	b29b      	uxth	r3, r3
 800333a:	2b01      	cmp	r3, #1
 800333c:	d923      	bls.n	8003386 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003348:	b292      	uxth	r2, r2
 800334a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003350:	1c9a      	adds	r2, r3, #2
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800335c:	b29b      	uxth	r3, r3
 800335e:	3b02      	subs	r3, #2
 8003360:	b29a      	uxth	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800336e:	b29b      	uxth	r3, r3
 8003370:	2b01      	cmp	r3, #1
 8003372:	d81f      	bhi.n	80033b4 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003382:	605a      	str	r2, [r3, #4]
 8003384:	e016      	b.n	80033b4 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f103 020c 	add.w	r2, r3, #12
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003392:	7812      	ldrb	r2, [r2, #0]
 8003394:	b2d2      	uxtb	r2, r2
 8003396:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339c:	1c5a      	adds	r2, r3, #1
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033b4:	2301      	movs	r3, #1
 80033b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80033b8:	f7fe faa0 	bl	80018fc <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d803      	bhi.n	80033d0 <HAL_SPI_TransmitReceive+0x3cc>
 80033c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033ce:	d102      	bne.n	80033d6 <HAL_SPI_TransmitReceive+0x3d2>
 80033d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d107      	bne.n	80033e6 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80033e4:	e026      	b.n	8003434 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f47f af57 	bne.w	80032a0 <HAL_SPI_TransmitReceive+0x29c>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f47f af50 	bne.w	80032a0 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003400:	69fa      	ldr	r2, [r7, #28]
 8003402:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 f93d 	bl	8003684 <SPI_EndRxTxTransaction>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d005      	beq.n	800341c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2220      	movs	r2, #32
 800341a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800342a:	e003      	b.n	8003434 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800343c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003440:	4618      	mov	r0, r3
 8003442:	3728      	adds	r7, #40	@ 0x28
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b088      	sub	sp, #32
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	603b      	str	r3, [r7, #0]
 8003454:	4613      	mov	r3, r2
 8003456:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003458:	f7fe fa50 	bl	80018fc <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003460:	1a9b      	subs	r3, r3, r2
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	4413      	add	r3, r2
 8003466:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003468:	f7fe fa48 	bl	80018fc <HAL_GetTick>
 800346c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800346e:	4b39      	ldr	r3, [pc, #228]	@ (8003554 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	015b      	lsls	r3, r3, #5
 8003474:	0d1b      	lsrs	r3, r3, #20
 8003476:	69fa      	ldr	r2, [r7, #28]
 8003478:	fb02 f303 	mul.w	r3, r2, r3
 800347c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800347e:	e054      	b.n	800352a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003486:	d050      	beq.n	800352a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003488:	f7fe fa38 	bl	80018fc <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	69fa      	ldr	r2, [r7, #28]
 8003494:	429a      	cmp	r2, r3
 8003496:	d902      	bls.n	800349e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d13d      	bne.n	800351a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80034ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034b6:	d111      	bne.n	80034dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034c0:	d004      	beq.n	80034cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ca:	d107      	bne.n	80034dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034e4:	d10f      	bne.n	8003506 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003504:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e017      	b.n	800354a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003520:	2300      	movs	r3, #0
 8003522:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	3b01      	subs	r3, #1
 8003528:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	4013      	ands	r3, r2
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	429a      	cmp	r2, r3
 8003538:	bf0c      	ite	eq
 800353a:	2301      	moveq	r3, #1
 800353c:	2300      	movne	r3, #0
 800353e:	b2db      	uxtb	r3, r3
 8003540:	461a      	mov	r2, r3
 8003542:	79fb      	ldrb	r3, [r7, #7]
 8003544:	429a      	cmp	r2, r3
 8003546:	d19b      	bne.n	8003480 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3720      	adds	r7, #32
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	20000134 	.word	0x20000134

08003558 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b08a      	sub	sp, #40	@ 0x28
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
 8003564:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003566:	2300      	movs	r3, #0
 8003568:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800356a:	f7fe f9c7 	bl	80018fc <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	4413      	add	r3, r2
 8003578:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800357a:	f7fe f9bf 	bl	80018fc <HAL_GetTick>
 800357e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	330c      	adds	r3, #12
 8003586:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003588:	4b3d      	ldr	r3, [pc, #244]	@ (8003680 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	4613      	mov	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	00da      	lsls	r2, r3, #3
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	0d1b      	lsrs	r3, r3, #20
 8003598:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800359a:	fb02 f303 	mul.w	r3, r2, r3
 800359e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80035a0:	e060      	b.n	8003664 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80035a8:	d107      	bne.n	80035ba <SPI_WaitFifoStateUntilTimeout+0x62>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d104      	bne.n	80035ba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80035b8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035c0:	d050      	beq.n	8003664 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035c2:	f7fe f99b 	bl	80018fc <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d902      	bls.n	80035d8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80035d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d13d      	bne.n	8003654 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80035e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035f0:	d111      	bne.n	8003616 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035fa:	d004      	beq.n	8003606 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003604:	d107      	bne.n	8003616 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003614:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800361a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800361e:	d10f      	bne.n	8003640 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800363e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e010      	b.n	8003676 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800365a:	2300      	movs	r3, #0
 800365c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	3b01      	subs	r3, #1
 8003662:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	4013      	ands	r3, r2
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	429a      	cmp	r2, r3
 8003672:	d196      	bne.n	80035a2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3728      	adds	r7, #40	@ 0x28
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	20000134 	.word	0x20000134

08003684 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af02      	add	r7, sp, #8
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2200      	movs	r2, #0
 8003698:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f7ff ff5b 	bl	8003558 <SPI_WaitFifoStateUntilTimeout>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d007      	beq.n	80036b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ac:	f043 0220 	orr.w	r2, r3, #32
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e027      	b.n	8003708 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	9300      	str	r3, [sp, #0]
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2200      	movs	r2, #0
 80036c0:	2180      	movs	r1, #128	@ 0x80
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f7ff fec0 	bl	8003448 <SPI_WaitFlagStateUntilTimeout>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d007      	beq.n	80036de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036d2:	f043 0220 	orr.w	r2, r3, #32
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e014      	b.n	8003708 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f7ff ff34 	bl	8003558 <SPI_WaitFifoStateUntilTimeout>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d007      	beq.n	8003706 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036fa:	f043 0220 	orr.w	r2, r3, #32
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e000      	b.n	8003708 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <malloc>:
 8003710:	4b02      	ldr	r3, [pc, #8]	@ (800371c <malloc+0xc>)
 8003712:	4601      	mov	r1, r0
 8003714:	6818      	ldr	r0, [r3, #0]
 8003716:	f000 b82d 	b.w	8003774 <_malloc_r>
 800371a:	bf00      	nop
 800371c:	2000014c 	.word	0x2000014c

08003720 <free>:
 8003720:	4b02      	ldr	r3, [pc, #8]	@ (800372c <free+0xc>)
 8003722:	4601      	mov	r1, r0
 8003724:	6818      	ldr	r0, [r3, #0]
 8003726:	f000 ba25 	b.w	8003b74 <_free_r>
 800372a:	bf00      	nop
 800372c:	2000014c 	.word	0x2000014c

08003730 <sbrk_aligned>:
 8003730:	b570      	push	{r4, r5, r6, lr}
 8003732:	4e0f      	ldr	r6, [pc, #60]	@ (8003770 <sbrk_aligned+0x40>)
 8003734:	460c      	mov	r4, r1
 8003736:	6831      	ldr	r1, [r6, #0]
 8003738:	4605      	mov	r5, r0
 800373a:	b911      	cbnz	r1, 8003742 <sbrk_aligned+0x12>
 800373c:	f000 f9ce 	bl	8003adc <_sbrk_r>
 8003740:	6030      	str	r0, [r6, #0]
 8003742:	4621      	mov	r1, r4
 8003744:	4628      	mov	r0, r5
 8003746:	f000 f9c9 	bl	8003adc <_sbrk_r>
 800374a:	1c43      	adds	r3, r0, #1
 800374c:	d103      	bne.n	8003756 <sbrk_aligned+0x26>
 800374e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003752:	4620      	mov	r0, r4
 8003754:	bd70      	pop	{r4, r5, r6, pc}
 8003756:	1cc4      	adds	r4, r0, #3
 8003758:	f024 0403 	bic.w	r4, r4, #3
 800375c:	42a0      	cmp	r0, r4
 800375e:	d0f8      	beq.n	8003752 <sbrk_aligned+0x22>
 8003760:	1a21      	subs	r1, r4, r0
 8003762:	4628      	mov	r0, r5
 8003764:	f000 f9ba 	bl	8003adc <_sbrk_r>
 8003768:	3001      	adds	r0, #1
 800376a:	d1f2      	bne.n	8003752 <sbrk_aligned+0x22>
 800376c:	e7ef      	b.n	800374e <sbrk_aligned+0x1e>
 800376e:	bf00      	nop
 8003770:	2000035c 	.word	0x2000035c

08003774 <_malloc_r>:
 8003774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003778:	1ccd      	adds	r5, r1, #3
 800377a:	f025 0503 	bic.w	r5, r5, #3
 800377e:	3508      	adds	r5, #8
 8003780:	2d0c      	cmp	r5, #12
 8003782:	bf38      	it	cc
 8003784:	250c      	movcc	r5, #12
 8003786:	2d00      	cmp	r5, #0
 8003788:	4606      	mov	r6, r0
 800378a:	db01      	blt.n	8003790 <_malloc_r+0x1c>
 800378c:	42a9      	cmp	r1, r5
 800378e:	d904      	bls.n	800379a <_malloc_r+0x26>
 8003790:	230c      	movs	r3, #12
 8003792:	6033      	str	r3, [r6, #0]
 8003794:	2000      	movs	r0, #0
 8003796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800379a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003870 <_malloc_r+0xfc>
 800379e:	f000 f869 	bl	8003874 <__malloc_lock>
 80037a2:	f8d8 3000 	ldr.w	r3, [r8]
 80037a6:	461c      	mov	r4, r3
 80037a8:	bb44      	cbnz	r4, 80037fc <_malloc_r+0x88>
 80037aa:	4629      	mov	r1, r5
 80037ac:	4630      	mov	r0, r6
 80037ae:	f7ff ffbf 	bl	8003730 <sbrk_aligned>
 80037b2:	1c43      	adds	r3, r0, #1
 80037b4:	4604      	mov	r4, r0
 80037b6:	d158      	bne.n	800386a <_malloc_r+0xf6>
 80037b8:	f8d8 4000 	ldr.w	r4, [r8]
 80037bc:	4627      	mov	r7, r4
 80037be:	2f00      	cmp	r7, #0
 80037c0:	d143      	bne.n	800384a <_malloc_r+0xd6>
 80037c2:	2c00      	cmp	r4, #0
 80037c4:	d04b      	beq.n	800385e <_malloc_r+0xea>
 80037c6:	6823      	ldr	r3, [r4, #0]
 80037c8:	4639      	mov	r1, r7
 80037ca:	4630      	mov	r0, r6
 80037cc:	eb04 0903 	add.w	r9, r4, r3
 80037d0:	f000 f984 	bl	8003adc <_sbrk_r>
 80037d4:	4581      	cmp	r9, r0
 80037d6:	d142      	bne.n	800385e <_malloc_r+0xea>
 80037d8:	6821      	ldr	r1, [r4, #0]
 80037da:	1a6d      	subs	r5, r5, r1
 80037dc:	4629      	mov	r1, r5
 80037de:	4630      	mov	r0, r6
 80037e0:	f7ff ffa6 	bl	8003730 <sbrk_aligned>
 80037e4:	3001      	adds	r0, #1
 80037e6:	d03a      	beq.n	800385e <_malloc_r+0xea>
 80037e8:	6823      	ldr	r3, [r4, #0]
 80037ea:	442b      	add	r3, r5
 80037ec:	6023      	str	r3, [r4, #0]
 80037ee:	f8d8 3000 	ldr.w	r3, [r8]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	bb62      	cbnz	r2, 8003850 <_malloc_r+0xdc>
 80037f6:	f8c8 7000 	str.w	r7, [r8]
 80037fa:	e00f      	b.n	800381c <_malloc_r+0xa8>
 80037fc:	6822      	ldr	r2, [r4, #0]
 80037fe:	1b52      	subs	r2, r2, r5
 8003800:	d420      	bmi.n	8003844 <_malloc_r+0xd0>
 8003802:	2a0b      	cmp	r2, #11
 8003804:	d917      	bls.n	8003836 <_malloc_r+0xc2>
 8003806:	1961      	adds	r1, r4, r5
 8003808:	42a3      	cmp	r3, r4
 800380a:	6025      	str	r5, [r4, #0]
 800380c:	bf18      	it	ne
 800380e:	6059      	strne	r1, [r3, #4]
 8003810:	6863      	ldr	r3, [r4, #4]
 8003812:	bf08      	it	eq
 8003814:	f8c8 1000 	streq.w	r1, [r8]
 8003818:	5162      	str	r2, [r4, r5]
 800381a:	604b      	str	r3, [r1, #4]
 800381c:	4630      	mov	r0, r6
 800381e:	f000 f82f 	bl	8003880 <__malloc_unlock>
 8003822:	f104 000b 	add.w	r0, r4, #11
 8003826:	1d23      	adds	r3, r4, #4
 8003828:	f020 0007 	bic.w	r0, r0, #7
 800382c:	1ac2      	subs	r2, r0, r3
 800382e:	bf1c      	itt	ne
 8003830:	1a1b      	subne	r3, r3, r0
 8003832:	50a3      	strne	r3, [r4, r2]
 8003834:	e7af      	b.n	8003796 <_malloc_r+0x22>
 8003836:	6862      	ldr	r2, [r4, #4]
 8003838:	42a3      	cmp	r3, r4
 800383a:	bf0c      	ite	eq
 800383c:	f8c8 2000 	streq.w	r2, [r8]
 8003840:	605a      	strne	r2, [r3, #4]
 8003842:	e7eb      	b.n	800381c <_malloc_r+0xa8>
 8003844:	4623      	mov	r3, r4
 8003846:	6864      	ldr	r4, [r4, #4]
 8003848:	e7ae      	b.n	80037a8 <_malloc_r+0x34>
 800384a:	463c      	mov	r4, r7
 800384c:	687f      	ldr	r7, [r7, #4]
 800384e:	e7b6      	b.n	80037be <_malloc_r+0x4a>
 8003850:	461a      	mov	r2, r3
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	42a3      	cmp	r3, r4
 8003856:	d1fb      	bne.n	8003850 <_malloc_r+0xdc>
 8003858:	2300      	movs	r3, #0
 800385a:	6053      	str	r3, [r2, #4]
 800385c:	e7de      	b.n	800381c <_malloc_r+0xa8>
 800385e:	230c      	movs	r3, #12
 8003860:	6033      	str	r3, [r6, #0]
 8003862:	4630      	mov	r0, r6
 8003864:	f000 f80c 	bl	8003880 <__malloc_unlock>
 8003868:	e794      	b.n	8003794 <_malloc_r+0x20>
 800386a:	6005      	str	r5, [r0, #0]
 800386c:	e7d6      	b.n	800381c <_malloc_r+0xa8>
 800386e:	bf00      	nop
 8003870:	20000360 	.word	0x20000360

08003874 <__malloc_lock>:
 8003874:	4801      	ldr	r0, [pc, #4]	@ (800387c <__malloc_lock+0x8>)
 8003876:	f000 b96c 	b.w	8003b52 <__retarget_lock_acquire_recursive>
 800387a:	bf00      	nop
 800387c:	200004a0 	.word	0x200004a0

08003880 <__malloc_unlock>:
 8003880:	4801      	ldr	r0, [pc, #4]	@ (8003888 <__malloc_unlock+0x8>)
 8003882:	f000 b967 	b.w	8003b54 <__retarget_lock_release_recursive>
 8003886:	bf00      	nop
 8003888:	200004a0 	.word	0x200004a0

0800388c <std>:
 800388c:	2300      	movs	r3, #0
 800388e:	b510      	push	{r4, lr}
 8003890:	4604      	mov	r4, r0
 8003892:	e9c0 3300 	strd	r3, r3, [r0]
 8003896:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800389a:	6083      	str	r3, [r0, #8]
 800389c:	8181      	strh	r1, [r0, #12]
 800389e:	6643      	str	r3, [r0, #100]	@ 0x64
 80038a0:	81c2      	strh	r2, [r0, #14]
 80038a2:	6183      	str	r3, [r0, #24]
 80038a4:	4619      	mov	r1, r3
 80038a6:	2208      	movs	r2, #8
 80038a8:	305c      	adds	r0, #92	@ 0x5c
 80038aa:	f000 f90f 	bl	8003acc <memset>
 80038ae:	4b0d      	ldr	r3, [pc, #52]	@ (80038e4 <std+0x58>)
 80038b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80038b2:	4b0d      	ldr	r3, [pc, #52]	@ (80038e8 <std+0x5c>)
 80038b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80038b6:	4b0d      	ldr	r3, [pc, #52]	@ (80038ec <std+0x60>)
 80038b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80038ba:	4b0d      	ldr	r3, [pc, #52]	@ (80038f0 <std+0x64>)
 80038bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80038be:	4b0d      	ldr	r3, [pc, #52]	@ (80038f4 <std+0x68>)
 80038c0:	6224      	str	r4, [r4, #32]
 80038c2:	429c      	cmp	r4, r3
 80038c4:	d006      	beq.n	80038d4 <std+0x48>
 80038c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80038ca:	4294      	cmp	r4, r2
 80038cc:	d002      	beq.n	80038d4 <std+0x48>
 80038ce:	33d0      	adds	r3, #208	@ 0xd0
 80038d0:	429c      	cmp	r4, r3
 80038d2:	d105      	bne.n	80038e0 <std+0x54>
 80038d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80038d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038dc:	f000 b938 	b.w	8003b50 <__retarget_lock_init_recursive>
 80038e0:	bd10      	pop	{r4, pc}
 80038e2:	bf00      	nop
 80038e4:	08003d61 	.word	0x08003d61
 80038e8:	08003d83 	.word	0x08003d83
 80038ec:	08003dbb 	.word	0x08003dbb
 80038f0:	08003ddf 	.word	0x08003ddf
 80038f4:	20000364 	.word	0x20000364

080038f8 <stdio_exit_handler>:
 80038f8:	4a02      	ldr	r2, [pc, #8]	@ (8003904 <stdio_exit_handler+0xc>)
 80038fa:	4903      	ldr	r1, [pc, #12]	@ (8003908 <stdio_exit_handler+0x10>)
 80038fc:	4803      	ldr	r0, [pc, #12]	@ (800390c <stdio_exit_handler+0x14>)
 80038fe:	f000 b869 	b.w	80039d4 <_fwalk_sglue>
 8003902:	bf00      	nop
 8003904:	20000140 	.word	0x20000140
 8003908:	08003d11 	.word	0x08003d11
 800390c:	20000150 	.word	0x20000150

08003910 <cleanup_stdio>:
 8003910:	6841      	ldr	r1, [r0, #4]
 8003912:	4b0c      	ldr	r3, [pc, #48]	@ (8003944 <cleanup_stdio+0x34>)
 8003914:	4299      	cmp	r1, r3
 8003916:	b510      	push	{r4, lr}
 8003918:	4604      	mov	r4, r0
 800391a:	d001      	beq.n	8003920 <cleanup_stdio+0x10>
 800391c:	f000 f9f8 	bl	8003d10 <_fflush_r>
 8003920:	68a1      	ldr	r1, [r4, #8]
 8003922:	4b09      	ldr	r3, [pc, #36]	@ (8003948 <cleanup_stdio+0x38>)
 8003924:	4299      	cmp	r1, r3
 8003926:	d002      	beq.n	800392e <cleanup_stdio+0x1e>
 8003928:	4620      	mov	r0, r4
 800392a:	f000 f9f1 	bl	8003d10 <_fflush_r>
 800392e:	68e1      	ldr	r1, [r4, #12]
 8003930:	4b06      	ldr	r3, [pc, #24]	@ (800394c <cleanup_stdio+0x3c>)
 8003932:	4299      	cmp	r1, r3
 8003934:	d004      	beq.n	8003940 <cleanup_stdio+0x30>
 8003936:	4620      	mov	r0, r4
 8003938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800393c:	f000 b9e8 	b.w	8003d10 <_fflush_r>
 8003940:	bd10      	pop	{r4, pc}
 8003942:	bf00      	nop
 8003944:	20000364 	.word	0x20000364
 8003948:	200003cc 	.word	0x200003cc
 800394c:	20000434 	.word	0x20000434

08003950 <global_stdio_init.part.0>:
 8003950:	b510      	push	{r4, lr}
 8003952:	4b0b      	ldr	r3, [pc, #44]	@ (8003980 <global_stdio_init.part.0+0x30>)
 8003954:	4c0b      	ldr	r4, [pc, #44]	@ (8003984 <global_stdio_init.part.0+0x34>)
 8003956:	4a0c      	ldr	r2, [pc, #48]	@ (8003988 <global_stdio_init.part.0+0x38>)
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	4620      	mov	r0, r4
 800395c:	2200      	movs	r2, #0
 800395e:	2104      	movs	r1, #4
 8003960:	f7ff ff94 	bl	800388c <std>
 8003964:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003968:	2201      	movs	r2, #1
 800396a:	2109      	movs	r1, #9
 800396c:	f7ff ff8e 	bl	800388c <std>
 8003970:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003974:	2202      	movs	r2, #2
 8003976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800397a:	2112      	movs	r1, #18
 800397c:	f7ff bf86 	b.w	800388c <std>
 8003980:	2000049c 	.word	0x2000049c
 8003984:	20000364 	.word	0x20000364
 8003988:	080038f9 	.word	0x080038f9

0800398c <__sfp_lock_acquire>:
 800398c:	4801      	ldr	r0, [pc, #4]	@ (8003994 <__sfp_lock_acquire+0x8>)
 800398e:	f000 b8e0 	b.w	8003b52 <__retarget_lock_acquire_recursive>
 8003992:	bf00      	nop
 8003994:	200004a1 	.word	0x200004a1

08003998 <__sfp_lock_release>:
 8003998:	4801      	ldr	r0, [pc, #4]	@ (80039a0 <__sfp_lock_release+0x8>)
 800399a:	f000 b8db 	b.w	8003b54 <__retarget_lock_release_recursive>
 800399e:	bf00      	nop
 80039a0:	200004a1 	.word	0x200004a1

080039a4 <__sinit>:
 80039a4:	b510      	push	{r4, lr}
 80039a6:	4604      	mov	r4, r0
 80039a8:	f7ff fff0 	bl	800398c <__sfp_lock_acquire>
 80039ac:	6a23      	ldr	r3, [r4, #32]
 80039ae:	b11b      	cbz	r3, 80039b8 <__sinit+0x14>
 80039b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039b4:	f7ff bff0 	b.w	8003998 <__sfp_lock_release>
 80039b8:	4b04      	ldr	r3, [pc, #16]	@ (80039cc <__sinit+0x28>)
 80039ba:	6223      	str	r3, [r4, #32]
 80039bc:	4b04      	ldr	r3, [pc, #16]	@ (80039d0 <__sinit+0x2c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1f5      	bne.n	80039b0 <__sinit+0xc>
 80039c4:	f7ff ffc4 	bl	8003950 <global_stdio_init.part.0>
 80039c8:	e7f2      	b.n	80039b0 <__sinit+0xc>
 80039ca:	bf00      	nop
 80039cc:	08003911 	.word	0x08003911
 80039d0:	2000049c 	.word	0x2000049c

080039d4 <_fwalk_sglue>:
 80039d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039d8:	4607      	mov	r7, r0
 80039da:	4688      	mov	r8, r1
 80039dc:	4614      	mov	r4, r2
 80039de:	2600      	movs	r6, #0
 80039e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80039e4:	f1b9 0901 	subs.w	r9, r9, #1
 80039e8:	d505      	bpl.n	80039f6 <_fwalk_sglue+0x22>
 80039ea:	6824      	ldr	r4, [r4, #0]
 80039ec:	2c00      	cmp	r4, #0
 80039ee:	d1f7      	bne.n	80039e0 <_fwalk_sglue+0xc>
 80039f0:	4630      	mov	r0, r6
 80039f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039f6:	89ab      	ldrh	r3, [r5, #12]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d907      	bls.n	8003a0c <_fwalk_sglue+0x38>
 80039fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a00:	3301      	adds	r3, #1
 8003a02:	d003      	beq.n	8003a0c <_fwalk_sglue+0x38>
 8003a04:	4629      	mov	r1, r5
 8003a06:	4638      	mov	r0, r7
 8003a08:	47c0      	blx	r8
 8003a0a:	4306      	orrs	r6, r0
 8003a0c:	3568      	adds	r5, #104	@ 0x68
 8003a0e:	e7e9      	b.n	80039e4 <_fwalk_sglue+0x10>

08003a10 <_puts_r>:
 8003a10:	6a03      	ldr	r3, [r0, #32]
 8003a12:	b570      	push	{r4, r5, r6, lr}
 8003a14:	6884      	ldr	r4, [r0, #8]
 8003a16:	4605      	mov	r5, r0
 8003a18:	460e      	mov	r6, r1
 8003a1a:	b90b      	cbnz	r3, 8003a20 <_puts_r+0x10>
 8003a1c:	f7ff ffc2 	bl	80039a4 <__sinit>
 8003a20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a22:	07db      	lsls	r3, r3, #31
 8003a24:	d405      	bmi.n	8003a32 <_puts_r+0x22>
 8003a26:	89a3      	ldrh	r3, [r4, #12]
 8003a28:	0598      	lsls	r0, r3, #22
 8003a2a:	d402      	bmi.n	8003a32 <_puts_r+0x22>
 8003a2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a2e:	f000 f890 	bl	8003b52 <__retarget_lock_acquire_recursive>
 8003a32:	89a3      	ldrh	r3, [r4, #12]
 8003a34:	0719      	lsls	r1, r3, #28
 8003a36:	d502      	bpl.n	8003a3e <_puts_r+0x2e>
 8003a38:	6923      	ldr	r3, [r4, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d135      	bne.n	8003aaa <_puts_r+0x9a>
 8003a3e:	4621      	mov	r1, r4
 8003a40:	4628      	mov	r0, r5
 8003a42:	f000 fa0f 	bl	8003e64 <__swsetup_r>
 8003a46:	b380      	cbz	r0, 8003aaa <_puts_r+0x9a>
 8003a48:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8003a4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a4e:	07da      	lsls	r2, r3, #31
 8003a50:	d405      	bmi.n	8003a5e <_puts_r+0x4e>
 8003a52:	89a3      	ldrh	r3, [r4, #12]
 8003a54:	059b      	lsls	r3, r3, #22
 8003a56:	d402      	bmi.n	8003a5e <_puts_r+0x4e>
 8003a58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a5a:	f000 f87b 	bl	8003b54 <__retarget_lock_release_recursive>
 8003a5e:	4628      	mov	r0, r5
 8003a60:	bd70      	pop	{r4, r5, r6, pc}
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	da04      	bge.n	8003a70 <_puts_r+0x60>
 8003a66:	69a2      	ldr	r2, [r4, #24]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	dc17      	bgt.n	8003a9c <_puts_r+0x8c>
 8003a6c:	290a      	cmp	r1, #10
 8003a6e:	d015      	beq.n	8003a9c <_puts_r+0x8c>
 8003a70:	6823      	ldr	r3, [r4, #0]
 8003a72:	1c5a      	adds	r2, r3, #1
 8003a74:	6022      	str	r2, [r4, #0]
 8003a76:	7019      	strb	r1, [r3, #0]
 8003a78:	68a3      	ldr	r3, [r4, #8]
 8003a7a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	60a3      	str	r3, [r4, #8]
 8003a82:	2900      	cmp	r1, #0
 8003a84:	d1ed      	bne.n	8003a62 <_puts_r+0x52>
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	da11      	bge.n	8003aae <_puts_r+0x9e>
 8003a8a:	4622      	mov	r2, r4
 8003a8c:	210a      	movs	r1, #10
 8003a8e:	4628      	mov	r0, r5
 8003a90:	f000 f9a9 	bl	8003de6 <__swbuf_r>
 8003a94:	3001      	adds	r0, #1
 8003a96:	d0d7      	beq.n	8003a48 <_puts_r+0x38>
 8003a98:	250a      	movs	r5, #10
 8003a9a:	e7d7      	b.n	8003a4c <_puts_r+0x3c>
 8003a9c:	4622      	mov	r2, r4
 8003a9e:	4628      	mov	r0, r5
 8003aa0:	f000 f9a1 	bl	8003de6 <__swbuf_r>
 8003aa4:	3001      	adds	r0, #1
 8003aa6:	d1e7      	bne.n	8003a78 <_puts_r+0x68>
 8003aa8:	e7ce      	b.n	8003a48 <_puts_r+0x38>
 8003aaa:	3e01      	subs	r6, #1
 8003aac:	e7e4      	b.n	8003a78 <_puts_r+0x68>
 8003aae:	6823      	ldr	r3, [r4, #0]
 8003ab0:	1c5a      	adds	r2, r3, #1
 8003ab2:	6022      	str	r2, [r4, #0]
 8003ab4:	220a      	movs	r2, #10
 8003ab6:	701a      	strb	r2, [r3, #0]
 8003ab8:	e7ee      	b.n	8003a98 <_puts_r+0x88>
	...

08003abc <puts>:
 8003abc:	4b02      	ldr	r3, [pc, #8]	@ (8003ac8 <puts+0xc>)
 8003abe:	4601      	mov	r1, r0
 8003ac0:	6818      	ldr	r0, [r3, #0]
 8003ac2:	f7ff bfa5 	b.w	8003a10 <_puts_r>
 8003ac6:	bf00      	nop
 8003ac8:	2000014c 	.word	0x2000014c

08003acc <memset>:
 8003acc:	4402      	add	r2, r0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d100      	bne.n	8003ad6 <memset+0xa>
 8003ad4:	4770      	bx	lr
 8003ad6:	f803 1b01 	strb.w	r1, [r3], #1
 8003ada:	e7f9      	b.n	8003ad0 <memset+0x4>

08003adc <_sbrk_r>:
 8003adc:	b538      	push	{r3, r4, r5, lr}
 8003ade:	4d06      	ldr	r5, [pc, #24]	@ (8003af8 <_sbrk_r+0x1c>)
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	4604      	mov	r4, r0
 8003ae4:	4608      	mov	r0, r1
 8003ae6:	602b      	str	r3, [r5, #0]
 8003ae8:	f7fd fd40 	bl	800156c <_sbrk>
 8003aec:	1c43      	adds	r3, r0, #1
 8003aee:	d102      	bne.n	8003af6 <_sbrk_r+0x1a>
 8003af0:	682b      	ldr	r3, [r5, #0]
 8003af2:	b103      	cbz	r3, 8003af6 <_sbrk_r+0x1a>
 8003af4:	6023      	str	r3, [r4, #0]
 8003af6:	bd38      	pop	{r3, r4, r5, pc}
 8003af8:	200004a4 	.word	0x200004a4

08003afc <__errno>:
 8003afc:	4b01      	ldr	r3, [pc, #4]	@ (8003b04 <__errno+0x8>)
 8003afe:	6818      	ldr	r0, [r3, #0]
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	2000014c 	.word	0x2000014c

08003b08 <__libc_init_array>:
 8003b08:	b570      	push	{r4, r5, r6, lr}
 8003b0a:	4d0d      	ldr	r5, [pc, #52]	@ (8003b40 <__libc_init_array+0x38>)
 8003b0c:	4c0d      	ldr	r4, [pc, #52]	@ (8003b44 <__libc_init_array+0x3c>)
 8003b0e:	1b64      	subs	r4, r4, r5
 8003b10:	10a4      	asrs	r4, r4, #2
 8003b12:	2600      	movs	r6, #0
 8003b14:	42a6      	cmp	r6, r4
 8003b16:	d109      	bne.n	8003b2c <__libc_init_array+0x24>
 8003b18:	4d0b      	ldr	r5, [pc, #44]	@ (8003b48 <__libc_init_array+0x40>)
 8003b1a:	4c0c      	ldr	r4, [pc, #48]	@ (8003b4c <__libc_init_array+0x44>)
 8003b1c:	f000 fac2 	bl	80040a4 <_init>
 8003b20:	1b64      	subs	r4, r4, r5
 8003b22:	10a4      	asrs	r4, r4, #2
 8003b24:	2600      	movs	r6, #0
 8003b26:	42a6      	cmp	r6, r4
 8003b28:	d105      	bne.n	8003b36 <__libc_init_array+0x2e>
 8003b2a:	bd70      	pop	{r4, r5, r6, pc}
 8003b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b30:	4798      	blx	r3
 8003b32:	3601      	adds	r6, #1
 8003b34:	e7ee      	b.n	8003b14 <__libc_init_array+0xc>
 8003b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b3a:	4798      	blx	r3
 8003b3c:	3601      	adds	r6, #1
 8003b3e:	e7f2      	b.n	8003b26 <__libc_init_array+0x1e>
 8003b40:	0800416c 	.word	0x0800416c
 8003b44:	0800416c 	.word	0x0800416c
 8003b48:	0800416c 	.word	0x0800416c
 8003b4c:	08004170 	.word	0x08004170

08003b50 <__retarget_lock_init_recursive>:
 8003b50:	4770      	bx	lr

08003b52 <__retarget_lock_acquire_recursive>:
 8003b52:	4770      	bx	lr

08003b54 <__retarget_lock_release_recursive>:
 8003b54:	4770      	bx	lr

08003b56 <memcpy>:
 8003b56:	440a      	add	r2, r1
 8003b58:	4291      	cmp	r1, r2
 8003b5a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003b5e:	d100      	bne.n	8003b62 <memcpy+0xc>
 8003b60:	4770      	bx	lr
 8003b62:	b510      	push	{r4, lr}
 8003b64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b6c:	4291      	cmp	r1, r2
 8003b6e:	d1f9      	bne.n	8003b64 <memcpy+0xe>
 8003b70:	bd10      	pop	{r4, pc}
	...

08003b74 <_free_r>:
 8003b74:	b538      	push	{r3, r4, r5, lr}
 8003b76:	4605      	mov	r5, r0
 8003b78:	2900      	cmp	r1, #0
 8003b7a:	d041      	beq.n	8003c00 <_free_r+0x8c>
 8003b7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b80:	1f0c      	subs	r4, r1, #4
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	bfb8      	it	lt
 8003b86:	18e4      	addlt	r4, r4, r3
 8003b88:	f7ff fe74 	bl	8003874 <__malloc_lock>
 8003b8c:	4a1d      	ldr	r2, [pc, #116]	@ (8003c04 <_free_r+0x90>)
 8003b8e:	6813      	ldr	r3, [r2, #0]
 8003b90:	b933      	cbnz	r3, 8003ba0 <_free_r+0x2c>
 8003b92:	6063      	str	r3, [r4, #4]
 8003b94:	6014      	str	r4, [r2, #0]
 8003b96:	4628      	mov	r0, r5
 8003b98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b9c:	f7ff be70 	b.w	8003880 <__malloc_unlock>
 8003ba0:	42a3      	cmp	r3, r4
 8003ba2:	d908      	bls.n	8003bb6 <_free_r+0x42>
 8003ba4:	6820      	ldr	r0, [r4, #0]
 8003ba6:	1821      	adds	r1, r4, r0
 8003ba8:	428b      	cmp	r3, r1
 8003baa:	bf01      	itttt	eq
 8003bac:	6819      	ldreq	r1, [r3, #0]
 8003bae:	685b      	ldreq	r3, [r3, #4]
 8003bb0:	1809      	addeq	r1, r1, r0
 8003bb2:	6021      	streq	r1, [r4, #0]
 8003bb4:	e7ed      	b.n	8003b92 <_free_r+0x1e>
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	b10b      	cbz	r3, 8003bc0 <_free_r+0x4c>
 8003bbc:	42a3      	cmp	r3, r4
 8003bbe:	d9fa      	bls.n	8003bb6 <_free_r+0x42>
 8003bc0:	6811      	ldr	r1, [r2, #0]
 8003bc2:	1850      	adds	r0, r2, r1
 8003bc4:	42a0      	cmp	r0, r4
 8003bc6:	d10b      	bne.n	8003be0 <_free_r+0x6c>
 8003bc8:	6820      	ldr	r0, [r4, #0]
 8003bca:	4401      	add	r1, r0
 8003bcc:	1850      	adds	r0, r2, r1
 8003bce:	4283      	cmp	r3, r0
 8003bd0:	6011      	str	r1, [r2, #0]
 8003bd2:	d1e0      	bne.n	8003b96 <_free_r+0x22>
 8003bd4:	6818      	ldr	r0, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	6053      	str	r3, [r2, #4]
 8003bda:	4408      	add	r0, r1
 8003bdc:	6010      	str	r0, [r2, #0]
 8003bde:	e7da      	b.n	8003b96 <_free_r+0x22>
 8003be0:	d902      	bls.n	8003be8 <_free_r+0x74>
 8003be2:	230c      	movs	r3, #12
 8003be4:	602b      	str	r3, [r5, #0]
 8003be6:	e7d6      	b.n	8003b96 <_free_r+0x22>
 8003be8:	6820      	ldr	r0, [r4, #0]
 8003bea:	1821      	adds	r1, r4, r0
 8003bec:	428b      	cmp	r3, r1
 8003bee:	bf04      	itt	eq
 8003bf0:	6819      	ldreq	r1, [r3, #0]
 8003bf2:	685b      	ldreq	r3, [r3, #4]
 8003bf4:	6063      	str	r3, [r4, #4]
 8003bf6:	bf04      	itt	eq
 8003bf8:	1809      	addeq	r1, r1, r0
 8003bfa:	6021      	streq	r1, [r4, #0]
 8003bfc:	6054      	str	r4, [r2, #4]
 8003bfe:	e7ca      	b.n	8003b96 <_free_r+0x22>
 8003c00:	bd38      	pop	{r3, r4, r5, pc}
 8003c02:	bf00      	nop
 8003c04:	20000360 	.word	0x20000360

08003c08 <__sflush_r>:
 8003c08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c10:	0716      	lsls	r6, r2, #28
 8003c12:	4605      	mov	r5, r0
 8003c14:	460c      	mov	r4, r1
 8003c16:	d454      	bmi.n	8003cc2 <__sflush_r+0xba>
 8003c18:	684b      	ldr	r3, [r1, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	dc02      	bgt.n	8003c24 <__sflush_r+0x1c>
 8003c1e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	dd48      	ble.n	8003cb6 <__sflush_r+0xae>
 8003c24:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003c26:	2e00      	cmp	r6, #0
 8003c28:	d045      	beq.n	8003cb6 <__sflush_r+0xae>
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003c30:	682f      	ldr	r7, [r5, #0]
 8003c32:	6a21      	ldr	r1, [r4, #32]
 8003c34:	602b      	str	r3, [r5, #0]
 8003c36:	d030      	beq.n	8003c9a <__sflush_r+0x92>
 8003c38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003c3a:	89a3      	ldrh	r3, [r4, #12]
 8003c3c:	0759      	lsls	r1, r3, #29
 8003c3e:	d505      	bpl.n	8003c4c <__sflush_r+0x44>
 8003c40:	6863      	ldr	r3, [r4, #4]
 8003c42:	1ad2      	subs	r2, r2, r3
 8003c44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003c46:	b10b      	cbz	r3, 8003c4c <__sflush_r+0x44>
 8003c48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003c4a:	1ad2      	subs	r2, r2, r3
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003c50:	6a21      	ldr	r1, [r4, #32]
 8003c52:	4628      	mov	r0, r5
 8003c54:	47b0      	blx	r6
 8003c56:	1c43      	adds	r3, r0, #1
 8003c58:	89a3      	ldrh	r3, [r4, #12]
 8003c5a:	d106      	bne.n	8003c6a <__sflush_r+0x62>
 8003c5c:	6829      	ldr	r1, [r5, #0]
 8003c5e:	291d      	cmp	r1, #29
 8003c60:	d82b      	bhi.n	8003cba <__sflush_r+0xb2>
 8003c62:	4a2a      	ldr	r2, [pc, #168]	@ (8003d0c <__sflush_r+0x104>)
 8003c64:	410a      	asrs	r2, r1
 8003c66:	07d6      	lsls	r6, r2, #31
 8003c68:	d427      	bmi.n	8003cba <__sflush_r+0xb2>
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	6062      	str	r2, [r4, #4]
 8003c6e:	04d9      	lsls	r1, r3, #19
 8003c70:	6922      	ldr	r2, [r4, #16]
 8003c72:	6022      	str	r2, [r4, #0]
 8003c74:	d504      	bpl.n	8003c80 <__sflush_r+0x78>
 8003c76:	1c42      	adds	r2, r0, #1
 8003c78:	d101      	bne.n	8003c7e <__sflush_r+0x76>
 8003c7a:	682b      	ldr	r3, [r5, #0]
 8003c7c:	b903      	cbnz	r3, 8003c80 <__sflush_r+0x78>
 8003c7e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003c80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c82:	602f      	str	r7, [r5, #0]
 8003c84:	b1b9      	cbz	r1, 8003cb6 <__sflush_r+0xae>
 8003c86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003c8a:	4299      	cmp	r1, r3
 8003c8c:	d002      	beq.n	8003c94 <__sflush_r+0x8c>
 8003c8e:	4628      	mov	r0, r5
 8003c90:	f7ff ff70 	bl	8003b74 <_free_r>
 8003c94:	2300      	movs	r3, #0
 8003c96:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c98:	e00d      	b.n	8003cb6 <__sflush_r+0xae>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	4628      	mov	r0, r5
 8003c9e:	47b0      	blx	r6
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	1c50      	adds	r0, r2, #1
 8003ca4:	d1c9      	bne.n	8003c3a <__sflush_r+0x32>
 8003ca6:	682b      	ldr	r3, [r5, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d0c6      	beq.n	8003c3a <__sflush_r+0x32>
 8003cac:	2b1d      	cmp	r3, #29
 8003cae:	d001      	beq.n	8003cb4 <__sflush_r+0xac>
 8003cb0:	2b16      	cmp	r3, #22
 8003cb2:	d11e      	bne.n	8003cf2 <__sflush_r+0xea>
 8003cb4:	602f      	str	r7, [r5, #0]
 8003cb6:	2000      	movs	r0, #0
 8003cb8:	e022      	b.n	8003d00 <__sflush_r+0xf8>
 8003cba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cbe:	b21b      	sxth	r3, r3
 8003cc0:	e01b      	b.n	8003cfa <__sflush_r+0xf2>
 8003cc2:	690f      	ldr	r7, [r1, #16]
 8003cc4:	2f00      	cmp	r7, #0
 8003cc6:	d0f6      	beq.n	8003cb6 <__sflush_r+0xae>
 8003cc8:	0793      	lsls	r3, r2, #30
 8003cca:	680e      	ldr	r6, [r1, #0]
 8003ccc:	bf08      	it	eq
 8003cce:	694b      	ldreq	r3, [r1, #20]
 8003cd0:	600f      	str	r7, [r1, #0]
 8003cd2:	bf18      	it	ne
 8003cd4:	2300      	movne	r3, #0
 8003cd6:	eba6 0807 	sub.w	r8, r6, r7
 8003cda:	608b      	str	r3, [r1, #8]
 8003cdc:	f1b8 0f00 	cmp.w	r8, #0
 8003ce0:	dde9      	ble.n	8003cb6 <__sflush_r+0xae>
 8003ce2:	6a21      	ldr	r1, [r4, #32]
 8003ce4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003ce6:	4643      	mov	r3, r8
 8003ce8:	463a      	mov	r2, r7
 8003cea:	4628      	mov	r0, r5
 8003cec:	47b0      	blx	r6
 8003cee:	2800      	cmp	r0, #0
 8003cf0:	dc08      	bgt.n	8003d04 <__sflush_r+0xfc>
 8003cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cfa:	81a3      	strh	r3, [r4, #12]
 8003cfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d04:	4407      	add	r7, r0
 8003d06:	eba8 0800 	sub.w	r8, r8, r0
 8003d0a:	e7e7      	b.n	8003cdc <__sflush_r+0xd4>
 8003d0c:	dfbffffe 	.word	0xdfbffffe

08003d10 <_fflush_r>:
 8003d10:	b538      	push	{r3, r4, r5, lr}
 8003d12:	690b      	ldr	r3, [r1, #16]
 8003d14:	4605      	mov	r5, r0
 8003d16:	460c      	mov	r4, r1
 8003d18:	b913      	cbnz	r3, 8003d20 <_fflush_r+0x10>
 8003d1a:	2500      	movs	r5, #0
 8003d1c:	4628      	mov	r0, r5
 8003d1e:	bd38      	pop	{r3, r4, r5, pc}
 8003d20:	b118      	cbz	r0, 8003d2a <_fflush_r+0x1a>
 8003d22:	6a03      	ldr	r3, [r0, #32]
 8003d24:	b90b      	cbnz	r3, 8003d2a <_fflush_r+0x1a>
 8003d26:	f7ff fe3d 	bl	80039a4 <__sinit>
 8003d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0f3      	beq.n	8003d1a <_fflush_r+0xa>
 8003d32:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003d34:	07d0      	lsls	r0, r2, #31
 8003d36:	d404      	bmi.n	8003d42 <_fflush_r+0x32>
 8003d38:	0599      	lsls	r1, r3, #22
 8003d3a:	d402      	bmi.n	8003d42 <_fflush_r+0x32>
 8003d3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d3e:	f7ff ff08 	bl	8003b52 <__retarget_lock_acquire_recursive>
 8003d42:	4628      	mov	r0, r5
 8003d44:	4621      	mov	r1, r4
 8003d46:	f7ff ff5f 	bl	8003c08 <__sflush_r>
 8003d4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d4c:	07da      	lsls	r2, r3, #31
 8003d4e:	4605      	mov	r5, r0
 8003d50:	d4e4      	bmi.n	8003d1c <_fflush_r+0xc>
 8003d52:	89a3      	ldrh	r3, [r4, #12]
 8003d54:	059b      	lsls	r3, r3, #22
 8003d56:	d4e1      	bmi.n	8003d1c <_fflush_r+0xc>
 8003d58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d5a:	f7ff fefb 	bl	8003b54 <__retarget_lock_release_recursive>
 8003d5e:	e7dd      	b.n	8003d1c <_fflush_r+0xc>

08003d60 <__sread>:
 8003d60:	b510      	push	{r4, lr}
 8003d62:	460c      	mov	r4, r1
 8003d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d68:	f000 f978 	bl	800405c <_read_r>
 8003d6c:	2800      	cmp	r0, #0
 8003d6e:	bfab      	itete	ge
 8003d70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003d72:	89a3      	ldrhlt	r3, [r4, #12]
 8003d74:	181b      	addge	r3, r3, r0
 8003d76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003d7a:	bfac      	ite	ge
 8003d7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003d7e:	81a3      	strhlt	r3, [r4, #12]
 8003d80:	bd10      	pop	{r4, pc}

08003d82 <__swrite>:
 8003d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d86:	461f      	mov	r7, r3
 8003d88:	898b      	ldrh	r3, [r1, #12]
 8003d8a:	05db      	lsls	r3, r3, #23
 8003d8c:	4605      	mov	r5, r0
 8003d8e:	460c      	mov	r4, r1
 8003d90:	4616      	mov	r6, r2
 8003d92:	d505      	bpl.n	8003da0 <__swrite+0x1e>
 8003d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d98:	2302      	movs	r3, #2
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f000 f94c 	bl	8004038 <_lseek_r>
 8003da0:	89a3      	ldrh	r3, [r4, #12]
 8003da2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003da6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003daa:	81a3      	strh	r3, [r4, #12]
 8003dac:	4632      	mov	r2, r6
 8003dae:	463b      	mov	r3, r7
 8003db0:	4628      	mov	r0, r5
 8003db2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003db6:	f000 b963 	b.w	8004080 <_write_r>

08003dba <__sseek>:
 8003dba:	b510      	push	{r4, lr}
 8003dbc:	460c      	mov	r4, r1
 8003dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dc2:	f000 f939 	bl	8004038 <_lseek_r>
 8003dc6:	1c43      	adds	r3, r0, #1
 8003dc8:	89a3      	ldrh	r3, [r4, #12]
 8003dca:	bf15      	itete	ne
 8003dcc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003dce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003dd2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003dd6:	81a3      	strheq	r3, [r4, #12]
 8003dd8:	bf18      	it	ne
 8003dda:	81a3      	strhne	r3, [r4, #12]
 8003ddc:	bd10      	pop	{r4, pc}

08003dde <__sclose>:
 8003dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003de2:	f000 b8f7 	b.w	8003fd4 <_close_r>

08003de6 <__swbuf_r>:
 8003de6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003de8:	460e      	mov	r6, r1
 8003dea:	4614      	mov	r4, r2
 8003dec:	4605      	mov	r5, r0
 8003dee:	b118      	cbz	r0, 8003df8 <__swbuf_r+0x12>
 8003df0:	6a03      	ldr	r3, [r0, #32]
 8003df2:	b90b      	cbnz	r3, 8003df8 <__swbuf_r+0x12>
 8003df4:	f7ff fdd6 	bl	80039a4 <__sinit>
 8003df8:	69a3      	ldr	r3, [r4, #24]
 8003dfa:	60a3      	str	r3, [r4, #8]
 8003dfc:	89a3      	ldrh	r3, [r4, #12]
 8003dfe:	071a      	lsls	r2, r3, #28
 8003e00:	d501      	bpl.n	8003e06 <__swbuf_r+0x20>
 8003e02:	6923      	ldr	r3, [r4, #16]
 8003e04:	b943      	cbnz	r3, 8003e18 <__swbuf_r+0x32>
 8003e06:	4621      	mov	r1, r4
 8003e08:	4628      	mov	r0, r5
 8003e0a:	f000 f82b 	bl	8003e64 <__swsetup_r>
 8003e0e:	b118      	cbz	r0, 8003e18 <__swbuf_r+0x32>
 8003e10:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8003e14:	4638      	mov	r0, r7
 8003e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e18:	6823      	ldr	r3, [r4, #0]
 8003e1a:	6922      	ldr	r2, [r4, #16]
 8003e1c:	1a98      	subs	r0, r3, r2
 8003e1e:	6963      	ldr	r3, [r4, #20]
 8003e20:	b2f6      	uxtb	r6, r6
 8003e22:	4283      	cmp	r3, r0
 8003e24:	4637      	mov	r7, r6
 8003e26:	dc05      	bgt.n	8003e34 <__swbuf_r+0x4e>
 8003e28:	4621      	mov	r1, r4
 8003e2a:	4628      	mov	r0, r5
 8003e2c:	f7ff ff70 	bl	8003d10 <_fflush_r>
 8003e30:	2800      	cmp	r0, #0
 8003e32:	d1ed      	bne.n	8003e10 <__swbuf_r+0x2a>
 8003e34:	68a3      	ldr	r3, [r4, #8]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	60a3      	str	r3, [r4, #8]
 8003e3a:	6823      	ldr	r3, [r4, #0]
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	6022      	str	r2, [r4, #0]
 8003e40:	701e      	strb	r6, [r3, #0]
 8003e42:	6962      	ldr	r2, [r4, #20]
 8003e44:	1c43      	adds	r3, r0, #1
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d004      	beq.n	8003e54 <__swbuf_r+0x6e>
 8003e4a:	89a3      	ldrh	r3, [r4, #12]
 8003e4c:	07db      	lsls	r3, r3, #31
 8003e4e:	d5e1      	bpl.n	8003e14 <__swbuf_r+0x2e>
 8003e50:	2e0a      	cmp	r6, #10
 8003e52:	d1df      	bne.n	8003e14 <__swbuf_r+0x2e>
 8003e54:	4621      	mov	r1, r4
 8003e56:	4628      	mov	r0, r5
 8003e58:	f7ff ff5a 	bl	8003d10 <_fflush_r>
 8003e5c:	2800      	cmp	r0, #0
 8003e5e:	d0d9      	beq.n	8003e14 <__swbuf_r+0x2e>
 8003e60:	e7d6      	b.n	8003e10 <__swbuf_r+0x2a>
	...

08003e64 <__swsetup_r>:
 8003e64:	b538      	push	{r3, r4, r5, lr}
 8003e66:	4b29      	ldr	r3, [pc, #164]	@ (8003f0c <__swsetup_r+0xa8>)
 8003e68:	4605      	mov	r5, r0
 8003e6a:	6818      	ldr	r0, [r3, #0]
 8003e6c:	460c      	mov	r4, r1
 8003e6e:	b118      	cbz	r0, 8003e78 <__swsetup_r+0x14>
 8003e70:	6a03      	ldr	r3, [r0, #32]
 8003e72:	b90b      	cbnz	r3, 8003e78 <__swsetup_r+0x14>
 8003e74:	f7ff fd96 	bl	80039a4 <__sinit>
 8003e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e7c:	0719      	lsls	r1, r3, #28
 8003e7e:	d422      	bmi.n	8003ec6 <__swsetup_r+0x62>
 8003e80:	06da      	lsls	r2, r3, #27
 8003e82:	d407      	bmi.n	8003e94 <__swsetup_r+0x30>
 8003e84:	2209      	movs	r2, #9
 8003e86:	602a      	str	r2, [r5, #0]
 8003e88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e8c:	81a3      	strh	r3, [r4, #12]
 8003e8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e92:	e033      	b.n	8003efc <__swsetup_r+0x98>
 8003e94:	0758      	lsls	r0, r3, #29
 8003e96:	d512      	bpl.n	8003ebe <__swsetup_r+0x5a>
 8003e98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003e9a:	b141      	cbz	r1, 8003eae <__swsetup_r+0x4a>
 8003e9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003ea0:	4299      	cmp	r1, r3
 8003ea2:	d002      	beq.n	8003eaa <__swsetup_r+0x46>
 8003ea4:	4628      	mov	r0, r5
 8003ea6:	f7ff fe65 	bl	8003b74 <_free_r>
 8003eaa:	2300      	movs	r3, #0
 8003eac:	6363      	str	r3, [r4, #52]	@ 0x34
 8003eae:	89a3      	ldrh	r3, [r4, #12]
 8003eb0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003eb4:	81a3      	strh	r3, [r4, #12]
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	6063      	str	r3, [r4, #4]
 8003eba:	6923      	ldr	r3, [r4, #16]
 8003ebc:	6023      	str	r3, [r4, #0]
 8003ebe:	89a3      	ldrh	r3, [r4, #12]
 8003ec0:	f043 0308 	orr.w	r3, r3, #8
 8003ec4:	81a3      	strh	r3, [r4, #12]
 8003ec6:	6923      	ldr	r3, [r4, #16]
 8003ec8:	b94b      	cbnz	r3, 8003ede <__swsetup_r+0x7a>
 8003eca:	89a3      	ldrh	r3, [r4, #12]
 8003ecc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003ed0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ed4:	d003      	beq.n	8003ede <__swsetup_r+0x7a>
 8003ed6:	4621      	mov	r1, r4
 8003ed8:	4628      	mov	r0, r5
 8003eda:	f000 f83f 	bl	8003f5c <__smakebuf_r>
 8003ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ee2:	f013 0201 	ands.w	r2, r3, #1
 8003ee6:	d00a      	beq.n	8003efe <__swsetup_r+0x9a>
 8003ee8:	2200      	movs	r2, #0
 8003eea:	60a2      	str	r2, [r4, #8]
 8003eec:	6962      	ldr	r2, [r4, #20]
 8003eee:	4252      	negs	r2, r2
 8003ef0:	61a2      	str	r2, [r4, #24]
 8003ef2:	6922      	ldr	r2, [r4, #16]
 8003ef4:	b942      	cbnz	r2, 8003f08 <__swsetup_r+0xa4>
 8003ef6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003efa:	d1c5      	bne.n	8003e88 <__swsetup_r+0x24>
 8003efc:	bd38      	pop	{r3, r4, r5, pc}
 8003efe:	0799      	lsls	r1, r3, #30
 8003f00:	bf58      	it	pl
 8003f02:	6962      	ldrpl	r2, [r4, #20]
 8003f04:	60a2      	str	r2, [r4, #8]
 8003f06:	e7f4      	b.n	8003ef2 <__swsetup_r+0x8e>
 8003f08:	2000      	movs	r0, #0
 8003f0a:	e7f7      	b.n	8003efc <__swsetup_r+0x98>
 8003f0c:	2000014c 	.word	0x2000014c

08003f10 <__swhatbuf_r>:
 8003f10:	b570      	push	{r4, r5, r6, lr}
 8003f12:	460c      	mov	r4, r1
 8003f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f18:	2900      	cmp	r1, #0
 8003f1a:	b096      	sub	sp, #88	@ 0x58
 8003f1c:	4615      	mov	r5, r2
 8003f1e:	461e      	mov	r6, r3
 8003f20:	da0d      	bge.n	8003f3e <__swhatbuf_r+0x2e>
 8003f22:	89a3      	ldrh	r3, [r4, #12]
 8003f24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003f28:	f04f 0100 	mov.w	r1, #0
 8003f2c:	bf14      	ite	ne
 8003f2e:	2340      	movne	r3, #64	@ 0x40
 8003f30:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003f34:	2000      	movs	r0, #0
 8003f36:	6031      	str	r1, [r6, #0]
 8003f38:	602b      	str	r3, [r5, #0]
 8003f3a:	b016      	add	sp, #88	@ 0x58
 8003f3c:	bd70      	pop	{r4, r5, r6, pc}
 8003f3e:	466a      	mov	r2, sp
 8003f40:	f000 f858 	bl	8003ff4 <_fstat_r>
 8003f44:	2800      	cmp	r0, #0
 8003f46:	dbec      	blt.n	8003f22 <__swhatbuf_r+0x12>
 8003f48:	9901      	ldr	r1, [sp, #4]
 8003f4a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003f4e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003f52:	4259      	negs	r1, r3
 8003f54:	4159      	adcs	r1, r3
 8003f56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f5a:	e7eb      	b.n	8003f34 <__swhatbuf_r+0x24>

08003f5c <__smakebuf_r>:
 8003f5c:	898b      	ldrh	r3, [r1, #12]
 8003f5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f60:	079d      	lsls	r5, r3, #30
 8003f62:	4606      	mov	r6, r0
 8003f64:	460c      	mov	r4, r1
 8003f66:	d507      	bpl.n	8003f78 <__smakebuf_r+0x1c>
 8003f68:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003f6c:	6023      	str	r3, [r4, #0]
 8003f6e:	6123      	str	r3, [r4, #16]
 8003f70:	2301      	movs	r3, #1
 8003f72:	6163      	str	r3, [r4, #20]
 8003f74:	b003      	add	sp, #12
 8003f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f78:	ab01      	add	r3, sp, #4
 8003f7a:	466a      	mov	r2, sp
 8003f7c:	f7ff ffc8 	bl	8003f10 <__swhatbuf_r>
 8003f80:	9f00      	ldr	r7, [sp, #0]
 8003f82:	4605      	mov	r5, r0
 8003f84:	4639      	mov	r1, r7
 8003f86:	4630      	mov	r0, r6
 8003f88:	f7ff fbf4 	bl	8003774 <_malloc_r>
 8003f8c:	b948      	cbnz	r0, 8003fa2 <__smakebuf_r+0x46>
 8003f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f92:	059a      	lsls	r2, r3, #22
 8003f94:	d4ee      	bmi.n	8003f74 <__smakebuf_r+0x18>
 8003f96:	f023 0303 	bic.w	r3, r3, #3
 8003f9a:	f043 0302 	orr.w	r3, r3, #2
 8003f9e:	81a3      	strh	r3, [r4, #12]
 8003fa0:	e7e2      	b.n	8003f68 <__smakebuf_r+0xc>
 8003fa2:	89a3      	ldrh	r3, [r4, #12]
 8003fa4:	6020      	str	r0, [r4, #0]
 8003fa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003faa:	81a3      	strh	r3, [r4, #12]
 8003fac:	9b01      	ldr	r3, [sp, #4]
 8003fae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003fb2:	b15b      	cbz	r3, 8003fcc <__smakebuf_r+0x70>
 8003fb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fb8:	4630      	mov	r0, r6
 8003fba:	f000 f82d 	bl	8004018 <_isatty_r>
 8003fbe:	b128      	cbz	r0, 8003fcc <__smakebuf_r+0x70>
 8003fc0:	89a3      	ldrh	r3, [r4, #12]
 8003fc2:	f023 0303 	bic.w	r3, r3, #3
 8003fc6:	f043 0301 	orr.w	r3, r3, #1
 8003fca:	81a3      	strh	r3, [r4, #12]
 8003fcc:	89a3      	ldrh	r3, [r4, #12]
 8003fce:	431d      	orrs	r5, r3
 8003fd0:	81a5      	strh	r5, [r4, #12]
 8003fd2:	e7cf      	b.n	8003f74 <__smakebuf_r+0x18>

08003fd4 <_close_r>:
 8003fd4:	b538      	push	{r3, r4, r5, lr}
 8003fd6:	4d06      	ldr	r5, [pc, #24]	@ (8003ff0 <_close_r+0x1c>)
 8003fd8:	2300      	movs	r3, #0
 8003fda:	4604      	mov	r4, r0
 8003fdc:	4608      	mov	r0, r1
 8003fde:	602b      	str	r3, [r5, #0]
 8003fe0:	f7fd faf0 	bl	80015c4 <_close>
 8003fe4:	1c43      	adds	r3, r0, #1
 8003fe6:	d102      	bne.n	8003fee <_close_r+0x1a>
 8003fe8:	682b      	ldr	r3, [r5, #0]
 8003fea:	b103      	cbz	r3, 8003fee <_close_r+0x1a>
 8003fec:	6023      	str	r3, [r4, #0]
 8003fee:	bd38      	pop	{r3, r4, r5, pc}
 8003ff0:	200004a4 	.word	0x200004a4

08003ff4 <_fstat_r>:
 8003ff4:	b538      	push	{r3, r4, r5, lr}
 8003ff6:	4d07      	ldr	r5, [pc, #28]	@ (8004014 <_fstat_r+0x20>)
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	4604      	mov	r4, r0
 8003ffc:	4608      	mov	r0, r1
 8003ffe:	4611      	mov	r1, r2
 8004000:	602b      	str	r3, [r5, #0]
 8004002:	f7fd faeb 	bl	80015dc <_fstat>
 8004006:	1c43      	adds	r3, r0, #1
 8004008:	d102      	bne.n	8004010 <_fstat_r+0x1c>
 800400a:	682b      	ldr	r3, [r5, #0]
 800400c:	b103      	cbz	r3, 8004010 <_fstat_r+0x1c>
 800400e:	6023      	str	r3, [r4, #0]
 8004010:	bd38      	pop	{r3, r4, r5, pc}
 8004012:	bf00      	nop
 8004014:	200004a4 	.word	0x200004a4

08004018 <_isatty_r>:
 8004018:	b538      	push	{r3, r4, r5, lr}
 800401a:	4d06      	ldr	r5, [pc, #24]	@ (8004034 <_isatty_r+0x1c>)
 800401c:	2300      	movs	r3, #0
 800401e:	4604      	mov	r4, r0
 8004020:	4608      	mov	r0, r1
 8004022:	602b      	str	r3, [r5, #0]
 8004024:	f7fd faea 	bl	80015fc <_isatty>
 8004028:	1c43      	adds	r3, r0, #1
 800402a:	d102      	bne.n	8004032 <_isatty_r+0x1a>
 800402c:	682b      	ldr	r3, [r5, #0]
 800402e:	b103      	cbz	r3, 8004032 <_isatty_r+0x1a>
 8004030:	6023      	str	r3, [r4, #0]
 8004032:	bd38      	pop	{r3, r4, r5, pc}
 8004034:	200004a4 	.word	0x200004a4

08004038 <_lseek_r>:
 8004038:	b538      	push	{r3, r4, r5, lr}
 800403a:	4d07      	ldr	r5, [pc, #28]	@ (8004058 <_lseek_r+0x20>)
 800403c:	4604      	mov	r4, r0
 800403e:	4608      	mov	r0, r1
 8004040:	4611      	mov	r1, r2
 8004042:	2200      	movs	r2, #0
 8004044:	602a      	str	r2, [r5, #0]
 8004046:	461a      	mov	r2, r3
 8004048:	f7fd fae3 	bl	8001612 <_lseek>
 800404c:	1c43      	adds	r3, r0, #1
 800404e:	d102      	bne.n	8004056 <_lseek_r+0x1e>
 8004050:	682b      	ldr	r3, [r5, #0]
 8004052:	b103      	cbz	r3, 8004056 <_lseek_r+0x1e>
 8004054:	6023      	str	r3, [r4, #0]
 8004056:	bd38      	pop	{r3, r4, r5, pc}
 8004058:	200004a4 	.word	0x200004a4

0800405c <_read_r>:
 800405c:	b538      	push	{r3, r4, r5, lr}
 800405e:	4d07      	ldr	r5, [pc, #28]	@ (800407c <_read_r+0x20>)
 8004060:	4604      	mov	r4, r0
 8004062:	4608      	mov	r0, r1
 8004064:	4611      	mov	r1, r2
 8004066:	2200      	movs	r2, #0
 8004068:	602a      	str	r2, [r5, #0]
 800406a:	461a      	mov	r2, r3
 800406c:	f7fd fa60 	bl	8001530 <_read>
 8004070:	1c43      	adds	r3, r0, #1
 8004072:	d102      	bne.n	800407a <_read_r+0x1e>
 8004074:	682b      	ldr	r3, [r5, #0]
 8004076:	b103      	cbz	r3, 800407a <_read_r+0x1e>
 8004078:	6023      	str	r3, [r4, #0]
 800407a:	bd38      	pop	{r3, r4, r5, pc}
 800407c:	200004a4 	.word	0x200004a4

08004080 <_write_r>:
 8004080:	b538      	push	{r3, r4, r5, lr}
 8004082:	4d07      	ldr	r5, [pc, #28]	@ (80040a0 <_write_r+0x20>)
 8004084:	4604      	mov	r4, r0
 8004086:	4608      	mov	r0, r1
 8004088:	4611      	mov	r1, r2
 800408a:	2200      	movs	r2, #0
 800408c:	602a      	str	r2, [r5, #0]
 800408e:	461a      	mov	r2, r3
 8004090:	f7fd f814 	bl	80010bc <_write>
 8004094:	1c43      	adds	r3, r0, #1
 8004096:	d102      	bne.n	800409e <_write_r+0x1e>
 8004098:	682b      	ldr	r3, [r5, #0]
 800409a:	b103      	cbz	r3, 800409e <_write_r+0x1e>
 800409c:	6023      	str	r3, [r4, #0]
 800409e:	bd38      	pop	{r3, r4, r5, pc}
 80040a0:	200004a4 	.word	0x200004a4

080040a4 <_init>:
 80040a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a6:	bf00      	nop
 80040a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040aa:	bc08      	pop	{r3}
 80040ac:	469e      	mov	lr, r3
 80040ae:	4770      	bx	lr

080040b0 <_fini>:
 80040b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b2:	bf00      	nop
 80040b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040b6:	bc08      	pop	{r3}
 80040b8:	469e      	mov	lr, r3
 80040ba:	4770      	bx	lr
